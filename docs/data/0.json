{
    "0": {
        "file_id": 0,
        "content": "/Podfile",
        "type": "filepath"
    },
    "1": {
        "file_id": 0,
        "content": "This code is a Podfile for an iOS project. It specifies the platform version as iOS 7.0 and defines a target named 'SMG_NothingIsAll'. The file storage section includes PINCache pod, while the SQL storage section (originally LKDBHelper+Transaction) has been removed due to packaging issues and temporary non-usage. The floating window section used to include MBProgressHUD but is also empty now. The UMCPublic SDK sections include UMCCommon and UMCAnalytics pods for Umeng analytics integration.",
        "type": "summary"
    },
    "2": {
        "file_id": 0,
        "content": "platform :ios,'7.0'\ntarget 'SMG_NothingIsAll' do\n#=============== 文件存储 ===============\npod 'PINCache'\n#=============== SQL存储 ===============\n#2020.07.09将LKDB去掉，因为打包时这包报错，并且暂时也不用这个\n#pod 'LKDBHelper+Transaction','~>1.0.4'\n#=============== 浮窗 ===============\n#pod 'MBProgressHUD'\n#=============== 友盟统计 ===============\npod 'UMCCommon'\n#pod 'UMCAnalytics'\nend",
        "type": "code",
        "location": "/Podfile:1-18"
    },
    "3": {
        "file_id": 0,
        "content": "This code is a Podfile for an iOS project. It specifies the platform version as iOS 7.0 and defines a target named 'SMG_NothingIsAll'. The file storage section includes PINCache pod, while the SQL storage section (originally LKDBHelper+Transaction) has been removed due to packaging issues and temporary non-usage. The floating window section used to include MBProgressHUD but is also empty now. The UMCPublic SDK sections include UMCCommon and UMCAnalytics pods for Umeng analytics integration.",
        "type": "comment"
    },
    "4": {
        "file_id": 1,
        "content": "/README.md",
        "type": "filepath"
    },
    "5": {
        "file_id": 1,
        "content": "\"he4o\" AI system uses spiral entropy reduction and machine learning to train neural networks for various tasks. Code serves as a development log tracking progress in architecture design, optimization, and accuracy improvements over time.",
        "type": "summary"
    },
    "6": {
        "file_id": 1,
        "content": "# he4o系统\n#### he4o是一个螺旋熵减机，是一种通用人工智能（AGI）系统：\n1. 机器学习支持：\n   - 迁移学习为主\n   - 强化学习为辅\n2. 知识表征宏微支持：\n   - 稀疏码\n   - 特征\n   - 概念\n   - 时序\n   - 价值\n3. 神经网络支持：动态、模糊、抽具象、组与分、感理性。\n4. 支持智能体自主终身动态学习。\n5. 无论宏观框架还是微观细节设计,都依从相对与循环转化。\n6. 思维控制支持：\n   - 出入 (行为 & 感知) //含反馈\n   - 认知 (识别 & 学习) //含类比\n   - 需求 (任务 & 计划) //含意向\n   - 决策 (求解 & 迁移) //含分析\n7. 数理：\n   - 集合论（迁移）\n   - 概率论（强化）\n8. 计算：使用最简单的bool运算：`类比`和`评价`。\n9. 记忆结构：长时为网（启发式）、短时为树（递归）、瞬时为序（依次）。\n10. 编程思想：DOP (面向动态编程：知识由后天演化，先天仅编写控制器和存储结构)。\n11. 性能要求：可运行于单机终端（当前是ios设备）。\n> 手稿：<https://github.com/jiaxiaogang/HELIX_THEORY>  \n> 网站：<http://https://jiaxiaogang.github.io>\n[![](https://img.shields.io/badge/%20QQGroup-528053635%20-orange.svg)](tencent://message/?uin=283636001&Site=&Menu=yes)\n[![](https://img.shields.io/badge/%20QQ-在线交谈%20-orange.svg)](http://wpa.qq.com/msgrd?v=3&uin=283636001&site=qq&menu=yes)\n[![](https://img.shields.io/badge/%20QQ-客户端交谈%20-orange.svg)](tencent://message/?uin=283636001&Site=&Menu=yes)\n![](https://img.shields.io/badge/%20Wechat-17636342724%20-orange.svg)\n[![License](https://img.shields.io/badge/license-GPL-blue.svg)](LICENSE)",
        "type": "code",
        "location": "/README.md:1-37"
    },
    "7": {
        "file_id": 1,
        "content": "This code is a README for the \"he4o\" AI system, which uses spiral entropy reduction and supports machine learning (mainly migration) and reinforcement learning. It also includes knowledge representation at macro and micro levels, neural network support, dynamic thinking control, mathematical foundations, computation using boolean logic, memory structures, programming philosophy, and performance requirements for single-machine terminals. The code provides links to the GitHub repository, website, and contact information for further discussion.",
        "type": "comment"
    },
    "8": {
        "file_id": 1,
        "content": "### 1. -------------引言-------------\n> 第一梯队:1950年图灵提出\"可思考的机器\"和\"图灵测试\",他说:\"放眼不远的将来,我们就有很多工作要做\";\n> 第二梯队:1956达特矛斯会议后，明斯基和麦卡锡等等许多前辈穷其一生心血，虽然符号主义AI在面对不确定性环境下鲁棒性差，但却为AGI奠定了很多基础。\n> 第三梯队:随着大数据,云计算等成熟,AI迎来DL、GPT热,但DL、GPT也并非全功能型智能体。\n> 综上：近70年以来，人工智能研究跌宕起伏，但与最初设想的AI还相差甚远，he4o旨在实现螺旋熵减机式的通用人工智能系统。\n***\n### 2. -------------（一）螺旋论-------------\n> 　　螺旋论从2017年2月正式开始研究至2018年2月成熟，历时一年。\n| 螺旋论：含三大要素：定义、相对和循环，共同呈现螺旋形。 |\n| --- |\n| https://github.com/jiaxiaogang/HELIX_THEORY#%E7%86%B5%E5%87%8F%E6%9C%BA |\n<br>\n### 3. -------------（二）螺旋熵减机模型-------------\n> 螺旋熵减机理论模型在18年3月成熟，直至今天此模型仍在不断细化中。\n| ![](https://github.com/jiaxiaogang/HELIX_THEORY/blob/master/%E6%89%8B%E5%86%99%E7%AC%94%E8%AE%B0/assets/508_%E4%BF%A1%E6%81%AF%E7%86%B5%E5%87%8F%E6%9C%BA202107%E5%8A%A8%E5%9B%BE%E7%89%88.gif?raw=true) |\n| --- |\n| 1. 此图从内外双向、动静转化、主客角度，三种方式来解读。 |\n| 2. 每外一个模块,与内所有模块之和相对循环 (如神经网络与思维,智能体与现实世界) |\n| 注: 一切都是从无到有,相对与循环，he4o认为自己活着 `源于循环`; |\n<br>\n### 5. -------------（三）he4o系统实践-------------\n> **V1.0《初版》：**  \n> 　　`2017年2月`立项　－ `2018年10月21日`正式落地发布V1.0版本。  \n> **V2.0《小鸟生存演示》：**  ",
        "type": "code",
        "location": "/README.md:39-77"
    },
    "9": {
        "file_id": 1,
        "content": "Introduces the history of AI research, mentions the spiral theory and its development, presents the HELIX_THEORY model, and discusses the implementation of he4o system.",
        "type": "comment"
    },
    "10": {
        "file_id": 1,
        "content": "> 　　`2018年11月`　－　`至今`　开发完成，测试训练中...\n| 架构图 | ![](https://github.com/jiaxiaogang/HELIX_THEORY/raw/master/手写笔记/assets/695_HE架构图V4.png) |\n| --- | --- |\n| 架构设计 | 由螺旋论展开成螺旋熵减机模型,再由螺旋熵减机模型展开为系统架构 |\n| 代码占比 | 内核代码中神经网络占30％,思维控制器占50%,其它（输入、输出等）共占20%; |\n| 神经网络 | 神经网络的模型十字总结:`横向宏与微,纵向抽具象`; |\n| 思维向性 | 每一种操作方向表示一种思维操作，如：认知、决策、理性、感性。 |\n| 思维模块 | `1分2分4分8: 感知(入),识别(认),学习(知),任务(需),计划(求),求解(决),迁移(策),行为(出)` |\n| 思维架构 | 思维控制器整体呈现螺旋形运行 |\n<br>\n### 6. -------------时间线-------------\n> ##### 2023.12.28 `至今`\n> - 搬运训练：`搬运动机训练`、`学会搬运`、`运用搬运`、`Root竞争进度分加权`、`hCanset迁移优化: 基于r场景树和hAlg抽具象树实现迁移`、`H任务支持持续反馈`\n> ##### 2023.11.09 `耗时49天`\n> - 搬运训练：`搬运动机训练`、`交层Canset训练`、`规划搬运训练步骤`、`迁移时连带迁移SP值`、`构建Canset改为场景内防重`、`同质任务执行太多次问题: 同质Root合并`、`决策性能优化(15s至1s)`\n> ##### 2023.10.17 `耗时22天`\n> - 去皮训练：`整理Canset演化过程`、`废弃Canset识别类比`、`加重Canset预想与实际类比`、`全面支持cansetAlg的共同抽象即匹配`、`预想与实际类比中的实际fo: 采用pFo.realMaskFo生成`\n> ##### 2023.09.07 `耗时40天`\n> - 去皮训练：`H任务支持TCScene & TCCanset & TCTransfer`、`HCanset由R场景改为单独场景`、`优化去皮训练步骤`\n> ##### 2023.08.16 `耗时20天`\n> - 去皮训练：`学会去皮`、`训练步骤设计与实施`",
        "type": "code",
        "location": "/README.md:78-106"
    },
    "11": {
        "file_id": 1,
        "content": "This code is a part of the README file for the \"he4o\" repository. It outlines the development progress and timeline of a project, discussing its architecture design, code composition, neural network model, and thought control modules. The timeline includes various training phases and optimizations implemented to improve the system's performance and functionality.",
        "type": "comment"
    },
    "12": {
        "file_id": 1,
        "content": "> ##### 2023.07.30 `耗时17天`\n> - 去皮训练：`去皮动机`\n> ##### 2023.07.16 `耗时14天 其中测试7天`\n> - 多线程思维：`思维用TI和TO两个线程`、`回归测训`\n> ##### 2023.06.29 `耗时17天`\n> - 测父子任务：`迭代TCRefrection反思: 改到行为化前`、`反思识别二次过滤器`\n> ##### 2023.06.01 `耗时28天`\n> - 防撞和觅食训练,等安全再吃训练：`性能优化`、`防撞训练ok`、`觅食训练ok`、`防撞觅食联合训练ok`、`持续饥饿感`\n> ##### 2023.05.25 `耗时7天`\n> - 识别准确度提升：`识别二次过滤器`\n> ##### 2023.05.07 `耗时18天`\n> - 回测Solution数据流竞争演化情况：`训练测试稳定的scene演化过程`、`迭代solutionFoRank排名器`\n> ##### 2023.05.03 `耗时4天`\n> - 梳理TO数据流：`Solution竞争断层: 宽入窄出`、`solutionCanset过滤器`、`solutionScene过滤器`\n> ##### 2023.04.20 `耗时12天`\n> - Canset迁移性增强回测：`修复canset迁移后支持indexDic等BUG`\n> ##### 2023.04.02 `耗时18天`\n> - 提升Canset迁移性决策部分：`Canset迁移性增强的决策支持`、`TCScene场景树`、`TCCanset.override算法`、`TCRealact可行性`、`TCTransfer推举和继承算法`、`相应更新SPEFF`\n> ##### 2023.03.21 `耗时11天`\n> - 提升Canset迁移性认知部分：`外类比支持匹配度共同点`、`构建新Canset优先用场景alg`、`迭代Canst识别&全含判断`、`Canst外类比`、`Canst空概念`、`抽象Canset初始SPEFF`、`Canset识别支持AIFilter`、`回测Canset迁移性`\n> ##### 2023.03.09 `耗时12天`\n> - 训练：`觅食和防撞训练`、`特征主观恒常性`、`Canset惰性期`、`测得Canset迁移性差问题`\n> ##### 2023.02.26 `耗时13天`\n> -",
        "type": "code",
        "location": "/README.md:108-142"
    },
    "13": {
        "file_id": 1,
        "content": "This code appears to be a log or journal of the development process, noting progress and completion dates for various tasks. It seems to focus on training, recognition accuracy improvements, data flow optimization, and performance enhancements.",
        "type": "comment"
    },
    "14": {
        "file_id": 1,
        "content": " 优化：`测决策循环连续飞躲`、`反思子任务不求解`、`BUG_行为转任务死循环`、`BUG_静默任务被激活`、`调整过滤器提升识别准确度`、`觅食训练规划:mv进时序(未完成)`、`增加迁移性与识别准确度:废除客观特征`\n> ##### 2023.02.14 `耗时12天`\n> - 优化：`使取S越来越准`、`识别率低BUG`、`支持AIFilter过滤器`\n> ##### 2023.02.04 `耗时10天`\n> - 回测：`测试条件满足功能`、`回测项大整理`、`修复R任务的Canset再类比时机与条件判断BUG`\n> ##### 2023.01.03 `耗时12天 (含测试12天,中途春节休7天)`\n> - 优化：`迭代canset前段条件满足`、`使概念识别越来越准`、`修复前段条件满足不完全的问题`\n> ##### 2022.12.17 `耗时16天`\n> - AIRank：`概念识别和时序识别的综合竞争: 支持强度竞争`、`回测`\n> ##### 2022.11.30 `耗时17天`\n> - 二十测：`回归测试`\n> ##### 2022.10.15 `耗时45天`\n> - 优化：`抽具象多层多样性优化`、`持久化与复用概念相似度`、`迭代时序识别：持久化与复用indexDic`、`canset演化周期`、`废除TO反思识别`\n> ##### 2022.10.08 `耗时7天`\n> - 测试：`废弃isMem`、`继续测试反思`\n> ##### 2022.09.18 `耗时12天`\n> - 测试：`测试任务失效机制`\n> ##### 2022.09.01 `耗时17天`\n> - 调优：`任务失效机制`\n> ##### 2022.08.06 `耗时25天`\n> - 测试：`测试TCRefrection`、`性能优化`\n> ##### 2022.07.05 `耗时22天 中途旅游休8天`\n> - 十九测：`迭代TCRefrection反思`\n> ##### 2022.06.05 `耗时9天 中途疫情休20天`\n> - 梳理TC数据流：`决策配置调整: 快慢思考部分`、`学时统计 & 用时概率`、`测连续飞躲`、`Analyst综合排名`\n> ##### 2022.05.20 `耗时15天`\n> - 梳理TC数据流：`识别准确度优化：逐层宽入窄出`、`数据流：整体观`、`快思考慢思考`、`TCActYes每帧O反省`",
        "type": "code",
        "location": "/README.md:142-181"
    },
    "15": {
        "file_id": 1,
        "content": "This code appears to be a roadmap or log of changes and optimizations made to a project, likely related to AI or machine learning. The comments outline the dates, tasks completed, issues resolved, and features implemented over time. Each section indicates the time spent on that particular task and may have been used as a guide for future development or progress tracking.",
        "type": "comment"
    },
    "16": {
        "file_id": 1,
        "content": "> ##### 2022.05.11 `耗时9天`\n> - 性能优化：`优化pFo识别性能`、`迭代Demand支持多pFos`、`十八测回归测试`\n> ##### 2022.05.04 `耗时7天`\n> - 工具优化：`十七测`、`强化训练工具优化：支持模拟重启`、`思维可视化工具优化：支持手势缩放`\n> ##### 2022.04.28 `耗时6天`\n> - 梳理TC数据流：`整体兼顾`、`各线竞争`\n> ##### 2022.04.23 `耗时5天`\n> - 十六测：`性能优化`、`强化学习训练`\n> ##### 2022.03.28 `耗时8天 中途疫情休17天`\n> - 强化训练：`开发强化学习稳定性训练器: RLTrainer`\n> ##### 2022.03.13 `耗时15天`\n> - 思维可视化工具：`TOMVisionV2迭代: 思维可视化`\n> ##### 2022.02.16 `耗时25天 中途春节疫情休25天`\n> - 十五测：`春节结束，开工回归测试`\n> ##### 2022.01.15 `耗时5天`\n> - 十四测：`回测相近匹配`\n> ##### 2022.01.10 `耗时5天`\n> - 相近匹配：`相近匹配`\n> ##### 2021.12.26 `耗时15天`\n> - 回归十三测：`新螺旋架构测试`、`反省分裂迭代测试`\n> ##### 2021.12.22 `耗时4天`\n> - 反省迭代：`hSolution从SP取解决方案`、`分裂:感性反省 和 理性反省`、`废弃HN`\n> ##### 2021.11.18 `耗时34天`\n> - 思维控制器架构大迭代：`完善螺旋架构`、`废弃宏微决策`、`反思融入识别`、`工作记忆树迭代`、`迭代综合评价`、`末枝最优路径`\n> ##### 2021.11.04 `耗时14天`\n> - R决策模式迭代：`FRS评价器迭代`、`废弃dsFo`、`废弃PM`、`废弃GL`\n> ##### 2021.10.19 `耗时15天`\n> - PM稳定性迭代：`VRS评价器迭代`、`VRSTarget修正目标`\n> ##### 2021.09.29 `耗时20天`\n> - v2.0十二测与训练：`IRT的SP参与VRS评分`、`SP定义由顺逆改为好坏`、`紧急状态不反思`、`主客观互卡问题`、`tir_OPushM迭代：IRT的理性失效`\n> ##### 2021.09.14 `耗时15天`",
        "type": "code",
        "location": "/README.md:183-228"
    },
    "17": {
        "file_id": 1,
        "content": "This code appears to be a log of progress made on a project over time. Each entry includes the date, duration of work, and summary of improvements or tests conducted. These updates focus on performance optimization, tool development, data flow organization, backtesting, reinforcement learning training, visualization tools, and iterative testing.",
        "type": "comment"
    },
    "18": {
        "file_id": 1,
        "content": "> - 网络节点类型排查：`指针集成type`、`自检测试`、`网络at&ds&type错误大排查`\n> ##### 2021.07.08 `耗时66天`\n> - v2.0十一测与训练：`子任务回测`、`R决策模式`、`防撞训练`\n> ##### 2021.06.25 `耗时13天`\n> - 子任务细节改动：`子任务的已发生截点`、`同级任务协作`\n> ##### 2021.06.05 `耗时17天`\n> - 子任务细节改动：`子任务协同`、`子任务不应期`\n> ##### 2021.05.24 `耗时1个月`\n> - v2.0十测与训练：`子任务测试`、`防撞训练`\n> ##### 2021.04.10 `耗时44天`\n> - v2.0九测与训练：`觅食训练&变向觅食训练`\n> ##### 2021.04.07 `耗时15天`\n> - HNGL嵌套迭代：`内中外类比迭代v3,v4`、`迭代getInnerV3()`、`RFo抽具象关联`\n> ##### 2021.03.12 `耗时20天`\n> - v2.0八测与训练：`R-模式测试`、`觅食和防撞融合训练`\n> ##### 2021.02.23 `耗时37天`\n> - 决策理性迭代：`规划决策`、`子任务迭代：理性反思`、`来的及评价`、`嵌套关联`\n> ##### 2021.01.30 `耗时4天`\n> - R-决策模式V3迭代、反向反馈外类比\n> ##### 2021.01.23 `耗时35天`\n> - v2.0七测与训练 `防撞训练`、`R-模式测试`\n> ##### 2021.01.15 `耗时8天`\n> - In反省类比迭代、R-决策模式V2迭代 `迭代触发机制: 生物钟触发器`\n> ##### 2020.12.24 `耗时20天`\n> - v2.0六测与训练 `多向飞行正常`\n> ##### 2020.12.07 `耗时1个月`\n> - AIScore评价器整理完善：`时序理性评价：FRS`、`稀疏码理性评价：VRS`\n> ##### 2020.11.07 `耗时1个月`\n> - v2.0五测与训练\n> ##### 2020.10.21 `耗时15天`\n> - TIR_Alg支持多识别\n> ##### 2020.09.01 `耗时1个月`\n> - v2.0四测与训练\n> ##### 2020.08.12 `耗时27天`\n> - Out反省类比迭代 (DiffAnalogy)、生物钟(AITime)、PM理性评价迭代v2",
        "type": "code",
        "location": "/README.md:229-280"
    },
    "19": {
        "file_id": 1,
        "content": "The code outlines the development progress of a project, detailing the various testing and training phases (v2.0 one to seven) with different tasks and features such as sub-tasks, decision making, and anti-collision training. The changes took place over months or weeks, with specific iterations mentioned, indicating continuous improvement and refinement in the project.",
        "type": "comment"
    },
    "20": {
        "file_id": 1,
        "content": "> ##### 2020.06.28 `5天`\n> - 决策迭代：PM理性评价\n> ##### 2020.06.06 `耗时2个月`\n> - v2.0三测与训练\n> ##### 2020.05.15 `耗时20天`\n> - 决策迭代：（根据`输出期短时记忆`使决策递归与外循环更好协作）\n> ##### 2020.04.21 `耗时1个月`\n> - 决策迭代：（根据`输入期短时记忆`使决策支持四模式）\n> ##### 2020.03.31 `耗时1个月`\n> - 迭代外类比: 新增反向反馈类比 (In反省类比) (构建SP正负时序、应用SP于决策的MC中、迭代反思)\n> ##### 2020.02.20 `耗时18天`\n> - 稀疏码模糊匹配\n> ##### 2019.12.27 `持续3个月`\n> - v2.0二测与规划性训练－－回归小鸟训练\n> ##### 2019.11.22 `耗时1个月`\n> - 理性思维——反思评价\n> ##### 2019.09.30 `耗时2个月`\n> - 理性思维——TOR迭代 (行为化架构迭代、支持瞬时网络)\n> ##### 2019.08.25 `耗时1个月`\n> - 理性思维——TIR迭代 (时序识别、时序预测、价值预判)\n> ##### 2019.06.20 `耗时2个月`\n> - v2.0版本基础测试改BUG 与 训练\n> ##### 2019.06.05 `写完耗时15天,调至可用性达到标准至45天`\n> - v2.0一测－－小鸟训练——神经网络可视化v2.0\n> ##### 2019.05.01 `耗时1个月`\n> - 优化性能——`XGWedis异步持久化` 和 `短时内存网络`\n> ##### 2019.03.01 `耗时2个月`\n> - 内类比 （与外类比相对）\n> ##### 2019.01.21 `耗时40天`\n> - 迭代决策循环 （行为化等）\n> ##### 2018.11.28 `耗时2个月`\n> - 迭代神经网络 (区分动态时序与静态概念)\n> ##### 2018.11.05 `规划耗时20天`\n> - 势 (小鸟生存演示) (v2.0开始开发)\n> ##### 2018.10.21 `耗时0天`\n> - v1.0.0 (he4o内核发布)\n> ##### 2018.10.20 `耗时0天`\n> - 螺旋熵减机 (产生智能的环境)\n> ##### 2018.08.29 `耗时2个月`",
        "type": "code",
        "location": "/README.md:282-339"
    },
    "21": {
        "file_id": 1,
        "content": "This code contains a timeline of development milestones for a project, with each entry indicating the time taken to complete that specific phase or feature. It appears that the work focuses on improving decision-making loops, reasoning, and training of neural networks for various tasks. The code also mentions the use of sparse coding and fuzzy matching techniques. The project aims to develop version 2.0 (he4o v2.0) of its core functionality.",
        "type": "comment"
    },
    "22": {
        "file_id": 1,
        "content": "> - MOL\n> ##### 2018.08.01 `耗时1个月`\n> - MIL & MOL (重构中层动循环)\n> ##### 2018.07.01 `耗时1个月`\n> - HELIX (定义、相对和循环呈现的螺旋型)\n> ##### 2018.06.01 `耗时1个月`\n> - 三层循环大改版 (mv循环,思维网络循环,智能体与现实世界循环)\n> ##### 2018.05.01 `耗时1个月`\n> - 相对 (he4o实现定义,横向相对,纵向相对)\n> ##### 2018.02.01 `耗时3个月`\n> - 宏微 (前身是拆分与整合,宏微一体)\n> ##### 2017.12.09 `耗时2个月`\n> - 定义 (从0到1)\n> ##### 2017.11.10 `耗时1个月`\n> - 规则 (最简)\n> ##### 2017.09.20 `耗时50天`\n> - DOP_面向数据编程\n> - GNOP_动态构建网络\n> ##### 2017.08.23 `耗时1个月`\n> - 神经网络 (算法,抽具象网络)\n> ##### 2017.08.02 `耗时20天`\n> - MindValue（价值）\n> ##### 2017.07.10 `耗时20天`\n> - 树BrainTree(参考N3P7,N3P8)\n> ##### 2017.06.01 `耗时40天`\n> - 三维架构(参考笔记/AI/框架)\n> ##### 2017.05.22 `耗时10天`\n> - OOP编程思想->数据语言 (OOP2DataLanguage)\n> ##### 2017.05.21 `耗时1天`\n> - 重绘了新版架构图; (AIFoundation)\n> ##### 2017.04.21 `耗时1个月`\n> - 金字塔架构\n> ##### 2017.03.21 `耗时1个月`\n> - 分层架构\n> ##### 2017.02.21 `耗时1个月`\n> - 流程架构",
        "type": "code",
        "location": "/README.md:340-392"
    },
    "23": {
        "file_id": 1,
        "content": "The code represents a timeline of the development process for an AI architecture. Each line highlights a significant feature or change implemented over different time periods, with each section marked by a date and the time it took to complete. The developer has made several iterations to improve the architecture's design, including changes to loops, neural networks, and data processing methods.",
        "type": "comment"
    },
    "24": {
        "file_id": 2,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AICustomAlgs.h",
        "type": "filepath"
    },
    "25": {
        "file_id": 2,
        "content": "This code defines a class AICustomAlgs in the file AICustomAlgs.h, which is part of the SMG_NothingIsAll project. It imports Foundation framework and provides a single method commitCustom:value: that takes in CustomInputType and an integer value as parameters.",
        "type": "summary"
    },
    "26": {
        "file_id": 2,
        "content": "//\n//  AICustomAlgs.h\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2018/2/6.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import <Foundation/Foundation.h>\n@interface AICustomAlgs : NSObject\n+(void) commitCustom:(CustomInputType)type value:(NSInteger)value;\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AICustomAlgs.h:1-15"
    },
    "27": {
        "file_id": 2,
        "content": "This code defines a class AICustomAlgs in the file AICustomAlgs.h, which is part of the SMG_NothingIsAll project. It imports Foundation framework and provides a single method commitCustom:value: that takes in CustomInputType and an integer value as parameters.",
        "type": "comment"
    },
    "28": {
        "file_id": 3,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AICustomAlgs.m",
        "type": "filepath"
    },
    "29": {
        "file_id": 3,
        "content": "This file contains an implementation of the AICustomAlgs class, which commits custom input data asynchronously. It handles CustomInputType_Charge and initializes CustomAlgsChargeModel with the provided value before committing it to theTC.",
        "type": "summary"
    },
    "30": {
        "file_id": 3,
        "content": "//\n//  AICustomAlgs.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2018/2/6.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import \"AICustomAlgs.h\"\n#import \"CustomAlgsChargeModel.h\"\n@implementation AICustomAlgs\n+(void) commitCustom:(CustomInputType)type value:(NSInteger)value{\n    if (type == CustomInputType_Charge) {\n        CustomAlgsChargeModel *model = [[CustomAlgsChargeModel alloc] init];\n        model.value = value;\n        [theTC commitInputAsync:model];\n    }\n}\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AICustomAlgs.m:1-22"
    },
    "31": {
        "file_id": 3,
        "content": "This file contains an implementation of the AICustomAlgs class, which commits custom input data asynchronously. It handles CustomInputType_Charge and initializes CustomAlgsChargeModel with the provided value before committing it to theTC.",
        "type": "comment"
    },
    "32": {
        "file_id": 4,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AIImvAlgs.h",
        "type": "filepath"
    },
    "33": {
        "file_id": 4,
        "content": "This code file, AIImvAlgs.h, is a part of the SMG_NothingIsAll project and includes functions for converting input mindValue between different value domains. It takes a type (MVType) and two CGFloat values as parameters to map the input value to a range of 0-10.",
        "type": "summary"
    },
    "34": {
        "file_id": 4,
        "content": "//\n//  AIImvAlgs.h\n//  SMG_NothingIsAll\n//\n//  Created by 贾  on 2017/12/21.\n//  Copyright © 2017年 XiaoGang. All rights reserved.\n//\n#import <Foundation/Foundation.h>\n@interface AIImvAlgs : NSObject\n/**\n *  MARK:--------------------输入mindValue--------------------\n *  所有值域,转换为0-10;(例如:hunger时0为不饿,10为非常饿)\n */\n+(void) commitIMV:(MVType)type from:(CGFloat)from to:(CGFloat)to;\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AIImvAlgs.h:1-19"
    },
    "35": {
        "file_id": 4,
        "content": "This code file, AIImvAlgs.h, is a part of the SMG_NothingIsAll project and includes functions for converting input mindValue between different value domains. It takes a type (MVType) and two CGFloat values as parameters to map the input value to a range of 0-10.",
        "type": "comment"
    },
    "36": {
        "file_id": 5,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AIImvAlgs.m",
        "type": "filepath"
    },
    "37": {
        "file_id": 5,
        "content": "The code imports a model, calculates urgent values and deltas for input types (hunger, hurt, or anxious), and defines two functions for bad and good urgency calculations. Currently, only the bad urgency function is being used as there are no GoodImv subdefinitions.",
        "type": "summary"
    },
    "38": {
        "file_id": 5,
        "content": "//\n//  AIImvAlgs.m\n//  SMG_NothingIsAll\n//\n//  Created by 贾  on 2017/12/21.\n//  Copyright © 2017年 XiaoGang. All rights reserved.\n//\n#import \"AIImvAlgs.h\"\n#import \"ImvAlgsHungerModel.h\"\n#import \"ImvAlgsHurtModel.h\"\n@implementation AIImvAlgs\n/**\n *  MARK:--------------------输入mindValue--------------------\n *  @param from | to : 值域,转换为0-10;(例如:hunger时表示饥饿度,10为无电非常饿,0为满电不饿);\n */\n+(void) commitIMV:(MVType)type from:(CGFloat)from to:(CGFloat)to{\n    //1. 数据准备;\n    ImvAlgsModelBase *imvModel = nil;\n    if (type == MVType_Hunger) {\n        //2. 生成imvModel_饿感;\n        imvModel = [[ImvAlgsHungerModel alloc] init];\n    }else if(type == MVType_Hurt){\n        //3. 生成imvModel_痛感;\n        imvModel = [[ImvAlgsHurtModel alloc] init];\n    }else if(type == MVType_Anxious){}\n    //4. 对imvModel计算赋值;\n    if (imvModel) {\n        //5. 计算from to\n        imvModel.urgentTo = [self getBadImvUrgentValue:to];//痛9 饿16\n        CGFloat urgentFrom = [self getBadImvUrgentValue:from];//痛4 饿9\n        //6. 计算delta (ISOK(imvModel, ImvBadModel.class))\n        imvModel.delta = imvModel.urgentTo - urgentFrom;    //更痛5 更饿7;",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AIImvAlgs.m:1-37"
    },
    "39": {
        "file_id": 5,
        "content": "This code imports and initializes a model based on the input type (hunger, hurt, or anxious) for calculating imv values. It then calculates the urgent from and to values, as well as the delta between them, which represent the change in intensity of the sensation over time.",
        "type": "comment"
    },
    "40": {
        "file_id": 5,
        "content": "        //7. 提交;\n        [theTC commitInputAsync:imvModel];\n    }\n}\n/**\n *  MARK:--------------------BadImv迫切度--------------------\n *  @desc 指迫切度与value在\"同向\"上,比如更饿,越饿迫切度越高;\n *  @status 目前,饥饿感和痛感都是采用了此种;\n */\n+(CGFloat) getBadImvUrgentValue:(CGFloat)to{\n    to = MAX(0, MIN(10,to));\n    return to * to;\n}\n/**\n *  MARK:--------------------GoodImv迫切度--------------------\n *  @desc 指迫切度与valud在\"反向\"上,比如更饱,越饱迫切度越低;\n *  @status 目前,无GoodImv子定义,所以此处未被调用;\n */\n+(CGFloat) getGoodImvUrgentValue:(CGFloat)to{\n    to = MAX(0, MIN(10,to));\n    return 100 - to * to;\n}\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AIImvAlgs.m:39-64"
    },
    "41": {
        "file_id": 5,
        "content": "This code defines two functions, getBadImvUrgentValue and getGoodImvUrgentValue, which calculate the urgency value based on a given input. The input is constrained between 0 and 10, and the function returns the square of the input for bad urgency and the inverse of the square of the input for good urgency. Currently, there are no GoodImv subdefinitions, so the getGoodImvUrgentValue function is not being called.",
        "type": "comment"
    },
    "42": {
        "file_id": 6,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AIStringAlgs.h",
        "type": "filepath"
    },
    "43": {
        "file_id": 6,
        "content": "This is the header file for AIStringAlgs class in the AIFoundation module. The class contains an interface for string algorithms and a model for storing the result of the algorithm applied to strings.",
        "type": "summary"
    },
    "44": {
        "file_id": 6,
        "content": "//\n//  StringAlgs.h\n//  SMG_NothingIsAll\n//\n//  Created by 贾  on 2017/9/17.\n//  Copyright © 2017年 XiaoGang. All rights reserved.\n//\n#import <Foundation/Foundation.h>\n/**\n *  MARK:--------------------String算法--------------------\n */\n@interface AIStringAlgs : NSObject\n+(void) commitInput:(NSString*)input;\n@end\n//MARK:===============================================================\n//MARK:                     < String算法结果模型 >\n//MARK:===============================================================\n@interface AIStringAlgsModel : NSObject\n@property (strong,nonatomic) NSString *str;\n@property (assign, nonatomic) NSUInteger length;\n@property (strong,nonatomic) NSArray *spell;\n@end\n//MARK:===============================================================\n//MARK:                     < char算法结果模型 >\n//MARK:===============================================================\n@interface AICharAlgsModel : NSObject\n@property (assign,nonatomic) char c;\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AIStringAlgs.h:1-42"
    },
    "45": {
        "file_id": 6,
        "content": "This is the header file for AIStringAlgs class in the AIFoundation module. The class contains an interface for string algorithms and a model for storing the result of the algorithm applied to strings.",
        "type": "comment"
    },
    "46": {
        "file_id": 7,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AIStringAlgs.m",
        "type": "filepath"
    },
    "47": {
        "file_id": 7,
        "content": "The code defines a class, AIStringAlgs, with two methods: commitInput and length. It processes input strings character by character asynchronously and returns string lengths for valid sentences. The code utilizes a for loop to iterate through each character of the string.",
        "type": "summary"
    },
    "48": {
        "file_id": 7,
        "content": "//\n//  StringAlgs.m\n//  SMG_NothingIsAll\n//\n//  Created by 贾  on 2017/9/17.\n//  Copyright © 2017年 XiaoGang. All rights reserved.\n//\n#import \"AIStringAlgs.h\"\n@implementation AIStringAlgs\n+(void) commitInput:(NSString*)input{\n    if (STRISOK(input)) {\n        //1. 算法运算\n        //2. 结果给Thinking\n        //AIStringAlgsModel *model = [[AIStringAlgsModel alloc] init];\n        //model.str = input;\n        //model.length = [self length:input];\n        //model.spell = [self spell:input];\n        //[theTC commitInput:model];\n        const char *chars = [input UTF8String];\n        for (NSInteger i = 0; i < input.length; i ++) {\n            AICharAlgsModel *model = [AICharAlgsModel new];\n            model.c = chars[i];\n            [theTC commitInputAsync:model];\n        }\n    }\n}\n+(NSUInteger) length:(NSString*)str {\n    if (STRISOK(str)) {\n        return str.length;\n    }\n    return 0;\n}\n+(NSArray*) spell:(NSString*)str{\n    NSMutableArray *mArr = [[NSMutableArray alloc] init];\n    str = STRTOOK(str);\n    const char *chars = [str UTF8String];",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AIStringAlgs.m:1-43"
    },
    "49": {
        "file_id": 7,
        "content": "This code defines a class, AIStringAlgs, which has two methods: commitInput and length. The commitInput method processes an input string character by character asynchronously, while the length method returns the length of a string if it's a valid sentence (OK).",
        "type": "comment"
    },
    "50": {
        "file_id": 7,
        "content": "    for (NSInteger i = 0; i < str.length; i ++) {\n        //unichar c = [str characterAtIndex:i];\n        char c = chars[i];\n        [mArr addObject:@(c)];\n    }\n    return mArr;\n}\n@end\n//MARK:===============================================================\n//MARK:                     < String算法结果模型 >\n//MARK:===============================================================\n@implementation AIStringAlgsModel\n@end\n//MARK:===============================================================\n//MARK:                     < char算法结果模型 >\n//MARK:===============================================================\n@implementation AICharAlgsModel : NSObject\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AIStringAlgs.m:44-72"
    },
    "51": {
        "file_id": 7,
        "content": "This code is a for loop that iterates through each character of a string, converting them to characters and storing them in an array called mArr. It then returns the array of characters as the final result. The code also includes several markdown sections indicating different algorithm models for strings and characters.",
        "type": "comment"
    },
    "52": {
        "file_id": 8,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/CustomAlgsModel/CustomAlgsChargeModel.h",
        "type": "filepath"
    },
    "53": {
        "file_id": 8,
        "content": "CustomAlgsChargeModel.h: This file defines a custom algorithm charging model class with a value property, likely for machine learning or data analysis purposes.",
        "type": "summary"
    },
    "54": {
        "file_id": 8,
        "content": "//\n//  CustomAlgsChargeModel.h\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2018/2/6.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import <Foundation/Foundation.h>\n@interface CustomAlgsChargeModel : NSObject\n@property (assign,nonatomic) float value;\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/CustomAlgsModel/CustomAlgsChargeModel.h:1-15"
    },
    "55": {
        "file_id": 8,
        "content": "CustomAlgsChargeModel.h: This file defines a custom algorithm charging model class with a value property, likely for machine learning or data analysis purposes.",
        "type": "comment"
    },
    "56": {
        "file_id": 9,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/CustomAlgsModel/CustomAlgsChargeModel.m",
        "type": "filepath"
    },
    "57": {
        "file_id": 9,
        "content": "This code defines a class `CustomAlgsChargeModel` in the file `CustomAlgsChargeModel.m`, which is part of the `SMG_NothingIsAll` project. The class inherits from `CustomAlgsChargeModel.h` and provides an implementation for its methods.",
        "type": "summary"
    },
    "58": {
        "file_id": 9,
        "content": "//\n//  CustomAlgsChargeModel.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2018/2/6.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import \"CustomAlgsChargeModel.h\"\n@implementation CustomAlgsChargeModel\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/CustomAlgsModel/CustomAlgsChargeModel.m:1-13"
    },
    "59": {
        "file_id": 9,
        "content": "This code defines a class `CustomAlgsChargeModel` in the file `CustomAlgsChargeModel.m`, which is part of the `SMG_NothingIsAll` project. The class inherits from `CustomAlgsChargeModel.h` and provides an implementation for its methods.",
        "type": "comment"
    },
    "60": {
        "file_id": 10,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/ImvAlgsModel/ImvAlgsModelBase.h",
        "type": "filepath"
    },
    "61": {
        "file_id": 10,
        "content": "This code defines the class \"ImvAlgsModelBase\" in a header file, which is used for modeling algorithms related to the IMV model. The class has two properties: delta and urgentTo, both of which are integers representing values transformed through algos. Delta represents the change after algos conversion (e.g., hunger state to urgency), while urgentTo holds values for all kinds of transformations with urgency.",
        "type": "summary"
    },
    "62": {
        "file_id": 10,
        "content": "//\n//  ImvAlgsModelBase.h\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2018/2/6.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import <Foundation/Foundation.h>\n/**\n *  MARK:--------------------Imv模型基类--------------------\n */\n@interface ImvAlgsModelBase : NSObject\n@property (assign, nonatomic)  NSInteger delta;     //经algs转化后的值;例如(饥饿状态向急切度的变化)\n@property (assign, nonatomic)  NSInteger urgentTo;  //经algs转化后的值,所有的变化,都有迫切度;\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/ImvAlgsModel/ImvAlgsModelBase.h:1-19"
    },
    "63": {
        "file_id": 10,
        "content": "This code defines the class \"ImvAlgsModelBase\" in a header file, which is used for modeling algorithms related to the IMV model. The class has two properties: delta and urgentTo, both of which are integers representing values transformed through algos. Delta represents the change after algos conversion (e.g., hunger state to urgency), while urgentTo holds values for all kinds of transformations with urgency.",
        "type": "comment"
    },
    "64": {
        "file_id": 11,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/ImvAlgsModel/ImvAlgsModelBase.m",
        "type": "filepath"
    },
    "65": {
        "file_id": 11,
        "content": "This code file, ImvAlgsModelBase.m, is part of the SMG_NothingIsAll project and contains the implementation of the ImvAlgsModelBase class. It was created by jia on February 6th, 2018 and is protected by a copyright owned by XiaoGang.",
        "type": "summary"
    },
    "66": {
        "file_id": 11,
        "content": "//\n//  ImvAlgsModelBase.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2018/2/6.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import \"ImvAlgsModelBase.h\"\n@implementation ImvAlgsModelBase\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/ImvAlgsModel/ImvAlgsModelBase.m:1-13"
    },
    "67": {
        "file_id": 11,
        "content": "This code file, ImvAlgsModelBase.m, is part of the SMG_NothingIsAll project and contains the implementation of the ImvAlgsModelBase class. It was created by jia on February 6th, 2018 and is protected by a copyright owned by XiaoGang.",
        "type": "comment"
    },
    "68": {
        "file_id": 12,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/ImvAlgsModel/ImvBadModel.h",
        "type": "filepath"
    },
    "69": {
        "file_id": 12,
        "content": "ImvBadModel.h is a header file for a class in the SMG_NothingIsAll codebase, which inherits from ImvAlgsModelBase and represents a bad imv parent model with sensations like hunger or pain.",
        "type": "summary"
    },
    "70": {
        "file_id": 12,
        "content": "//\n//  ImvBadModel.h\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2021/1/16.\n//  Copyright © 2021年 XiaoGang. All rights reserved.\n//\n#import \"ImvAlgsModelBase.h\"\n/**\n *  MARK:--------------------基于不好的imv父模型--------------------\n *  @desc 例如: 饥饿感,疼痛感等;\n */\n@interface ImvBadModel : ImvAlgsModelBase\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/ImvAlgsModel/ImvBadModel.h:1-17"
    },
    "71": {
        "file_id": 12,
        "content": "ImvBadModel.h is a header file for a class in the SMG_NothingIsAll codebase, which inherits from ImvAlgsModelBase and represents a bad imv parent model with sensations like hunger or pain.",
        "type": "comment"
    },
    "72": {
        "file_id": 13,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/ImvAlgsModel/ImvBadModel.m",
        "type": "filepath"
    },
    "73": {
        "file_id": 13,
        "content": "This code file is for the \"ImvBadModel\" class in the SMG_NothingIsAll project. It imports its header file and provides an implementation.",
        "type": "summary"
    },
    "74": {
        "file_id": 13,
        "content": "//\n//  ImvBadModel.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2021/1/16.\n//  Copyright © 2021年 XiaoGang. All rights reserved.\n//\n#import \"ImvBadModel.h\"\n@implementation ImvBadModel\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/ImvAlgsModel/ImvBadModel.m:1-13"
    },
    "75": {
        "file_id": 13,
        "content": "This code file is for the \"ImvBadModel\" class in the SMG_NothingIsAll project. It imports its header file and provides an implementation.",
        "type": "comment"
    },
    "76": {
        "file_id": 14,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/ImvAlgsModel/ImvGoodModel.h",
        "type": "filepath"
    },
    "77": {
        "file_id": 14,
        "content": "The code declares a class named \"ImvGoodModel\" that inherits from \"ImvAlgsModelBase\". It represents a good IMV (In-Memory Virtualization) parent model, providing features such as fullness and refreshing sensations.",
        "type": "summary"
    },
    "78": {
        "file_id": 14,
        "content": "//\n//  ImvGoodModel.h\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2021/1/16.\n//  Copyright © 2021年 XiaoGang. All rights reserved.\n//\n#import \"ImvAlgsModelBase.h\"\n/**\n *  MARK:--------------------基于好的imv父模型--------------------\n *  @desc 例如: 饱感,爽感等;\n */\n@interface ImvGoodModel : ImvAlgsModelBase\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/ImvAlgsModel/ImvGoodModel.h:1-17"
    },
    "79": {
        "file_id": 14,
        "content": "The code declares a class named \"ImvGoodModel\" that inherits from \"ImvAlgsModelBase\". It represents a good IMV (In-Memory Virtualization) parent model, providing features such as fullness and refreshing sensations.",
        "type": "comment"
    },
    "80": {
        "file_id": 15,
        "content": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/ImvAlgsModel/ImvGoodModel.m",
        "type": "filepath"
    },
    "81": {
        "file_id": 15,
        "content": "This file contains the implementation of the \"ImvGoodModel\" class in the \"SMG_NothingIsAll\" project, created by jia on January 16th, 2021. The copyright for this code is held by XiaoGang for the year 2021.",
        "type": "summary"
    },
    "82": {
        "file_id": 15,
        "content": "//\n//  ImvGoodModel.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2021/1/16.\n//  Copyright © 2021年 XiaoGang. All rights reserved.\n//\n#import \"ImvGoodModel.h\"\n@implementation ImvGoodModel\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIAlg/AlgsModel/ImvAlgsModel/ImvGoodModel.m:1-13"
    },
    "83": {
        "file_id": 15,
        "content": "This file contains the implementation of the \"ImvGoodModel\" class in the \"SMG_NothingIsAll\" project, created by jia on January 16th, 2021. The copyright for this code is held by XiaoGang for the year 2021.",
        "type": "comment"
    },
    "84": {
        "file_id": 16,
        "content": "/SMG_NothingIsAll/AIFoundation/AIClass/AINoRepeatRun.h",
        "type": "filepath"
    },
    "85": {
        "file_id": 16,
        "content": "This code is the header file for a class called AINoRepeatRun, which prevents multiple executions of a certain action by marking it as completed once executed. The class provides two methods: sign and run. Sign registers a key for preventing duplicate execution, while run takes a key and a block to execute when the key is not already registered.",
        "type": "summary"
    },
    "86": {
        "file_id": 16,
        "content": "//\n//  AINoRepeatRun.h\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2021/5/9.\n//  Copyright © 2021年 XiaoGang. All rights reserved.\n//\n#import <Foundation/Foundation.h>\n/**\n *  MARK:--------------------防重触发器--------------------\n *  @desc 无论登记多少次,仅执行一次;\n *  @property key : 防重标识码;\n */\n@interface AINoRepeatRun : NSObject\n/**\n *  MARK:--------------------报名--------------------\n */\n+(void) sign:(id)key;\n/**\n *  MARK:--------------------执行--------------------\n */\n+(void) run:(id)key block:(void(^)())block;\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIClass/AINoRepeatRun.h:1-28"
    },
    "87": {
        "file_id": 16,
        "content": "This code is the header file for a class called AINoRepeatRun, which prevents multiple executions of a certain action by marking it as completed once executed. The class provides two methods: sign and run. Sign registers a key for preventing duplicate execution, while run takes a key and a block to execute when the key is not already registered.",
        "type": "comment"
    },
    "88": {
        "file_id": 17,
        "content": "/SMG_NothingIsAll/AIFoundation/AIClass/AINoRepeatRun.m",
        "type": "filepath"
    },
    "89": {
        "file_id": 17,
        "content": "This code defines a class `AINoRepeatRun` that provides shared data and two public methods: `sign:` and `run:block:`. The `sign:` method registers a key in the shared data dictionary, preventing it from being registered again. The `run:block:` method executes a block of code only once if the key has already been registered in the shared data dictionary.",
        "type": "summary"
    },
    "90": {
        "file_id": 17,
        "content": "//\n//  AINoRepeatRun.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2021/5/9.\n//  Copyright © 2021年 XiaoGang. All rights reserved.\n//\n#import \"AINoRepeatRun.h\"\n#define theData [AINoRepeatRun sharedData]\n@implementation AINoRepeatRun\nstatic NSMutableDictionary *_data;\n+(NSMutableDictionary*) sharedData{\n    if (_data == nil) _data = [[NSMutableDictionary alloc] init];\n    return _data;\n}\n//MARK:===============================================================\n//MARK:                     < publicMethod >\n//MARK:===============================================================\n/**\n *  MARK:--------------------报名--------------------\n */\n+(void) sign:(id)key{\n    NSLog(@\"防重登记:%@\",key);\n    [theData setObject:@\"\" forKey:key];\n}\n/**\n *  MARK:--------------------执行--------------------\n */\n+(void) run:(id)key block:(void(^)())block {\n    //仅执行一次,就把登记key移除掉;\n    if ([theData objectForKey:key]) {\n        [theData removeObjectForKey:key];\n        NSLog(@\"防重执行:%@\",key);\n        if (block) block();\n    }\n}\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIClass/AINoRepeatRun.m:1-44"
    },
    "91": {
        "file_id": 17,
        "content": "This code defines a class `AINoRepeatRun` that provides shared data and two public methods: `sign:` and `run:block:`. The `sign:` method registers a key in the shared data dictionary, preventing it from being registered again. The `run:block:` method executes a block of code only once if the key has already been registered in the shared data dictionary.",
        "type": "comment"
    },
    "92": {
        "file_id": 18,
        "content": "/SMG_NothingIsAll/AIFoundation/AIClass/AITime/AITime.h",
        "type": "filepath"
    },
    "93": {
        "file_id": 18,
        "content": "This header file declares the AITime class, which represents AI runtime time and conscious time. It also includes methods for setting up a time trigger with optional canTrigger condition and trigger action. The time trigger is currently used to activate reflection-type comparisons.",
        "type": "summary"
    },
    "94": {
        "file_id": 18,
        "content": "//\n//  AITime.h\n//  SMG_NothingIsAll\n//\n//  Created by 贾  on 2017/9/17.\n//  Copyright © 2017年 XiaoGang. All rights reserved.\n//\n#import <Foundation/Foundation.h>\n/**\n *  MARK:--------------------生物钟触发器--------------------\n *  @version\n *      2017.09.17: AI运行时间,和主观意识时间;\n *      2020.08.14: 支持预想fo和实际fo间的保留,用于反省类比;\n *      2020.08.23: 生物钟触发器-暂仅用于触发反省类比;\n */\n@interface AITime : NSObject\n//@property (assign, nonatomic) NSTimeInterval time;          //AI运行的时间\n//@property (assign,nonatomic) NSTimeInterval *awarenessTime; //意识时间\n/**\n *  MARK:--------------------生物钟触发器--------------------\n */\n+(void) setTimeTrigger:(NSTimeInterval)deltaTime trigger:(void(^)())trigger;\n+(void) setTimeTrigger:(NSTimeInterval)deltaTime canTrigger:(BOOL(^)())canTrigger trigger:(void(^)())trigger;\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIClass/AITime/AITime.h:1-29"
    },
    "95": {
        "file_id": 18,
        "content": "This header file declares the AITime class, which represents AI runtime time and conscious time. It also includes methods for setting up a time trigger with optional canTrigger condition and trigger action. The time trigger is currently used to activate reflection-type comparisons.",
        "type": "comment"
    },
    "96": {
        "file_id": 19,
        "content": "/SMG_NothingIsAll/AIFoundation/AIClass/AITime/AITime.m",
        "type": "filepath"
    },
    "97": {
        "file_id": 19,
        "content": "This code sets up a timer in the SMG_NothingIsAll project, triggering events after specified intervals and handling various caller situations. The updated version includes bug fixes, supports non-trigger conditions, and uses a precise timer method with GCD execution.",
        "type": "summary"
    },
    "98": {
        "file_id": 19,
        "content": "//\n//  AITime.m\n//  SMG_NothingIsAll\n//\n//  Created by 贾  on 2017/9/17.\n//  Copyright © 2017年 XiaoGang. All rights reserved.\n//\n#import \"AITime.h\"\n//@interface AITime ()\n//@property (strong,nonatomic) NSTimer *timer;            //计时器\n//@end\n@implementation AITime\n//-(id) init{\n//    self = [super init];\n//    if (self) {\n//        [self initData];\n//    }\n//    return self;\n//}\n//\n//-(void) initData{\n//    self.timer = [NSTimer scheduledTimerWithTimeInterval:10 target:self selector:@selector(notificationTimer) userInfo:nil repeats:YES];\n//}\n//\n////MARK:===============================================================\n////MARK:                     < privateMethod >\n////MARK:===============================================================\n//- (void)notificationTimer{\n//    NSLog(@\"AITime触发器触发\");\n//}\n/**\n *  MARK:--------------------生物钟触发器--------------------\n *  @callers\n *      1. demand.ActYes处 (等待外循环mv抵消);\n *      2. 行为化Hav().HNGL.ActYes处 (等待外循环输入符合HNGL的概念)\n *      3. 行为输出ActYes处 (等待外循环输入推进下一帧概念)\n *\n *  @version\n *      2020.08.14: 支持生物钟触发器;",
        "type": "code",
        "location": "/SMG_NothingIsAll/AIFoundation/AIClass/AITime/AITime.m:1-44"
    },
    "99": {
        "file_id": 19,
        "content": "This code is for the class AITime in the SMG_NothingIsAll project. It initializes a timer with a 10 second interval and triggers a notificationTimer method when the interval expires. The code also includes private methods and has notes about different callers and versions.",
        "type": "comment"
    }
}