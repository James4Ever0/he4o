{
    "2200": {
        "file_id": 221,
        "content": "//MARK:===============================================================\n-(void)setWaitHiting:(BOOL)value {\n    //1. 检测碰撞开始或结束时: 重置lastModel记录 & isHited检测结果;\n    NSLog(@\"碰撞检测: %@\",value ? @\"开始 >>>>>>>\" : @\"结束 <<<<<<<\");\n    self.lastHitModel = nil;\n    self.isHited = false;\n    //2. 开关更新;\n    _waitHiting = value;\n}\n/**\n *  MARK:--------------------碰撞检测算法 (参考29098)--------------------\n *  @param birdDuration : 当前触发的动画到结束所需动画时长 (用来计算碰撞检测,比如鸟飞的很快,下次触发时却过了很久,不能均匀的认为它飞了这么久);\n *  @callers 检查中状态时,只要木棒或小鸟的位置有变化,就调用:\n *          1. 无论是木棒还是小鸟的frame变化都调用 (参考29098-方案3-步骤1);\n *          2. 无论是木棒还是小鸟的动画结束时,都手动调用下 (因为UIView动画后不会立马更新frame);\n *  @version\n *      2023.06.09: 修复因分母为0,导致分帧rect取到NaN,导致交集全判为撞到的BUG (参考30015);\n *      2023.07.26: 改为每帧木棒变动都进行碰撞检测 & 且改为帧动画后不需要每次调用再分10帧了改为2 (参考30087-todo2);\n */\n-(void) runCheckHit4WoodBird:(CGFloat)birdDuration woodDuration:(CGFloat)woodDuration hiterDesc:(NSString*)hiterDesc {\n    //1. 非检查中 或 已检测到碰撞 => 返回;\n    if (!self.waitHiting || self.isHited) return;\n    //2. 当前帧model;\n    HitItemModel *curHitModel = [[HitItemModel alloc] init];",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m:600-627"
    },
    "2201": {
        "file_id": 221,
        "content": "This code sets a wait hitting flag and performs collision detection between wooden sticks and birds. It checks if the waiting for hitting flag is true or false, then logs a message accordingly. If not in checking state or already hit detected, it returns. It initializes a current frame model and calculates collision detection based on bird and wood stick durations.",
        "type": "comment"
    },
    "2202": {
        "file_id": 221,
        "content": "    curHitModel.woodFrame = self.woodView.showFrame;\n    curHitModel.birdFrame = self.birdView.showFrame;\n    curHitModel.time = [[NSDate date] timeIntervalSince1970] * 1000;\n    curHitModel.birdDuration = birdDuration;\n    curHitModel.woodDuration = woodDuration;\n    //3. 上帧为空时,直接等于当前帧;\n    if (self.lastHitModel == nil) {\n        self.lastHitModel = curHitModel;\n        return;\n    }\n    //4. 分10帧,检查每帧棒鸟是否有碰撞 (参考29098-方案3-步骤3);\n    CGFloat totalTime = curHitModel.time - self.lastHitModel.time; //总共过了多久;\n    CGFloat woodTime = self.lastHitModel.woodDuration == 0 ? totalTime : self.lastHitModel.woodDuration * 1000; //木棒扔了多久;\n    CGFloat birdTime = self.lastHitModel.birdDuration == 0 ? totalTime : self.lastHitModel.birdDuration * 1000; //小鸟飞了多久;\n    CGFloat firstCheckTime = MIN(totalTime,MIN(woodTime,birdTime)); //先把检查指定时间的(比如bird动画开始指定了0.15s);\n    NSInteger frameCount = 2;\n    CGFloat itemTime = firstCheckTime / frameCount; //在下面循环中每份i过了多久;\n    for (NSInteger i = 0; i < frameCount; i++) {\n        //5. 取上下等份的Rect取并集,避免两等份间距过大,导致错漏检测问题 (参考29098-测BUG2);",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m:628-648"
    },
    "2203": {
        "file_id": 221,
        "content": "Code is updating the lastHitModel with current hit model values and checking for bird-wood collision over 10 frames based on time intervals. It ensures correct detection by taking union of rectangles from upper and lower frames to avoid false negatives due to distance.",
        "type": "comment"
    },
    "2204": {
        "file_id": 221,
        "content": "        CGFloat wrRadio1 = woodTime == 0 ? 0 : i * itemTime / woodTime, wrRadio2 = woodTime == 0 ? 0 : (i+1) * itemTime / woodTime;\n        CGFloat brRadio1 = birdTime == 0 ? 0 : i * itemTime / birdTime, brRadio2 = birdTime == 0 ? 0 : (i+1) * itemTime / birdTime;\n        CGRect wr1 = [MathUtils radioRect:self.lastHitModel.woodFrame endRect:curHitModel.woodFrame radio:wrRadio1];\n        CGRect br1 = [MathUtils radioRect:self.lastHitModel.birdFrame endRect:curHitModel.birdFrame radio:brRadio1];\n        CGRect wr2 = [MathUtils radioRect:self.lastHitModel.woodFrame endRect:curHitModel.woodFrame radio:wrRadio2];\n        CGRect br2 = [MathUtils radioRect:self.lastHitModel.birdFrame endRect:curHitModel.birdFrame radio:brRadio2];\n        CGRect wrUnion = [MathUtils collectRectA:wr1 rectB:wr2];\n        CGRect brUnion = [MathUtils collectRectA:br1 rectB:br2];\n        if (CGRectIntersectsRect(wrUnion, brUnion)) {\n            self.isHited = true;\n            break;\n        }\n    }\n    //6. 前段没执行完,后段再执行下检查;\n    if (!self.isHited && firstCheckTime != totalTime) {",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m:649-664"
    },
    "2205": {
        "file_id": 221,
        "content": "Checks if the wood and bird rectangles intersect at any time during the loop, if so sets self.isHited to true and breaks out of loop. If not, continues check after total time.",
        "type": "comment"
    },
    "2206": {
        "file_id": 221,
        "content": "        //a. wr1br1就是前段的结尾处;\n        CGFloat wrRadio1 = woodTime == 0 ? 0 : firstCheckTime / woodTime, brRadio1 = birdTime == 0 ? 0 : firstCheckTime / birdTime;\n        CGRect wr1 = [MathUtils radioRect:self.lastHitModel.woodFrame endRect:curHitModel.woodFrame radio:wrRadio1];\n        CGRect br1 = [MathUtils radioRect:self.lastHitModel.birdFrame endRect:curHitModel.birdFrame radio:brRadio1];\n        //b. wr2br2直接就是最结尾,即curHitModel的位置;\n        CGRect wr2 = curHitModel.woodFrame;\n        CGRect br2 = curHitModel.birdFrame;\n        //c. 后段碰撞检测;\n        CGRect wrUnion = [MathUtils collectRectA:wr1 rectB:wr2];\n        CGRect brUnion = [MathUtils collectRectA:br1 rectB:br2];\n        if (CGRectIntersectsRect(wrUnion, brUnion)) {\n            self.isHited = true;\n        }\n    }\n    //5. 保留lastHitModel & 撞到时触发痛感 (参考29098-方案3-步骤2);\n    if (self.isHited) {\n        NSLog(@\"碰撞检测: %@ 棒(%.0f -> %.0f) 鸟(%.0f,%.0f -> %.0f,%.0f) from:%@\",self.isHited ? @\"撞到了\" : @\"没撞到\",\n              self.lastHitModel.woodFrame.origin.x,curHitModel.woodFrame.origin.x,",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m:665-683"
    },
    "2207": {
        "file_id": 221,
        "content": "This code performs collision detection between a wooden object and a bird. It checks if the wooden object intersects with the bird within certain frames, and if so, sets the isHited flag to true. If the isHited flag is true, it logs a message stating that the wooden object and bird have collided.",
        "type": "comment"
    },
    "2208": {
        "file_id": 221,
        "content": "              self.lastHitModel.birdFrame.origin.x,self.lastHitModel.birdFrame.origin.y,\n              curHitModel.birdFrame.origin.x,curHitModel.birdFrame.origin.y,hiterDesc);\n    }\n    self.lastHitModel = curHitModel;\n    if (self.isHited) {\n        [self.birdView hurt];\n    }\n}\n//木棒与食物碰撞检测\n-(void) runCheckHit4WoodFood {\n    //1. 数据准备;\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    NSArray *foods = [SMGUtils filterArr:[self.view subViews_AllDeepWithClass:FoodView.class] checkValid:^BOOL(FoodView *item) {\n        return item.status == FoodStatus_Border;\n    }];\n    //3. 上帧为空时,直接等于当前帧;\n    if (CGRectIsNull(self.lastWoodFrame)) {\n        self.lastWoodFrame = self.woodView.showFrame;\n    }\n    //4. 分10帧,检查每帧棒鸟是否有碰撞 (参考29098-方案3-步骤3);\n    NSInteger frameCount = 3;\n    for (NSInteger i = 0; i < frameCount; i++) {\n        //5. 取上下等份的Rect取并集,避免两等份间距过大,导致错漏检测问题 (参考29098-测BUG2);\n        CGFloat radio1 = i / (float)frameCount, radio2 = (i+1) / (float)frameCount;\n        CGRect wr1 = [MathUtils radioRect:self.lastWoodFrame endRect:self.woodView.showFrame radio:radio1];",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m:684-711"
    },
    "2209": {
        "file_id": 221,
        "content": "This code segment handles bird and wooden stick collisions, as well as food and wooden stick collisions. It updates the last known positions of the bird and wooden stick, checks for frame collisions, and triggers a hurt event if applicable. The code also prepares data for collision detection and uses a radio rect method to avoid potential collision issues due to overlapping rectangles.",
        "type": "comment"
    },
    "2210": {
        "file_id": 221,
        "content": "        CGRect wr2 = [MathUtils radioRect:self.lastWoodFrame endRect:self.woodView.showFrame radio:radio2];\n        CGRect wrUnion = [MathUtils collectRectA:wr1 rectB:wr2];\n        //6. 分别与每个food进行碰撞检测;\n        for (FoodView *food in foods) {\n            if (CGRectIntersectsRect(wrUnion, food.showFrame)) {\n                if (![result containsObject:food]) [result addObject:food];\n                continue;\n            }\n        }\n    }\n    //7. 压到破皮;\n    for (FoodView *item in result) {\n        item.status = FoodStatus_Eat;\n    }\n    if (ARRISOK(result)) NSLog(@\"碰撞检测,棒压坚果数:%ld 棒(%.0f -> %.0f)\",result.count,self.lastWoodFrame.origin.x,self.woodView.showX);\n    //8. 保留lastWoodFrame\n    self.lastWoodFrame = self.woodView.showFrame;\n    //9. 触发视觉\n    if (ARRISOK(result)) {\n        [self.birdView see:self.view];\n    }\n}\n/**\n *  MARK:--------------------坚果碰撞检测算法 (参考30041-记录3-方案)--------------------\n *  @desc 1. 食物不会动,只需要判断鸟飞过的轨迹分帧,有没有路过坚果即可 (每dp一帧);\n *        2. 坐标说明: 不用世界坐标,因为bird,wood,food全在self.view下;\n *  @version\n *      2023.06.23: 初版,解决飞的太快,导致飞过却没吃到的BUG (参考30041-记录3);",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m:712-744"
    },
    "2211": {
        "file_id": 221,
        "content": "This code detects collisions between a bird and fruits, updating the bird's state if it collides with any fruit. It iterates through each fruit on the screen and checks if the bird's current frame intersects with the fruit's frame. If there is an intersection, the corresponding fruit's status is set to \"eat\". The code also logs the number of fruits collided with and updates the last wood frame, triggering a visual update for the bird view.",
        "type": "comment"
    },
    "2212": {
        "file_id": 221,
        "content": " */\n-(NSArray*) runCheckHit4BirdFood:(CGRect)birdStart birdEnd:(CGRect)birdEnd status:(FoodStatus)status{\n    //1. 数据准备;\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    NSArray *foods = ARRTOOK([self.view subViews_AllDeepWithClass:FoodView.class]);\n    //2. dp距离每点一帧,检查每帧坚果鸟是否有碰撞 (参考30041-记录3-方案);\n    float distance = [UIView distance4DP:birdStart.origin pointB:birdEnd.origin];\n    for (NSInteger i = 0; i <= distance; i++) {\n        CGFloat brRadio = distance == 0 ? 0 : i / distance;\n        CGRect birdIFrame = [MathUtils radioRect:birdStart endRect:birdEnd radio:brRadio];\n        for (FoodView *food in foods) {\n            if (food.status == status && ![result containsObject:food] && CGRectIntersectsRect(birdIFrame, food.frame)) {\n                [result addObject:food];\n            }\n        }\n    }\n    //3. 保留lastHitModel & 撞到时触发痛感 (参考29098-方案3-步骤2);\n    NSLog(@\"碰撞检测到坚果数: %ld 鸟(%.0f,%.0f -> %.0f,%.0f)\",result.count,birdStart.origin.x,birdStart.origin.y,birdEnd.origin.x,birdEnd.origin.y);",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m:745-764"
    },
    "2213": {
        "file_id": 221,
        "content": "This method checks for collisions between a bird's path and food objects in the view, returning an array of matching food items. It calculates intermediate frames along the bird's path and compares them to each food object frame. The results are saved in an array and logged.",
        "type": "comment"
    },
    "2214": {
        "file_id": 221,
        "content": "    return result;\n}\n- (void) food2Pos:(CGPoint)targetPoint caller4RL:(NSString*)caller4RL status:(FoodStatus)status{\n    FoodView *foodView = [[FoodView alloc] init];\n    foodView.status = status;\n    [foodView setOrigin:CGPointMake(ScreenWidth * 0.375f, ScreenHeight - 66)];\n    [self.view addSubview:foodView];\n    [UIView animateWithDuration:0.3f animations:^{\n        [foodView setOrigin:targetPoint];\n    }completion:^(BOOL finished) {\n        //1. 视觉输入\n        [self.birdView see:self.view];\n        //2. 投食碰撞检测 (参考28172-todo2.2);\n        self.birdView.hitFoods = [self birdView_GetFoodOnHit:self.birdView.frame birdEnd:self.birdView.frame status:FoodStatus_Eat];\n        if (ARRISOK(self.birdView.hitFoods)) {\n            //3. 如果扔到鸟身上,则触发吃掉 (参考28172-todo2.1);\n            [self.birdView touchMouth];\n        }\n        //4. 报强训结束标记 (投果结束);\n        [theRT invoked:caller4RL];\n    }];\n}\n-(void) animationFlash:(UIView*)view{\n    if (view) {\n        [UIView animateWithDuration:0.2 animations:^{\n            view.alpha = 0.3f;",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m:765-795"
    },
    "2215": {
        "file_id": 221,
        "content": "This code defines a function `food2Pos` which takes in parameters like targetPoint, caller4RL, and status. It creates a FoodView object with the specified status, sets its origin to a fixed position on screen, adds it as a subview, animates its position to the targetPoint, and performs visual input, food collision detection, action triggering, and result reporting upon animation completion. Additionally, there is a separate function `animationFlash` which animates the view's alpha property to make it semi-transparent for 0.2 seconds.",
        "type": "comment"
    },
    "2216": {
        "file_id": 221,
        "content": "        }completion:^(BOOL finished) {\n            view.alpha = 1.0f;\n        }];\n    }\n}\n-(BOOL) birdOut{\n    return [self birdLeftOut] || [self birdRightOut] || [self birdTopOut] || [self birdBottomOut];\n}\n-(BOOL) birdLeftOut{\n    return self.birdView.showX < 0;\n}\n-(BOOL) birdRightOut{\n    return self.birdView.showMaxX > ScreenWidth;\n}\n-(BOOL) birdTopOut{\n    return self.birdView.y < 64;\n}\n-(BOOL) birdBottomOut{\n    return self.birdView.showMaxY > ScreenHeight;\n}\n//MARK:===============================================================\n//MARK:                     < 小鸟出生地点 >\n//MARK:===============================================================\n//获取坐标;\n-(CGPoint) getBirdBirthPos{\n    if (self.birdBirthPos.x > 0 || self.birdBirthPos.y > 0) {\n        return self.birdBirthPos;\n    }else if (theApp.birthPosMode == 1) {\n        return [self getBirdBirthPos_RandomCenter];\n    }else if(theApp.birthPosMode == 2){\n        return [self getBirdBirthPos_Center];\n    }else if(theApp.birthPosMode == 3){\n        return [self getBirdBirthPos_RandomSafe];",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m:796-831"
    },
    "2217": {
        "file_id": 221,
        "content": "This code snippet contains methods for checking if a bird is out of the screen boundaries and determining its birth position based on different modes. It includes methods to check if the bird is outside the left, right, top, or bottom edges of the screen. The bird's initial position can be set by the user, or it can be determined randomly within certain limits, depending on the chosen mode.",
        "type": "comment"
    },
    "2218": {
        "file_id": 221,
        "content": "    }else{\n        return [self getBirdBirthPos_Random];\n    }\n}\n/**\n *  MARK:--------------------随机--------------------\n *  @desc 取值范围为离中心-80到80 (X和Y都是这范围);\n *  @desc 优缺点:\n *          1. 优点是: 限定的范围固定,不会离谱;\n *          2. 缺点是: 限定范围内每个位置的概率都一样;\n */\n-(CGPoint) getBirdBirthPos_Random{\n    //1. 取随机值 (范围-80到80);\n    NSInteger areaW = ScreenWidth;\n    NSInteger areaH = ScreenHeight - 100;\n    float randomX = (arc4random() % areaW) - areaW * 0.5f;\n    float randomY = (arc4random() % areaH) - areaH * 0.5f;\n    //2. 转成左上角锚点;\n    float x = randomX + ScreenWidth * 0.5f;\n    float y = randomY + ScreenHeight * 0.5f;\n    return CGPointMake(x, y);\n}\n/**\n *  MARK:--------------------随机偏中--------------------\n *  @desc 先根号,再平方,使使其离屏幕中心更近的概率更大,步骤举例如下:\n *          1. 限制出生范围 (比如宽200范围内);\n *          2. 我们要先取根号随机值 (取值范围为-10到10);\n *          3. 然后再二次方 (取值范围为-100到100);\n *          4. 再转换成绝对坐标返回 (ios锚点坐标系);\n *  @desc 优点:\n *          1. 限定的范围固定,不会离谱;\n *          2. 限定范围内离屏中心概率更大;\n *  @version\n *      2023.03.14: 缩小防撞第2步训练出生范围 (参考28174-试解);\n */\n-(CGPoint) getBirdBirthPos_RandomCenter{",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m:832-870"
    },
    "2219": {
        "file_id": 221,
        "content": "This code contains two methods for generating a random point within specific ranges. The first method, `getBirdBirthPos_Random`, generates a random point within the range of -80 to 80 for both X and Y coordinates, ensuring that the generated point remains within a fixed range without being too extreme.\nThe second method, `getBirdBirthPos_RandomCenter`, generates a random point with higher probability closer to the center of the screen by first taking the square root of a random value within -10 to 10 range and then squaring it to get a value within -100 to 100 range. Finally, the method converts this point to an absolute coordinate system to return it.",
        "type": "comment"
    },
    "2220": {
        "file_id": 221,
        "content": "    //1. 取根值10;\n    CGFloat areaW = 280;\n    CGFloat areaH = 140;\n    float modW = sqrtf(areaW * 0.5f);\n    float modH = sqrtf(areaH * 0.5f);\n    //2. 取随机值 (范围-10到10);\n    float randomW = (arc4random() % (int)(modW * 2 + 0.5f)) - modW;\n    float randomH = (arc4random() % (int)(modH * 2 + 0.5f)) - modH;\n    //3. 求二次方,得出相对XY坐标 (范围-100到100);\n    float relativeX = randomW * randomW * (randomW < 0 ? -1 : 1);\n    float relativeY = randomH * randomH * (randomH < 0 ? -1 : 1);\n    //4. 转成绝对XY坐标 (左上角锚点坐标系);\n    float x = relativeX + ScreenWidth * 0.5f;\n    float y = relativeY + ScreenHeight * 0.5f;\n    return CGPointMake(x, y);\n}\n/**\n *  MARK:--------------------中心--------------------\n */\n-(CGPoint) getBirdBirthPos_Center{\n    return CGPointMake(ScreenWidth * 0.5f, ScreenHeight * 0.5f);\n}\n/**\n *  MARK:--------------------安全地带随机--------------------\n *  @desc 支持在安全地带出生,以方便训练去皮等,避免动不动疼干扰训练 (参考30145-注1);\n */\n-(CGPoint) getBirdBirthPos_RandomSafe{\n    //1. 随机x值 (X取值范围: 20 到 ScreenWidth - 50);\n    float minX = 20,maxX = ScreenWidth - 50;",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m:871-904"
    },
    "2221": {
        "file_id": 221,
        "content": "1. Generates a random position within the given area bounds.\n2. Calculates the relative coordinates based on the random values.\n3. Converts the relative coordinates to absolute coordinates using screen width and height.\n4. Returns the bird's birth position in the center of the screen.\n5. Supports random safe zone for hatching birds, useful for training and avoiding distractions.",
        "type": "comment"
    },
    "2222": {
        "file_id": 221,
        "content": "    int xDelta = maxX - minX;\n    float resultX = (arc4random() % xDelta) + minX;\n    //2. 随机y值 => 算出最大最小值;\n    float minY = 0,maxY = 0;\n    if (random() % 2 == 0) {\n        //a. 在路上方 (上方时Y取值范围: 64 到 (ScreenHeight - 100) * 0.5f - 30 - 1; //多减1避免撞上);\n        minY = 64;\n        maxY = (ScreenHeight - 100) * 0.5f - 30 - 1;\n    } else {\n        //b. 在路下方 (下方时Y取值范围: (ScreenHeight + 100) * 0.5f + 1 到 ScreenHeight - 64 - 30; //多加1避免撞上);\n        minY = (ScreenHeight + 100) * 0.5f + 1;\n        maxY = ScreenHeight - 64 - 30;\n    }\n    //3. 随机y值 => 算出resultY;\n    int yDelta = maxY - minY;\n    float resultY = (arc4random() % yDelta) + minY;\n    //4. 要求返回中心点坐标,所以xy各加15;\n    return CGPointMake(resultX + 15, resultY + 15);\n}\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m:905-928"
    },
    "2223": {
        "file_id": 221,
        "content": "This code generates random x and y coordinates within a specified range, taking into account whether the resulting point should be above or below the road. It calculates minimum and maximum values for the y-axis based on the random value generated, and then calculates the final result Y by adding a random value within the calculated range. Finally, it returns the center coordinate of the point by adding 15 to both x and y coordinates.",
        "type": "comment"
    },
    "2224": {
        "file_id": 222,
        "content": "/SMG_NothingIsAll/Demo/BirdLivePage/BirdLivePage.h",
        "type": "filepath"
    },
    "2225": {
        "file_id": 222,
        "content": "BirdLivePage.h file is a header file containing the interface declaration for BirdLivePage class, which inherits from HEViewController. Created by jiaxiaogang in 2018 and copyrighted under XiaoGang.",
        "type": "summary"
    },
    "2226": {
        "file_id": 222,
        "content": "//\n//  BirdLivePage.h\n//  SMG_NothingIsAll\n//\n//  Created by jiaxiaogang on 2018/10/24.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import \"HEViewController.h\"\n@interface BirdLivePage : HEViewController\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/BirdLivePage.h:1-13"
    },
    "2227": {
        "file_id": 222,
        "content": "BirdLivePage.h file is a header file containing the interface declaration for BirdLivePage class, which inherits from HEViewController. Created by jiaxiaogang in 2018 and copyrighted under XiaoGang.",
        "type": "comment"
    },
    "2228": {
        "file_id": 223,
        "content": "/SMG_NothingIsAll/Demo/BirdLivePage/BirdLivePage.m",
        "type": "filepath"
    },
    "2229": {
        "file_id": 223,
        "content": "The code initializes a BirdLivePage view with bird, road, and tree subviews, sets delegates for roadView and birdView, and retrieves all FoodView subviews of the tree view.",
        "type": "summary"
    },
    "2230": {
        "file_id": 223,
        "content": "//\n//  BirdLivePage.m\n//  SMG_NothingIsAll\n//\n//  Created by jiaxiaogang on 2018/10/24.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import \"BirdLivePage.h\"\n#import \"BirdView.h\"\n#import \"RoadView.h\"\n#import \"TreeView.h\"\n#import \"FoodView.h\"\n#import \"UIView+Extension.h\"\n@interface BirdLivePage ()<RoadViewDelegate,BirdViewDelegate>\n@property (strong,nonatomic) BirdView *birdView;\n@property (strong,nonatomic) RoadView *roadView;\n@property (strong,nonatomic) TreeView *treeView;\n@end\n@implementation BirdLivePage\n-(void) initView{\n    [super initView];\n    //1. self\n    self.title = @\"小鸟生存演示\";\n    //2. birdView\n    self.birdView = [[BirdView alloc] init];\n    [self.view addSubview:self.birdView];\n    self.birdView.delegate = self;\n    //3. roadView\n    self.roadView = [[RoadView alloc] init];\n    [self.view addSubview:self.roadView];\n    self.roadView.delegate = self;\n    //4. treeView\n    self.treeView = [[TreeView alloc] init];\n    [self.view addSubview:self.treeView];\n}\n/**\n *  MARK:--------------------RoadViewDelegate--------------------",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/BirdLivePage.m:1-47"
    },
    "2231": {
        "file_id": 223,
        "content": "The code initializes the view of a BirdLivePage by adding bird, road, and tree views as subviews. It also sets delegates for the roadView and birdView to the same instance of BirdLivePage. The title of the page is set to \"小鸟生存演示\".",
        "type": "comment"
    },
    "2232": {
        "file_id": 223,
        "content": " */\n-(NSArray *)roadView_GetFoodInLoad{\n    return [self.treeView subViews_AllDeepWithClass:FoodView.class];\n}\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/BirdLivePage.m:48-53"
    },
    "2233": {
        "file_id": 223,
        "content": "This method retrieves all subviews of the tree view with a class of FoodView.",
        "type": "comment"
    },
    "2234": {
        "file_id": 224,
        "content": "/SMG_NothingIsAll/Demo/BirdLivePage/Model/HitItemModel.h",
        "type": "filepath"
    },
    "2235": {
        "file_id": 224,
        "content": "This file, HitItemModel.h, defines the HitItemModel class which has properties for recording the position of a wooden object and a bird, time, and durations for both objects. It is likely used in a game or interactive application involving these elements.",
        "type": "summary"
    },
    "2236": {
        "file_id": 224,
        "content": "//\n//  HitItemModel.h\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2023/5/21.\n//  Copyright © 2023年 XiaoGang. All rights reserved.\n//\n#import <Foundation/Foundation.h>\n@interface HitItemModel : NSObject\n@property (assign, nonatomic) CGRect woodFrame; //记录木棒位置\n@property (assign, nonatomic) CGRect birdFrame; //记录小鸟位置\n@property (assign, nonatomic) long long time; //记录时间\n@property (assign, nonatomic) CGFloat woodDuration; //持续时间\n@property (assign, nonatomic) CGFloat birdDuration; //持续时间\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/Model/HitItemModel.h:1-19"
    },
    "2237": {
        "file_id": 224,
        "content": "This file, HitItemModel.h, defines the HitItemModel class which has properties for recording the position of a wooden object and a bird, time, and durations for both objects. It is likely used in a game or interactive application involving these elements.",
        "type": "comment"
    },
    "2238": {
        "file_id": 225,
        "content": "/SMG_NothingIsAll/Demo/BirdLivePage/Model/HitItemModel.m",
        "type": "filepath"
    },
    "2239": {
        "file_id": 225,
        "content": "This code is an implementation file for the HitItemModel class within the SMG_NothingIsAll project. It includes a header file import and serves as a starting point for defining methods and properties of this model.",
        "type": "summary"
    },
    "2240": {
        "file_id": 225,
        "content": "//\n//  HitItemModel.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2023/5/21.\n//  Copyright © 2023年 XiaoGang. All rights reserved.\n//\n#import \"HitItemModel.h\"\n@implementation HitItemModel\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/Model/HitItemModel.m:1-13"
    },
    "2241": {
        "file_id": 225,
        "content": "This code is an implementation file for the HitItemModel class within the SMG_NothingIsAll project. It includes a header file import and serves as a starting point for defining methods and properties of this model.",
        "type": "comment"
    },
    "2242": {
        "file_id": 226,
        "content": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.h",
        "type": "filepath"
    },
    "2243": {
        "file_id": 226,
        "content": "BirdView is a UIView with delegate methods for page view, visual range, and frame control. It tracks hit foods, has properties for waitEat state, and contains various interaction methods for bird's body parts.",
        "type": "summary"
    },
    "2244": {
        "file_id": 226,
        "content": "//\n//  BirdView.h\n//  SMG_NothingIsAll\n//\n//  Created by jiaxiaogang on 2018/11/7.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import <UIKit/UIKit.h>\n#import \"FoodView.h\"\n@protocol BirdViewDelegate <NSObject>\n-(NSArray *)birdView_GetFoodOnHit:(CGRect)birdStart birdEnd:(CGRect)birdEnd status:(FoodStatus)status;\n-(UIView*) birdView_GetPageView;\n-(CGRect) birdView_GetSeeRect;//视觉范围 (仅能看到范围内的view)\n-(void) birdView_SetFramed;\n-(void) birdView_FlyAnimationFinish;\n-(void) birdView_FlyAnimationBegin:(CGFloat)aniDuration;\n@end\n@class FoodView;\n@interface BirdView : UIView\n@property (weak,nonatomic) id<BirdViewDelegate> delegate;\n/**\n *  MARK:--------------------鸟飞过的坚果--------------------\n */\n@property (strong, nonatomic) NSArray *hitFoods;\n/**\n *  MARK:--------------------饿了在等吃状态--------------------\n *  @desc 如果等待期间吃不上则会更饿,如果吃上了就不会更饿 (参考28171-todo2)\n */\n@property (assign, nonatomic) BOOL waitEat;\n/**\n *  MARK:--------------------视觉--------------------\n *  1. 目前是被动视觉,\n *  2. 随后有需要可以改为主动视觉 (0.3s每桢)\n *  3. 主动视觉可以采用计时器和代理scan来实现;",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.h:1-44"
    },
    "2245": {
        "file_id": 226,
        "content": "BirdView is a UIView that can fly and interact with food objects. It has a delegate that provides methods to get page view, bird's visual range, and control its frame and animation. BirdView keeps track of the foods it hits while flying and has properties for waitEat state and visual functionality.",
        "type": "comment"
    },
    "2246": {
        "file_id": 226,
        "content": " */\n-(void) see:(UIView*)view;\n/**\n *  MARK:--------------------触碰嘴--------------------\n *  1. 引起吸吮反射;\n *\n *  代码思路...\n *  1) 刺激引发he反射;\n *  2) 反射后开吃 (he主动调用eat());\n *  3) eat()中, 销毁food,并将产生的mv传回给he;\n *\n *  代码实践...\n *  1) 定义一个\"反射标识\";\n *  2) 在output中,写eat()的反射调用;\n *  3) \"反射码\"作为dataSource传递给outLog,可被CanOut判定true,并进行后天输出eat();\n *\n */\n-(void) touchMouth;\n/**\n *  MARK:--------------------摸翅膀--------------------\n *  @param direction 从左顺时针,8个方向,分别为0-7;\n */\n-(void) touchWing:(long)direction;\n/**\n *  MARK:--------------------摸脚--------------------\n *  @param direction 从左顺时针,8个方向,分别为0-7;\n */\n-(void) touchFoot:(long)direction;\n/**\n *  MARK:--------------------痛--------------------\n */\n-(void) hurt;\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.h:45-83"
    },
    "2247": {
        "file_id": 226,
        "content": "This code contains several methods related to interactions with a bird. The `see` method handles the view, while `touchMouth`, `touchWing`, and `touchFoot` are for interacting with different parts of the bird's body. The `hurt` method represents the bird feeling pain.",
        "type": "comment"
    },
    "2248": {
        "file_id": 227,
        "content": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m",
        "type": "filepath"
    },
    "2249": {
        "file_id": 227,
        "content": "BirdView manages bird actions, animations, and user interactions. It handles collisions, updates states, notifications, food, and reactions based on model type. The code uses an observer pattern for processing notifications and events.",
        "type": "summary"
    },
    "2250": {
        "file_id": 227,
        "content": "//\n//  BirdView.m\n//  SMG_NothingIsAll\n//\n//  Created by jiaxiaogang on 2018/11/7.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import \"BirdView.h\"\n#import \"FoodView.h\"\n#import \"AIReactorControl.h\"\n#import \"NVHeUtil.h\"\n@interface BirdView ()\n@property (strong,nonatomic) IBOutlet UIView *containerView;\n@property (weak, nonatomic) IBOutlet UILabel *titleLab;\n@end\n@implementation BirdView\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initView];\n        [self initData];\n        [self initDisplay];\n    }\n    return self;\n}\n-(void) initView{\n    //self\n    [self setBackgroundColor:[UIColor clearColor]];\n    [self setFrame:CGRectMake(100, 100, 30, 30)];\n    //containerView\n    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self.class) owner:self options:nil];\n    [self addSubview:self.containerView];\n    [self.containerView setFrame:CGRectMake(0, 0, 30, 30)];\n}\n-(void) initData{\n}\n-(void) initDisplay{\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(outputObserver:) name:kOutputObserver object:nil];",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m:1-48"
    },
    "2251": {
        "file_id": 227,
        "content": "BirdView initializes view, data, and display. It sets background color to clear, loads nib named after itself, adds container view, and registers for a notification observer.",
        "type": "comment"
    },
    "2252": {
        "file_id": 227,
        "content": "}\n//MARK:===============================================================\n//MARK:                     < method >\n//MARK:===============================================================\n/**\n *  MARK:--------------------飞--------------------\n *  @version\n *      2023.05.20: 改为物理仿真飞行 (为了碰撞检测用物理仿真更准确,而用了后飞行就必须也用) (参考29096-问题2-另外);\n *      2023.05.21: v2物理仿真: \"飞行卡循环,木棒扔不全\",所以切回v1 (参考29097);\n *      2023.06.24: 飞过坚果检测,交把结果存下来,以便触发\"吃行为\"后将其吃掉 (参考30041-记录3);\n */\n-(void) flyAction:(CGFloat)value {\n    [self flyActionV1:value];\n}\n-(void) flyActionV1:(CGFloat)value{\n    //1. 数据检查\n    value = MAX(MIN(1, value), 0);\n    //2. 将从左顺时针: \"0至1\",转换为: \"-1至1\";\n    CGFloat value_F1_1 = value * 2 - 1;\n    //3. 将\"-1至1\",转为: \"-180至180度\";\n    CGFloat angle = value_F1_1 * M_PI;\n    //4. 用sin计算对边Y,cos计算邻边X;\n    NSLog(@\"fly >> %@ angle:%.0f\",[NVHeUtil getLightStr_Value:value algsType:FLY_RDS dataSource:@\"\"],value_F1_1 * 180);\n    CGFloat duration = 0.15f;\n    [self.delegate birdView_FlyAnimationBegin:duration];\n    CGRect birdStart = self.frame;",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m:49-80"
    },
    "2253": {
        "file_id": 227,
        "content": "This method performs a flying action for the bird view. It first checks the input value, converts it to a range of -180 to 180 degrees, and calculates the corresponding X and Y coordinates using trigonometry. The method then logs the angle and notifies the delegate that the fly animation has begun.",
        "type": "comment"
    },
    "2254": {
        "file_id": 227,
        "content": "    [UIView animateWithDuration:duration animations:^{\n        [self setX:self.x + (cos(angle) * 30.0f)];\n        [self setY:self.y + (sin(angle) * 30.0f)];\n    }completion:^(BOOL finished) {\n        //5. 飞完动画时,要调用下碰撞检测 (因为UIView动画后,不会立马执行frame更新);\n        [self.delegate birdView_FlyAnimationFinish];\n        //5. 飞后与坚果碰撞检测 (参考28172-todo2.2 & 30041-记录3);\n        self.hitFoods = [self.delegate birdView_GetFoodOnHit:birdStart birdEnd:self.frame status:FoodStatus_Eat];\n        if (ARRISOK(self.hitFoods)) {\n            //6. 如果飞到坚果上,则触发吃掉 (参考28172-todo2.1);\n            [self touchMouth];\n        }\n        //7. 强训飞完报告;\n        [theRT invoked:kFlySEL];\n    }];\n}\n-(void) flyResult:(CGFloat)value{\n    //1. 飞后视觉\n    [self see:[self.delegate birdView_GetPageView]];\n}\n-(void) see:(UIView*)view{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(birdView_GetSeeRect)]) {\n        //1. 将视觉范围下,的视觉信息输入大脑;\n        CGRect rect = [self.delegate birdView_GetSeeRect];\n        [AIInput commitView:self targetView:view rect:rect];",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m:81-108"
    },
    "2255": {
        "file_id": 227,
        "content": "1. Animate bird view with duration and angle for X and Y position changes.\n2. Call delegate method when animation finishes to check for collision.\n3. Check if the bird collided with a food item and trigger eat action if true.\n4. Report fly completion to the RT invoked.\n5. Update bird view with new page view after flying.",
        "type": "comment"
    },
    "2256": {
        "file_id": 227,
        "content": "    }\n}\n//MARK:===============================================================\n//MARK:                     < onclick >\n//MARK:===============================================================\n- (IBAction)mouchOnClick:(id)sender {\n    DemoLog(@\"鸟嘴 吸吮反射\");\n    [self touchMouth];\n}\n//MARK:===============================================================\n//MARK:                     < 摸反射 >\n//MARK:===============================================================\n//被动吃\n-(void) touchMouth{\n    //2. 吃\n    [AIReactorControl commitReactor:EAT_RDS];\n}\n/**\n *  MARK:--------------------摸翅膀--------------------\n *  @param direction 从左顺时针,8个方向,分别为0-7;\n */\n-(void) touchWing:(long)direction {\n    //1. 飞前视觉\n    //[self see:[self.delegate birdView_GetPageView]];\n    //2. 飞行\n    float data = direction / 8.0f;\n    [AIReactorControl commitReactor:FLY_RDS datas:@[@(data)]];\n}\n/**\n *  MARK:--------------------摸脚--------------------\n *  @param direction 从左顺时针,8个方向,分别为0-7;\n */\n-(void) touchFoot:(long)direction {\n    float data = direction / 8.0f;\n    [AIReactorControl commitReactor:KICK_RDS datas:@[@(data)]];",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m:109-149"
    },
    "2257": {
        "file_id": 227,
        "content": "This code defines several methods for controlling the bird's actions in a game. The `mouchOnClick:` method triggers the bird to open its mouth using `touchMouth` method. The `touchWing:` and `touchFoot:` methods allow the bird to flap its wings or kick its feet in different directions by calling the `commitReactor` method of `AIReactorControl`. These actions can be triggered through user interaction, indicating a potential gameplay mechanic for player control over the bird's movements.",
        "type": "comment"
    },
    "2258": {
        "file_id": 227,
        "content": "}\n/**\n *  MARK:--------------------痛--------------------\n *  @version\n *      2021.01.25: 加大痛感,否则不痛不痒的思维没活力 (乌鸦不care);\n *      2023.06.29: 增强痛感 (参考30044-BUG1);\n */\n-(void) hurt{\n    DemoLog(@\"痛感\");\n    [AIInput commitIMV:MVType_Hurt from:8.0f to:9.0f];\n    [self.titleLab setTextColor:UIColor.redColor];\n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.8 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n        [self.titleLab setTextColor:UIColor.whiteColor];\n    });\n}\n-(void) dealloc{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n/**\n *  MARK:--------------------吃--------------------\n *  @desc 无论是主动吃,还是被动吃,都要观察下吃前的视觉,吃后的视觉,以及价值上的影响;\n *  @version\n *      2020.01.20: 吃前视觉仅由被动吃时有,为解决外层死循环问题 (参考n18p5-BUG9);\n *      2023.03.11: 吃上了,不会立马感觉饱,而是不再继续更饿 (参考28171-todo2);\n *      2023.06.24: 触发吃后,吃掉碰撞到的坚果 (参考30041-记录3);\n */\n-(void) eatAction:(CGFloat)value{\n    //1. 吃动作\n    [UIView animateWithDuration:0.1f animations:^{\n        [self.containerView.layer setTransform:CATransform3DMakeRotation(M_PI_4 * 0.5f, 0, 0, 1)];",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m:150-182"
    },
    "2259": {
        "file_id": 227,
        "content": "This method is responsible for handling the \"hurt\" action in the game, increasing pain sensation and setting the text color of the title label to red before transitioning it back to white after 0.8 seconds. Additionally, it contains a dealloc method that removes the observer from the notification center when the object is deallocated, and an \"eatAction\" method that handles the eating animation by rotating the container view.",
        "type": "comment"
    },
    "2260": {
        "file_id": 227,
        "content": "    }completion:^(BOOL finished) {\n        //2. 吃完动作\n        [UIView animateWithDuration:0.1f animations:^{\n            [self.containerView.layer setTransform:CATransform3DIdentity];\n        }completion:^(BOOL finished) {\n            [theRT invoked:kEatSEL];\n        }];\n    }];\n}\n-(void) eatResult:(CGFloat)value{\n    //1. 嘴附近的食物\n    self.hitFoods = ARRTOOK(self.hitFoods);\n    BOOL eated = false;\n    //2. 吃掉UI (计时器触发,更饿时,发现没坚果吃,并不能解决饥饿问题,参考:18084_todo1);\n    for (FoodView *foodView in self.hitFoods) {\n        //3. 吃掉 (让he以吸吮反射的方式,去主动吃;并将out入网,以抽象出\"吃\"的节点;参考n15p6-QT1)\n        if(foodView.status == FoodStatus_Eat){\n            eated = true;\n            [foodView removeFromSuperview];\n        }else if(foodView.status == FoodStatus_Border){\n            //b. 产生HurtMindValue (坚果带皮时,不仅吃不到,还得嘴疼);\n            //[AIInput commitIMV:MVType_Hurt from:2.0f to:3.0f];\n        }\n    }\n    //3. 吃到 或 没吃到 => 的吃后视觉 & waitEat标记;\n    if (eated){\n        //4. 吃完视觉 (其实啥也看不到);\n        [self see:[self.delegate birdView_GetPageView]];\n        //5. 价值变化: 吃上了,不会立马感觉饱,而是不再继续更饿 (参考28171-todo2);",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m:183-215"
    },
    "2261": {
        "file_id": 227,
        "content": "Code snippet handles the animation and logic for a bird eating food. It checks if the bird has eaten any food, animates the bird's mouth movement, and updates the bird's state based on whether it has eaten or not.",
        "type": "comment"
    },
    "2262": {
        "file_id": 227,
        "content": "        DemoLog(@\"吃上坚果了\");\n        self.waitEat = false;\n    }else{\n        //3. 没坚果可吃 (计时器触发,更饿时,发现没坚果吃,并不能解决饥饿问题,参考:18084_todo1);\n    }\n}\n//MARK:===============================================================\n//MARK:                     < 踢 >\n//MARK:===============================================================\n-(void) kickAction:(OutputModel*)model{\n    //1. 数据检查\n    CGFloat value = [model.data floatValue];\n    value = MAX(MIN(1, value), 0);\n    //2. 将从左顺时针: \"0至1\",转换为: \"-1至1\";\n    CGFloat value_F1_1 = value * 2 - 1;\n    //3. 将\"-1至1\",转为: \"-180至180度\";\n    CGFloat angle = value_F1_1 * M_PI;\n    //4. 用sin计算对边Y,cos计算邻边X;\n    NSLog(@\"kick >> %@ angle:%.0f\",[NVHeUtil getLightStr_Value:value algsType:KICK_RDS dataSource:@\"\"],value_F1_1 * 180);\n    CGFloat duration = model.useTime;\n    CGRect birdStart = self.frame;\n    //5. 踢动作;\n    [UIView animateWithDuration:duration / 2.0f animations:^{\n        [self.containerView.layer setTransform:CATransform3DMakeRotation(M_PI_4 * 1.0f, 1, 0, 0)];\n    }completion:^(BOOL finished) {",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m:216-245"
    },
    "2263": {
        "file_id": 227,
        "content": "Code handles kicking action of a bird model by transforming the input value into an angle and applying it to the container view's transformation for animation.",
        "type": "comment"
    },
    "2264": {
        "file_id": 227,
        "content": "        [UIView animateWithDuration:duration / 2.0f animations:^{\n            [self.containerView.layer setTransform:CATransform3DIdentity];\n        }completion:^(BOOL finished) {\n            //6. 强训踢完报告;\n            [theRT invoked:kKickSEL];\n        }];\n    }];\n    //7. 坚果踢出距离;\n    self.hitFoods = [self.delegate birdView_GetFoodOnHit:birdStart birdEnd:self.frame status:FoodStatus_Border];\n    if (ARRISOK(self.hitFoods)) {\n        [UIView animateWithDuration:duration animations:^{\n            for (UIView *foodView in self.hitFoods) {\n                [foodView setX:foodView.x + (cos(angle) * 30.0f)];\n                [foodView setY:foodView.y + (sin(angle) * 30.0f)];\n            }\n        }];\n    }\n}\n//MARK:===============================================================\n//MARK:                     < outputObserver >\n//MARK:===============================================================\n/**\n *  MARK:--------------------行为输出--------------------\n *  @version\n *      2023.06.23: 输出吃时: 立马就吃到,而不是等动画结束 (参考30041-记录2);\n */",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m:246-274"
    },
    "2265": {
        "file_id": 227,
        "content": "This code animates the container view to reset its transform and animates hit food views to move based on a specified angle. The delegate method birdView_GetFoodOnHit is called with specific parameters to retrieve the hit foods, and there's a note about modifying output behavior related to eating.",
        "type": "comment"
    },
    "2266": {
        "file_id": 227,
        "content": "-(void) outputObserver:(NSNotification*)notification{\n    if (notification && ISOK(notification.object, OutputModel.class)) {\n        //1. 取数据\n        OutputModel *model = (OutputModel*)notification.object;\n        //2. 吸吮反射 / 主动吃\n        if ([EAT_RDS isEqualToString:model.identify]) {\n            if (OutputObserverType_UseTime == model.type) {\n                model.useTime = 0.2f;\n            } else if (OutputObserverType_Front == model.type) {\n                //b. 吃前 => 行为动画;\n                [self eatAction:[model.data floatValue]];\n                //c. 吃后 => 世界变化 & 视觉 & 产生mv;\n                [self eatResult:[model.data floatValue]];\n            }else if(OutputObserverType_Back == model.type){}\n        }\n        //3. 扇翅膀反射\n        else if([FLY_RDS isEqualToString:model.identify]){\n            if (OutputObserverType_UseTime == model.type) {\n                model.useTime = 0.1f;\n            } else if (OutputObserverType_Front == model.type) {\n                //a. 飞前 => 行为动画;\n                NSLog(@\"飞前视觉%p:%@\",model,[NVHeUtil fly2Str:model.data.floatValue]);",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m:275-298"
    },
    "2267": {
        "file_id": 227,
        "content": "This code is processing notifications from a model object in an observer pattern. It handles different types of events related to eating and flying behaviors. If the event is for eating, it triggers corresponding actions like animations and world changes. For flying events, it updates the useTime property of the model based on the type of event.",
        "type": "comment"
    },
    "2268": {
        "file_id": 227,
        "content": "                [self flyAction:[model.data floatValue]];\n            }else if(OutputObserverType_Back == model.type){\n                //b. 飞后 => 视觉;\n                NSLog(@\"飞后视觉%p:%@\",model,[NVHeUtil fly2Str:model.data.floatValue]);\n                [self flyResult:[model.data floatValue]];\n            }\n        }\n        //4. 焦急反射\n        else if([ANXIOUS_RDS isEqualToString:model.identify]){\n            if (OutputObserverType_UseTime == model.type) {\n                model.useTime = 0;\n            } else {\n                //1. 小鸟焦急时_扇翅膀;\n                //[self see:[self.delegate birdView_GetPageView]];\n                //CGFloat data = (arc4random() % 8) / 8.0f;\n                //[AIReactorControl commitReactor:FLY_RDS datas:@[@(data)]];\n                //2. 190731由飞改为叫;\n                [theApp setTipLog:@\"叽叽喳喳叫一叫\"];\n            }\n        }\n        //3. 脚踢反射\n        else if([KICK_RDS isEqualToString:model.identify]){\n            if (OutputObserverType_UseTime == model.type) {\n                model.useTime = 0.1f;",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m:299-323"
    },
    "2269": {
        "file_id": 227,
        "content": "This code handles various types of animal reactions based on the model. It includes flying actions, visual results after flying, anxious reflexes (with different sub-actions like flapping wings and making sounds), and kicking reflexes. Each action is performed depending on the type and identify of the model.",
        "type": "comment"
    },
    "2270": {
        "file_id": 227,
        "content": "            } else if (OutputObserverType_Front == model.type) {\n                //a. 踢前 => 行为动画;\n                NSLog(@\"踢前视觉%p:%@\",model,[NVHeUtil fly2Str:model.data.floatValue]);\n                [self kickAction:model];\n            }else if(OutputObserverType_Back == model.type){\n                //b. 飞后 => 视觉;\n                NSLog(@\"踢后视觉%p:%@\",model,[NVHeUtil fly2Str:model.data.floatValue]);\n                [self see:[self.delegate birdView_GetPageView]];\n            }\n        }\n    }\n}\n-(void)setFrame:(CGRect)frame {\n    [super setFrame:frame];\n    [self.delegate birdView_SetFramed];\n}\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m:324-342"
    },
    "2271": {
        "file_id": 227,
        "content": "Code snippet checks the observer type for a bird and performs different actions based on it. If OutputObserverType_Front, it logs information about kicking animation and calls kickAction method. If OutputObserverType_Back, it logs information about flying view and calls see method with self.delegate's birdView_GetPageView as argument. The setFrame method sets the frame for the view and notifies delegate's birdView_SetFramed.",
        "type": "comment"
    },
    "2272": {
        "file_id": 228,
        "content": "/SMG_NothingIsAll/Demo/BirdLivePage/View/CarView.h",
        "type": "filepath"
    },
    "2273": {
        "file_id": 228,
        "content": "This code defines a CarView class that conforms to the CarViewDelegate protocol, allowing access to car running functionality and retrieving food data during loading.",
        "type": "summary"
    },
    "2274": {
        "file_id": 228,
        "content": "//\n//  CarView.h\n//  SMG_NothingIsAll\n//\n//  Created by jiaxiaogang on 2018/11/9.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import <UIKit/UIKit.h>\n@protocol CarViewDelegate <NSObject>\n-(BOOL) carView_CanRun;\n-(NSArray*) carView_GetFoodInLoad;  //获取在路上的坚果;\n@end\n@interface CarView : HEView\n@property (weak,nonatomic) id<CarViewDelegate> delegate;\n-(void) run;\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/CarView.h:1-23"
    },
    "2275": {
        "file_id": 228,
        "content": "This code defines a CarView class that conforms to the CarViewDelegate protocol, allowing access to car running functionality and retrieving food data during loading.",
        "type": "comment"
    },
    "2276": {
        "file_id": 229,
        "content": "/SMG_NothingIsAll/Demo/BirdLivePage/View/CarView.m",
        "type": "filepath"
    },
    "2277": {
        "file_id": 229,
        "content": "The code initializes a CarView, sets up animation for the car's running action, and checks/iterates through a \"foods\" array in Objective-C iOS development.",
        "type": "summary"
    },
    "2278": {
        "file_id": 229,
        "content": "//\n//  CarView.m\n//  SMG_NothingIsAll\n//\n//  Created by jiaxiaogang on 2018/11/9.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import \"CarView.h\"\n#import \"MASConstraint.h\"\n#import \"View+MASAdditions.h\"\n#import \"FoodView.h\"\n@interface CarView ()\n@property (strong,nonatomic) IBOutlet UIView *containerView;\n@end\n@implementation CarView\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initView];\n        [self initDisplay];\n    }\n    return self;\n}\n-(void) initView{\n    //self\n    [self setFrame:CGRectMake(ScreenWidth * 0.5f - 50, 0, 50, 150)];\n    [self setBackgroundColor:[UIColor clearColor]];\n    //containerView\n    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self.class) owner:self options:nil];\n    [self addSubview:self.containerView];\n    [self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.leading.mas_equalTo(self);\n        make.trailing.mas_equalTo(self);\n        make.top.mas_equalTo(self);\n        make.bottom.mas_equalTo(self);\n    }];\n}\n-(void) initDisplay{",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/CarView.m:1-47"
    },
    "2279": {
        "file_id": 229,
        "content": "This code is initializing the CarView by setting its frame and background color, loading the nib file, adding it as a subview, and configuring constraints for positioning. It also sets up view and display properties in the init method.",
        "type": "comment"
    },
    "2280": {
        "file_id": 229,
        "content": "}\n//MARK:===============================================================\n//MARK:                     < method >\n//MARK:===============================================================\n-(void) run{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(carView_CanRun)]) {\n        if ([self.delegate carView_CanRun]) {\n            //1. 行驶\n            [UIView animateWithDuration:2.0f delay:0 options:UIViewAnimationOptionCurveLinear animations:^{\n                self.x += ScreenWidth * 0.5f;\n            } completion:^(BOOL finished) {\n                self.x = -50;\n                [UIView animateWithDuration:2.0f delay:0 options:UIViewAnimationOptionCurveLinear animations:^{\n                    self.x += ScreenWidth * 0.5f;\n                } completion:^(BOOL finished) {\n                    [self run];\n                }];\n            }];\n            //2. 碾压\n            if ([self.delegate respondsToSelector:@selector(carView_GetFoodInLoad)]) {\n                NSArray *foods = [self.delegate carView_GetFoodInLoad];",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/CarView.m:49-71"
    },
    "2281": {
        "file_id": 229,
        "content": "This method represents a car view's running action. It first checks if the delegate responds to `carView_CanRun` selector and if true, animates the car's x-coordinate to move right by half of the screen width with 2 second duration. After that, it checks if the delegate responds to `carView_GetFoodInLoad` selector, and if so, calls the delegate method to get an array of foods. The code is written in Objective-C for iOS development.",
        "type": "comment"
    },
    "2282": {
        "file_id": 229,
        "content": "                if (ARRISOK(foods)) {\n                    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n                        for (FoodView *food in foods) {\n                            [food hit];\n                        }\n                    });\n                }\n            }\n        }\n    }\n}\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/CarView.m:72-84"
    },
    "2283": {
        "file_id": 229,
        "content": "This code checks if the \"foods\" array is valid, then schedules a dispatch_after on the main queue to iterate through each element in the \"foods\" array and calls the \"hit\" method on each food object.",
        "type": "comment"
    },
    "2284": {
        "file_id": 230,
        "content": "/SMG_NothingIsAll/Demo/BirdLivePage/View/FoodView.h",
        "type": "filepath"
    },
    "2285": {
        "file_id": 230,
        "content": "This code defines a class FoodView that inherits from HEView. It includes an enum FoodStatus, which represents different states of food like having skin or being edible. The class also has a property for the current status and a method hit() to handle the food when it is hit.",
        "type": "summary"
    },
    "2286": {
        "file_id": 230,
        "content": "//\n//  FoodView.h\n//  SMG_NothingIsAll\n//\n//  Created by jiaxiaogang on 2018/11/9.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import <UIKit/UIKit.h>\n/**\n *  MARK:--------------------FoodStatus--------------------\n */\ntypedef NS_ENUM(NSInteger, FoodStatus) {\n    FoodStatus_Border = 0,    //有皮\n    FoodStatus_Eat = 1,       //可吃\n    FoodStatus_Remove = 2,    //压烂\n};\n/**\n *  MARK:--------------------坚果类--------------------\n *  1. 汽车压一次消皮,压两次报废;\n */\n@interface FoodView : HEView\n@property (assign,nonatomic) FoodStatus status;\n//被撞击\n-(void) hit;\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/FoodView.h:1-32"
    },
    "2287": {
        "file_id": 230,
        "content": "This code defines a class FoodView that inherits from HEView. It includes an enum FoodStatus, which represents different states of food like having skin or being edible. The class also has a property for the current status and a method hit() to handle the food when it is hit.",
        "type": "comment"
    },
    "2288": {
        "file_id": 231,
        "content": "/SMG_NothingIsAll/Demo/BirdLivePage/View/FoodView.m",
        "type": "filepath"
    },
    "2289": {
        "file_id": 231,
        "content": "The code initializes a FoodView, sets its appearance and default status as border, loads a nib file, adds container view, applies constraints, and defines methods to update display and respond to hits.",
        "type": "summary"
    },
    "2290": {
        "file_id": 231,
        "content": "//\n//  FoodView.m\n//  SMG_NothingIsAll\n//\n//  Created by jiaxiaogang on 2018/11/9.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import \"FoodView.h\"\n#import \"MASConstraint.h\"\n#import \"View+MASAdditions.h\"\n@interface FoodView ()\n@property (strong,nonatomic) IBOutlet UIView *containerView;\n@end\n@implementation FoodView\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initView];\n        [self initData];\n        [self initDisplay];\n    }\n    return self;\n}\n-(void) initView{\n    //self\n    [self setFrame:CGRectMake(0, 50, 5, 5)];\n    [self.layer setCornerRadius:2.5f];\n    [self.layer setMasksToBounds:true];\n    [self.layer setBorderColor:[UIColor grayColor].CGColor];\n    [self setBackgroundColor:[UIColor greenColor]];\n    //containerView\n    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self.class) owner:self options:nil];\n    [self addSubview:self.containerView];\n    [self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.leading.mas_equalTo(self);\n        make.trailing.mas_equalTo(self);",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/FoodView.m:1-44"
    },
    "2291": {
        "file_id": 231,
        "content": "This code is initializing a FoodView, setting its frame, corner radius, and masking to bounds. It also sets the border color and background color to green. Additionally, it loads a nib file named after the class itself, adds the container view as a subview, and applies constraints to center the container view within the FoodView.",
        "type": "comment"
    },
    "2292": {
        "file_id": 231,
        "content": "        make.top.mas_equalTo(self);\n        make.bottom.mas_equalTo(self);\n    }];\n}\n-(void) initData{\n    self.status = FoodStatus_Border;\n}\n-(void) initDisplay{\n    [self refreshDisplay];\n}\n//MARK:===============================================================\n//MARK:                     < method >\n//MARK:===============================================================\n-(void) refreshDisplay{\n    if (self.status == FoodStatus_Border) {\n        [self.layer setBorderWidth:1];\n    }else if(self.status == FoodStatus_Eat){\n        [self.layer setBorderWidth:0];\n    }else if(self.status == FoodStatus_Remove){\n        [self removeFromSuperview];\n    }\n}\n-(void) hit{\n    self.status ++;\n    [self refreshDisplay];\n}\n-(void)setStatus:(FoodStatus)status {\n    _status = status;\n    [self refreshDisplay];\n}\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/FoodView.m:45-81"
    },
    "2293": {
        "file_id": 231,
        "content": "This code initializes a food view, sets its default status as border, and defines methods to update its display and respond to hits. The refreshDisplay method adjusts the view's border width based on its current status, and hit updates the status and refreshes the display accordingly. The setStatus method allows setting the status directly and triggers a refresh.",
        "type": "comment"
    },
    "2294": {
        "file_id": 232,
        "content": "/SMG_NothingIsAll/Demo/BirdLivePage/View/LightView.h",
        "type": "filepath"
    },
    "2295": {
        "file_id": 232,
        "content": "\"LightView.h\" is a header file for the LightView class, inheriting from HEView, in the SMG_NothingIsAll app. It defines a delegate protocol with a method to change the light view to green and properties for the delegate and current light color status.",
        "type": "summary"
    },
    "2296": {
        "file_id": 232,
        "content": "//\n//  LightView.h\n//  SMG_NothingIsAll\n//\n//  Created by jiaxiaogang on 2018/11/9.\n//  Copyright © 2018年 XiaoGang. All rights reserved.\n//\n#import <UIKit/UIKit.h>\n@protocol LightViewDelegate <NSObject>\n-(void) lightView_ChangeToGreen;\n@end\n@interface LightView : HEView\n@property (weak,nonatomic) id<LightViewDelegate> delegate;\n@property (assign,nonatomic) BOOL curLightIsGreen;\n@end",
        "type": "code",
        "location": "/SMG_NothingIsAll/Demo/BirdLivePage/View/LightView.h:1-22"
    },
    "2297": {
        "file_id": 232,
        "content": "\"LightView.h\" is a header file for the LightView class, inheriting from HEView, in the SMG_NothingIsAll app. It defines a delegate protocol with a method to change the light view to green and properties for the delegate and current light color status.",
        "type": "comment"
    },
    "2298": {
        "file_id": 233,
        "content": "/SMG_NothingIsAll/Demo/BirdLivePage/View/LightView.m",
        "type": "filepath"
    },
    "2299": {
        "file_id": 233,
        "content": "This code creates a light view controller in iOS, managing a green/red light display with a timer and delegate for color change notifications.",
        "type": "summary"
    }
}