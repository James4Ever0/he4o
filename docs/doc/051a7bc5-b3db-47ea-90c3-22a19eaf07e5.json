{
    "summary": "The code constructs an AINetAbsFoNode object, handles nested ranges, performs absolute matching, strengthens or creates new nodes, and returns the created abstract fact with related flags.",
    "details": [
        {
            "comment": "This code is creating an abstract node based on existing foNodes, supporting deltaTimes and considering whether the assFo and absFo are related. It also reuses contentPort strength from source assFo and checks if the assFo and absFo are already connected through conAbsIsRelate.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsFoManager/AIAbsFoManager.m\":0-29",
            "content": "//\n//  AINetAbs.m\n//  SMG_NothingIsAll\n//\n//  Created by iMac on 2018/5/30.\n//  Copyright \u00a9 2018\u5e74 XiaoGang. All rights reserved.\n//\n#import \"AIAbsFoManager.h\"\n#import \"AIMvFoManager.h\"\n#import \"AINetAbsFoUtils.h\"\n@implementation AIAbsFoManager\n/**\n *  MARK:--------------------\u5728foNode\u57fa\u7840\u4e0a\u6784\u5efa\u62bd\u8c61--------------------\n *  @params orderSames  : algNode\u7ec4\n *  \u6ce8: \u8f6c\u79fb: \u4ec5\u6982\u5ff5\u652f\u6301\u5185\u5b58\u7f51\u7edc\u5411\u786c\u76d8\u7f51\u7edc\u7684\u8f6c\u79fb,fo\u4e0d\u8fdb\u884c\u8f6c\u79fb;\n *\n *  @version\n *      2020.08.18: \u652f\u6301deltaTimes (\u62bd\u8c61\u65f6\u5e8f\u7684deltaTime\u5168\u90e8\u7531conFos\u5f97\u51fa,\u53c2\u8003:20201);\n *      2021.01.03: \u5224\u65adabs\u5df2\u5b58\u5728\u62bd\u8c61\u8282\u70b9\u65f6,\u52a0\u4e0aATDS\u7684\u5339\u914d\u5224\u65ad,\u56e0\u4e3a\u4e0d\u540c\u7c7b\u578b\u8282\u70b9\u4e0d\u5fc5\u53bb\u91cd (\u53c2\u80032120B-BUG2);\n *      2022.12.27: \u6784\u5efa\u62bd\u8c61fo\u65f6,\u4ece\u6e90assFo\u590d\u7528contentPort\u7684\u5f3a\u5ea6 (\u53c2\u80032722f-todo12);\n *      2023.03.28: \u5c06assFo\u548cabsFo\u662f\u5426\u672c\u6765\u5c31\u6709\u5173\u8054\u901a\u8fc7&conAbsIsRelate\u8fd4\u56de (\u53c2\u800329032-todo2.1);\n *  @result : notnull\n */\n-(AINetAbsFoNode*) create:(NSArray*)orderSames protoFo:(AIFoNodeBase*)protoFo assFo:(AIFoNodeBase*)assFo difStrong:(NSInteger)difStrong at:(NSString*)at ds:(NSString*)ds type:(AnalogyType)type conAbsIsRelate:(BOOL*)conAbsIsRelate{\n    //1. \u6570\u636e\u51c6\u5907\n    NSArray *conFos = @[protoFo,assFo];\n    if(!at) at = DefaultAlgsType;"
        },
        {
            "comment": "Checks if the input port with given header, algorithm type, data source, and type already exists in allAbsPorts array. If not found, creates a new AINetAbsFoNode object.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsFoManager/AIAbsFoManager.m\":30-53",
            "content": "    if(!ds) ds = DefaultDataSource;\n    orderSames = ARRTOOK(orderSames);\n    NSString *samesStr = [SMGUtils convertPointers2String:orderSames];\n    NSString *samesMd5 = STRTOOK([NSString md5:samesStr]);\n    //2. \u5224\u65adalgA.absPorts\u548cabsB.absPorts\u4e2d\u7684header,\u662f\u5426\u5df2\u5b58\u5728algSames\u7684\u62bd\u8c61\u8282\u70b9;\n    AINetAbsFoNode *findAbsNode = nil;\n    NSMutableArray *allAbsPorts = [[NSMutableArray alloc] init];\n    for (AIFoNodeBase *conItem in conFos) {\n        [allAbsPorts addObjectsFromArray:[AINetUtils absPorts_All:conItem]];\n    }\n    for (AIPort *port in allAbsPorts) {\n        if ([samesMd5 isEqualToString:port.header] && [port.target_p.algsType isEqualToString:at] && [port.target_p.dataSource isEqualToString:ds] && port.target_p.type == type) {\n            findAbsNode = [SMGUtils searchNode:port.target_p];\n            break;\n        }\n    }\n    //3. \u65e0\u5219\u521b\u5efa\n    BOOL isNew = false;\n    if (!findAbsNode) {\n        isNew = true;\n        findAbsNode = [[AINetAbsFoNode alloc] init];\n        findAbsNode.pointer = [SMGUtils createPointerForFo:kPN_FO_ABS_NODE at:at ds:ds type:type];"
        },
        {
            "comment": "This code segment collects order_ps and updates the reference ports for a concept node. It also checks if the node is new or already related, relates abstract and concrete nodes, extracts delta times, and stores the information. Finally, it runs tests 7 and 8 on the content_ps.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsFoManager/AIAbsFoManager.m\":55-79",
            "content": "        //3. \u6536\u96c6order_ps\n        [findAbsNode setContent_ps:orderSames getStrongBlock:^NSInteger(AIKVPointer *item_p) {\n            //4. \u590d\u7528\u7c7b\u6bd4orderSames\u7684assFo\u4e2d\u7684\u539fcontent\u5f3a\u5ea6 (\u53c2\u80032722f-todo12);\n            for (AIPort *port in assFo.contentPorts) {\n                if ([port.target_p isEqual:item_p]) return port.strong.value + 1;\n            }\n            return 1;\n        }];\n        //4. order_ps\u66f4\u65b0\u6982\u5ff5\u8282\u70b9\u5f15\u7528\u5e8f\u5217;\n        [AINetUtils insertRefPorts_AllFoNode:findAbsNode.pointer order_ps:findAbsNode.content_ps ps:findAbsNode.content_ps difStrong:difStrong];\n    }\n    //4. \u8282\u70b9\u975e\u65b0\u7684:absFo\u65e9\u5c31\u548cassFo\u6709\u5173\u8054,\u5426\u5219\u53cd\u4e4b (\u53c2\u800329032-todo2.1);\n    if (conAbsIsRelate) *conAbsIsRelate = !isNew;\n    //4. \u5177\u8c61\u8282\u70b9&\u62bd\u8c61\u8282\u70b9_\u5173\u8054 & \u5b58\u50a8;\n    [AINetUtils relateFoAbs:findAbsNode conNodes:conFos isNew:isNew];\n    //5. \u63d0\u53d6findAbsNode\u7684deltaTimes & \u5b58\u50a8;\n    findAbsNode.deltaTimes = [AINetAbsFoUtils getDeltaTimes:conFos absFo:findAbsNode];\n    [SMGUtils insertNode:findAbsNode];\n    [AITest test7:findAbsNode.content_ps type:type];\n    [AITest test8:findAbsNode.content_ps type:type];"
        },
        {
            "comment": "This code builds a unique \"fo\" (likely a struct or class) without duplicates based on input parameters such as the initial strength, data source, and whether the constructor and absolute are related. It performs prevention of duplicate \"fo\" structures for specific types and scenarios, considering inheritance from other \"fo\" structures if they have the same data source. The code has undergone various updates and improvements since April 2020.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsFoManager/AIAbsFoManager.m\":80-103",
            "content": "    return findAbsNode;\n}\n/**\n *  MARK:--------------------\u6784\u5efafo_\u9632\u91cd\u7248--------------------\n *  @callers : \u88ab\u5916\u7c7b\u6bd4\u6784\u5efa\u5668\u8c03\u7528;\n *  @\u529f\u80fd\u8bf4\u660e: 1. \u672a\u652f\u6301\u5185\u5b58\u53bb\u91cd;\n *  @param difStrong : \u6784\u5efafo\u7684\u88ab\u5f15\u7528\u521d\u59cb\u5f3a\u5ea6;\n *  _param ds : \u65b0\u6784\u5efa\u65f6\u4f20\u5165\u6307\u5b9ads,\u5c24\u5176\u662fGL\u7c7b\u578b\u65f6,\u4e00\u822c\u8981\u5c06value.dataSource\u4f20\u9012\u8fc7\u6765 (\u53c2\u800324019-\u6982\u5ff5\u90e8\u5206);\n *              \u975e\u65b0\u6784\u5efa\u65f6,\u53ef\u4f20nil,\u6b64\u65f6\u5c1d\u8bd5\u4ececonFos\u7ee7\u627f\u83b7\u53d6 (\u5982\u679c\u5b83\u4eec\u6709\u5171\u540c\u7684ds);\n *  @param outConAbsIsRelate : \u5c06con\u548cabs\u662f\u5426\u672c\u6765\u5c31\u6709\u5173\u8054\u8fd4\u56de (\u53c2\u800329032-todo2.1);\n *  @param noRepeatArea_ps : \u7ed3\u679c\u9632\u91cd\u8303\u56f4\n *  @version\n *      2020.04.26: \u53bb\u6389\u65f6\u5e8f\u7684\u5168\u5c40\u53bb\u91cd;\n *      2021.04.25: \u6253\u5f00\u9632\u91cd,\u4ec5\u5bf9content_ps\u9632\u91cd,\u4f46\u6ca1\u6709\u5bf9ds\u505a\u540c\u533a\u8981\u6c42\u5224\u65ad (\u53c2\u800323054-\u7591\u70b9);\n *      2021.04.25: \u628aThinkingUtils.createAbsFo_NoRepeat_General()\u642c\u81f3\u6b64\u5904;\n *      2021.04.28: \u4fee\u590d\u5f53content_ps\u4e3a\u7a7a\u65f6,\u4e0d\u6784\u5efa\u65b0\u65f6\u5e8f\u7684BUG (\u53c2\u800323057);\n *      2021.05.22: \u5bf9SP\u7c7b\u578b\u4ec5\u5728\u5f53\u65f6\u573a\u666f\u4e0b\u9632\u91cd (\u53c2\u80032307b-\u65b9\u68483);\n *      2021.05.23: \u5bf9GL\u7c7b\u578b\u4ec5\u5728\u5f53\u524d\u573a\u666f\u4e0b\u9632\u91cd (\u53c2\u800323081);\n *      2021.09.22: fo\u652f\u6301type\u9632\u91cd (\u53c2\u800324019);\n *      2021.09.23: fo\u652f\u6301\u4ececonFos\u4e2d\u7ee7\u627fds,\u5982\u679cconFos\u7684ds\u90fd\u76f8\u540c\u7684\u8bdd (\u53c2\u800324019-\u65f6\u5e8f\u90e8\u5206);\n *      2023.03.28: \u5c06\u4e24\u6761\u5177\u8c61\u4e0eabsFo\u7684indexDic\u6620\u5c04\u4f20\u8fc7\u6765 (\u7528\u4e8e\u7ee7\u627fsp\u548ceff) (\u53c2\u800329032-todo1);\n *      2023.03.28: \u652f\u6301\u5224\u65adass\u548cabs\u672c\u6765\u65e0\u5173\u8054\u65f6,\u7ee7\u627fass\u7684SPEFF (\u53c2\u800329032-todo2.1 & todo2.2);\n *      2023.03.28: \u5c06outConAbsIsRelate\u8fd4\u56de (\u56e0\u4e3a\u53ea\u6709Canset\u7c7b\u6bd4\u65f6\u624d\u66f4\u65b0EFF,\u9700\u8981\u8fd4\u56de\u8fd9\u4e2a\u503c\u5224\u65ad) (\u53c2\u800329032-todo2.4);"
        },
        {
            "comment": "This method creates an AINetAbsFoNode object without repeating any nodes. It first prepares the data, including the content_ps array, and determines if it's a nested range with SP-type. If so, it generates validPorts for each node in conFos using AINetUtils function absPorts_All.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsFoManager/AIAbsFoManager.m\":104-119",
            "content": " *  @status\n *      2021.04.25: \u6253\u5f00\u540e,gl\u7ecf\u9a8c\u5168\u4e3a0\u6761,\u6240\u4ee5\u5148\u5173\u6389,\u540e\u7eed\u6d4b\u8bd5\u6253\u5f00\u540e\u4e3a\u4ec0\u4e48\u4e3a0\u6761;\n */\n-(AINetAbsFoNode*) create_NoRepeat:(NSArray*)content_ps protoFo:(AIFoNodeBase*)protoFo assFo:(AIFoNodeBase*)assFo difStrong:(NSInteger)difStrong type:(AnalogyType)type protoIndexDic:(NSDictionary*)protoIndexDic assIndexDic:(NSDictionary*)assIndexDic outConAbsIsRelate:(BOOL*)outConAbsIsRelate noRepeatArea_ps:(NSArray*)noRepeatArea_ps{\n    //1. \u6570\u636e\u51c6\u5907\n    NSArray *conFos = @[protoFo,assFo];\n    NSString *at = DefaultAlgsType; //[AINetUtils getDSFromConNodes:conFos type:type];\n    NSString *ds = DefaultDataSource; //[AINetUtils getATFromConNodes:conFos type:type];\n    content_ps = ARRTOOK(content_ps);\n    AINetAbsFoNode *result = nil;\n    //2. \u9632\u91cd_SP\u7c7b\u578b\u65f6,\u5d4c\u5957\u8303\u56f4\u5185\u7edd\u5bf9\u5339\u914d;\n    if (type == ATSub || type == ATPlus || type == ATGreater || type == ATLess) {\n        NSMutableArray *validPorts = [[NSMutableArray alloc] init];\n        for (AIFoNodeBase *conItem in conFos) {\n            [validPorts addObjectsFromArray:[AINetUtils absPorts_All:conItem type:type]];"
        },
        {
            "comment": "In this section of code, if the type is not a repeat area, it performs an absolute matching for all content ports and sorts them. It also checks if the other type of node is related to the abstract node. If there's a match, it strengthens the relationship between the two nodes; otherwise, it constructs a new node.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsFoManager/AIAbsFoManager.m\":120-140",
            "content": "        }\n        result = [AINetIndexUtils getAbsoluteMatching_ValidPorts:validPorts sort_ps:content_ps except_ps:Nodes2Pits(conFos) at:at ds:ds type:type];\n    }else{\n        //3. \u9632\u91cd_\u5176\u5b83\u7c7b\u578b\u65f6,\u5168\u5c40\u7edd\u5bf9\u5339\u914d;\n        result = [AINetIndexUtils getAbsoluteMatching_ValidPs:content_ps sort_ps:content_ps except_ps:Nodes2Pits(conFos) noRepeatArea_ps:noRepeatArea_ps getRefPortsBlock:^NSArray *(AIKVPointer *item_p) {\n            AIAlgNodeBase *itemAlg = [SMGUtils searchNode:item_p];\n            return [AINetUtils refPorts_All4Alg:itemAlg];\n        } at:at ds:ds type:type];\n    }\n    //4. \u5728\u4e0b\u9762\u7684ifelse\u4e2d,\u5224\u65ad\u4e0b\u5177\u8c61\u548c\u62bd\u8c61\u65f6\u5e8f\u662f\u5426\u672c\u6765\u5c31\u6709\u5173\u8054 (\u53c2\u800329032-todo2.1);\n    BOOL conAbsIsRelate = false;\n    //5. \u6709\u5219\u52a0\u5f3a\u5173\u8054;\n    if (ISOK(result, AINetAbsFoNode.class)) {\n        conAbsIsRelate = [Ports2Pits(assFo.absPorts) containsObject:result.pointer];\n        [AINetUtils relateFoAbs:result conNodes:conFos isNew:false];\n        [AINetUtils insertRefPorts_AllFoNode:result.pointer order_ps:result.content_ps ps:result.content_ps];\n    }else{\n        //6. \u65e0\u5219\u65b0\u6784\u5efa;\n"
        },
        {
            "comment": "This code snippet is part of a method that creates an \"absFo\" (abstract fact) and performs several operations on it. It first creates the \"absFo\" with given parameters, then extends its \"SP\" (strength) based on a dictionary, updates the \"SP\" of another \"conFo\" (context fact) by referring to a second dictionary, stores index dictionaries for both \"conFo\" and \"assFo\", and finally returns the created \"absFo\" along with a flag indicating if it is related to the \"conFo\".",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsFoManager/AIAbsFoManager.m\":140-160",
            "content": "        result = [self create:content_ps protoFo:protoFo assFo:assFo difStrong:difStrong at:at ds:ds type:type conAbsIsRelate:&conAbsIsRelate];\n    }\n    //7. \u7ee7\u627fsp\u548ceff (\u53c2\u800329032-todo2.2);\n    if (!conAbsIsRelate) {\n        [AINetUtils extendSPByIndexDic:assIndexDic assFo:assFo absFo:result];\n    }\n    //8. \u628aprotoFo\u7ed9absFo\u7684SP+1 (\u53c2\u800329032-todo2.3);\n    [AINetUtils updateSPByIndexDic:protoIndexDic conFo:protoFo absFo:result];\n    //9. \u5b58\u4e0bconFo\u4e0eabsFo\u7684indexDic (\u53c2\u800329032-todo3);\n    [protoFo updateIndexDic:result indexDic:protoIndexDic];\n    [assFo updateIndexDic:result indexDic:assIndexDic];\n    //10. \u5c06\u7ed3\u679coutConAbsIsRelate\u548cabsFo\u8fd4\u56de;\n    if (outConAbsIsRelate) *outConAbsIsRelate = conAbsIsRelate;\n    return result;\n}\n@end"
        }
    ]
}