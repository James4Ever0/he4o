{
    "summary": "BirdView manages bird actions, animations, and user interactions. It handles collisions, updates states, notifications, food, and reactions based on model type. The code uses an observer pattern for processing notifications and events.",
    "details": [
        {
            "comment": "BirdView initializes view, data, and display. It sets background color to clear, loads nib named after itself, adds container view, and registers for a notification observer.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m\":0-47",
            "content": "//\n//  BirdView.m\n//  SMG_NothingIsAll\n//\n//  Created by jiaxiaogang on 2018/11/7.\n//  Copyright \u00a9 2018\u5e74 XiaoGang. All rights reserved.\n//\n#import \"BirdView.h\"\n#import \"FoodView.h\"\n#import \"AIReactorControl.h\"\n#import \"NVHeUtil.h\"\n@interface BirdView ()\n@property (strong,nonatomic) IBOutlet UIView *containerView;\n@property (weak, nonatomic) IBOutlet UILabel *titleLab;\n@end\n@implementation BirdView\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initView];\n        [self initData];\n        [self initDisplay];\n    }\n    return self;\n}\n-(void) initView{\n    //self\n    [self setBackgroundColor:[UIColor clearColor]];\n    [self setFrame:CGRectMake(100, 100, 30, 30)];\n    //containerView\n    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self.class) owner:self options:nil];\n    [self addSubview:self.containerView];\n    [self.containerView setFrame:CGRectMake(0, 0, 30, 30)];\n}\n-(void) initData{\n}\n-(void) initDisplay{\n    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(outputObserver:) name:kOutputObserver object:nil];"
        },
        {
            "comment": "This method performs a flying action for the bird view. It first checks the input value, converts it to a range of -180 to 180 degrees, and calculates the corresponding X and Y coordinates using trigonometry. The method then logs the angle and notifies the delegate that the fly animation has begun.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m\":48-79",
            "content": "}\n//MARK:===============================================================\n//MARK:                     < method >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u98de--------------------\n *  @version\n *      2023.05.20: \u6539\u4e3a\u7269\u7406\u4eff\u771f\u98de\u884c (\u4e3a\u4e86\u78b0\u649e\u68c0\u6d4b\u7528\u7269\u7406\u4eff\u771f\u66f4\u51c6\u786e,\u800c\u7528\u4e86\u540e\u98de\u884c\u5c31\u5fc5\u987b\u4e5f\u7528) (\u53c2\u800329096-\u95ee\u98982-\u53e6\u5916);\n *      2023.05.21: v2\u7269\u7406\u4eff\u771f: \"\u98de\u884c\u5361\u5faa\u73af,\u6728\u68d2\u6254\u4e0d\u5168\",\u6240\u4ee5\u5207\u56dev1 (\u53c2\u800329097);\n *      2023.06.24: \u98de\u8fc7\u575a\u679c\u68c0\u6d4b,\u4ea4\u628a\u7ed3\u679c\u5b58\u4e0b\u6765,\u4ee5\u4fbf\u89e6\u53d1\"\u5403\u884c\u4e3a\"\u540e\u5c06\u5176\u5403\u6389 (\u53c2\u800330041-\u8bb0\u5f553);\n */\n-(void) flyAction:(CGFloat)value {\n    [self flyActionV1:value];\n}\n-(void) flyActionV1:(CGFloat)value{\n    //1. \u6570\u636e\u68c0\u67e5\n    value = MAX(MIN(1, value), 0);\n    //2. \u5c06\u4ece\u5de6\u987a\u65f6\u9488: \"0\u81f31\",\u8f6c\u6362\u4e3a: \"-1\u81f31\";\n    CGFloat value_F1_1 = value * 2 - 1;\n    //3. \u5c06\"-1\u81f31\",\u8f6c\u4e3a: \"-180\u81f3180\u5ea6\";\n    CGFloat angle = value_F1_1 * M_PI;\n    //4. \u7528sin\u8ba1\u7b97\u5bf9\u8fb9Y,cos\u8ba1\u7b97\u90bb\u8fb9X;\n    NSLog(@\"fly >> %@ angle:%.0f\",[NVHeUtil getLightStr_Value:value algsType:FLY_RDS dataSource:@\"\"],value_F1_1 * 180);\n    CGFloat duration = 0.15f;\n    [self.delegate birdView_FlyAnimationBegin:duration];\n    CGRect birdStart = self.frame;"
        },
        {
            "comment": "1. Animate bird view with duration and angle for X and Y position changes.\n2. Call delegate method when animation finishes to check for collision.\n3. Check if the bird collided with a food item and trigger eat action if true.\n4. Report fly completion to the RT invoked.\n5. Update bird view with new page view after flying.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m\":80-107",
            "content": "    [UIView animateWithDuration:duration animations:^{\n        [self setX:self.x + (cos(angle) * 30.0f)];\n        [self setY:self.y + (sin(angle) * 30.0f)];\n    }completion:^(BOOL finished) {\n        //5. \u98de\u5b8c\u52a8\u753b\u65f6,\u8981\u8c03\u7528\u4e0b\u78b0\u649e\u68c0\u6d4b (\u56e0\u4e3aUIView\u52a8\u753b\u540e,\u4e0d\u4f1a\u7acb\u9a6c\u6267\u884cframe\u66f4\u65b0);\n        [self.delegate birdView_FlyAnimationFinish];\n        //5. \u98de\u540e\u4e0e\u575a\u679c\u78b0\u649e\u68c0\u6d4b (\u53c2\u800328172-todo2.2 & 30041-\u8bb0\u5f553);\n        self.hitFoods = [self.delegate birdView_GetFoodOnHit:birdStart birdEnd:self.frame status:FoodStatus_Eat];\n        if (ARRISOK(self.hitFoods)) {\n            //6. \u5982\u679c\u98de\u5230\u575a\u679c\u4e0a,\u5219\u89e6\u53d1\u5403\u6389 (\u53c2\u800328172-todo2.1);\n            [self touchMouth];\n        }\n        //7. \u5f3a\u8bad\u98de\u5b8c\u62a5\u544a;\n        [theRT invoked:kFlySEL];\n    }];\n}\n-(void) flyResult:(CGFloat)value{\n    //1. \u98de\u540e\u89c6\u89c9\n    [self see:[self.delegate birdView_GetPageView]];\n}\n-(void) see:(UIView*)view{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(birdView_GetSeeRect)]) {\n        //1. \u5c06\u89c6\u89c9\u8303\u56f4\u4e0b,\u7684\u89c6\u89c9\u4fe1\u606f\u8f93\u5165\u5927\u8111;\n        CGRect rect = [self.delegate birdView_GetSeeRect];\n        [AIInput commitView:self targetView:view rect:rect];"
        },
        {
            "comment": "This code defines several methods for controlling the bird's actions in a game. The `mouchOnClick:` method triggers the bird to open its mouth using `touchMouth` method. The `touchWing:` and `touchFoot:` methods allow the bird to flap its wings or kick its feet in different directions by calling the `commitReactor` method of `AIReactorControl`. These actions can be triggered through user interaction, indicating a potential gameplay mechanic for player control over the bird's movements.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m\":108-148",
            "content": "    }\n}\n//MARK:===============================================================\n//MARK:                     < onclick >\n//MARK:===============================================================\n- (IBAction)mouchOnClick:(id)sender {\n    DemoLog(@\"\u9e1f\u5634 \u5438\u542e\u53cd\u5c04\");\n    [self touchMouth];\n}\n//MARK:===============================================================\n//MARK:                     < \u6478\u53cd\u5c04 >\n//MARK:===============================================================\n//\u88ab\u52a8\u5403\n-(void) touchMouth{\n    //2. \u5403\n    [AIReactorControl commitReactor:EAT_RDS];\n}\n/**\n *  MARK:--------------------\u6478\u7fc5\u8180--------------------\n *  @param direction \u4ece\u5de6\u987a\u65f6\u9488,8\u4e2a\u65b9\u5411,\u5206\u522b\u4e3a0-7;\n */\n-(void) touchWing:(long)direction {\n    //1. \u98de\u524d\u89c6\u89c9\n    //[self see:[self.delegate birdView_GetPageView]];\n    //2. \u98de\u884c\n    float data = direction / 8.0f;\n    [AIReactorControl commitReactor:FLY_RDS datas:@[@(data)]];\n}\n/**\n *  MARK:--------------------\u6478\u811a--------------------\n *  @param direction \u4ece\u5de6\u987a\u65f6\u9488,8\u4e2a\u65b9\u5411,\u5206\u522b\u4e3a0-7;\n */\n-(void) touchFoot:(long)direction {\n    float data = direction / 8.0f;\n    [AIReactorControl commitReactor:KICK_RDS datas:@[@(data)]];"
        },
        {
            "comment": "This method is responsible for handling the \"hurt\" action in the game, increasing pain sensation and setting the text color of the title label to red before transitioning it back to white after 0.8 seconds. Additionally, it contains a dealloc method that removes the observer from the notification center when the object is deallocated, and an \"eatAction\" method that handles the eating animation by rotating the container view.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m\":149-181",
            "content": "}\n/**\n *  MARK:--------------------\u75db--------------------\n *  @version\n *      2021.01.25: \u52a0\u5927\u75db\u611f,\u5426\u5219\u4e0d\u75db\u4e0d\u75d2\u7684\u601d\u7ef4\u6ca1\u6d3b\u529b (\u4e4c\u9e26\u4e0dcare);\n *      2023.06.29: \u589e\u5f3a\u75db\u611f (\u53c2\u800330044-BUG1);\n */\n-(void) hurt{\n    DemoLog(@\"\u75db\u611f\");\n    [AIInput commitIMV:MVType_Hurt from:8.0f to:9.0f];\n    [self.titleLab setTextColor:UIColor.redColor];\n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.8 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n        [self.titleLab setTextColor:UIColor.whiteColor];\n    });\n}\n-(void) dealloc{\n    [[NSNotificationCenter defaultCenter] removeObserver:self];\n}\n/**\n *  MARK:--------------------\u5403--------------------\n *  @desc \u65e0\u8bba\u662f\u4e3b\u52a8\u5403,\u8fd8\u662f\u88ab\u52a8\u5403,\u90fd\u8981\u89c2\u5bdf\u4e0b\u5403\u524d\u7684\u89c6\u89c9,\u5403\u540e\u7684\u89c6\u89c9,\u4ee5\u53ca\u4ef7\u503c\u4e0a\u7684\u5f71\u54cd;\n *  @version\n *      2020.01.20: \u5403\u524d\u89c6\u89c9\u4ec5\u7531\u88ab\u52a8\u5403\u65f6\u6709,\u4e3a\u89e3\u51b3\u5916\u5c42\u6b7b\u5faa\u73af\u95ee\u9898 (\u53c2\u8003n18p5-BUG9);\n *      2023.03.11: \u5403\u4e0a\u4e86,\u4e0d\u4f1a\u7acb\u9a6c\u611f\u89c9\u9971,\u800c\u662f\u4e0d\u518d\u7ee7\u7eed\u66f4\u997f (\u53c2\u800328171-todo2);\n *      2023.06.24: \u89e6\u53d1\u5403\u540e,\u5403\u6389\u78b0\u649e\u5230\u7684\u575a\u679c (\u53c2\u800330041-\u8bb0\u5f553);\n */\n-(void) eatAction:(CGFloat)value{\n    //1. \u5403\u52a8\u4f5c\n    [UIView animateWithDuration:0.1f animations:^{\n        [self.containerView.layer setTransform:CATransform3DMakeRotation(M_PI_4 * 0.5f, 0, 0, 1)];"
        },
        {
            "comment": "Code snippet handles the animation and logic for a bird eating food. It checks if the bird has eaten any food, animates the bird's mouth movement, and updates the bird's state based on whether it has eaten or not.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m\":182-214",
            "content": "    }completion:^(BOOL finished) {\n        //2. \u5403\u5b8c\u52a8\u4f5c\n        [UIView animateWithDuration:0.1f animations:^{\n            [self.containerView.layer setTransform:CATransform3DIdentity];\n        }completion:^(BOOL finished) {\n            [theRT invoked:kEatSEL];\n        }];\n    }];\n}\n-(void) eatResult:(CGFloat)value{\n    //1. \u5634\u9644\u8fd1\u7684\u98df\u7269\n    self.hitFoods = ARRTOOK(self.hitFoods);\n    BOOL eated = false;\n    //2. \u5403\u6389UI (\u8ba1\u65f6\u5668\u89e6\u53d1,\u66f4\u997f\u65f6,\u53d1\u73b0\u6ca1\u575a\u679c\u5403,\u5e76\u4e0d\u80fd\u89e3\u51b3\u9965\u997f\u95ee\u9898,\u53c2\u8003:18084_todo1);\n    for (FoodView *foodView in self.hitFoods) {\n        //3. \u5403\u6389 (\u8ba9he\u4ee5\u5438\u542e\u53cd\u5c04\u7684\u65b9\u5f0f,\u53bb\u4e3b\u52a8\u5403;\u5e76\u5c06out\u5165\u7f51,\u4ee5\u62bd\u8c61\u51fa\"\u5403\"\u7684\u8282\u70b9;\u53c2\u8003n15p6-QT1)\n        if(foodView.status == FoodStatus_Eat){\n            eated = true;\n            [foodView removeFromSuperview];\n        }else if(foodView.status == FoodStatus_Border){\n            //b. \u4ea7\u751fHurtMindValue (\u575a\u679c\u5e26\u76ae\u65f6,\u4e0d\u4ec5\u5403\u4e0d\u5230,\u8fd8\u5f97\u5634\u75bc);\n            //[AIInput commitIMV:MVType_Hurt from:2.0f to:3.0f];\n        }\n    }\n    //3. \u5403\u5230 \u6216 \u6ca1\u5403\u5230 => \u7684\u5403\u540e\u89c6\u89c9 & waitEat\u6807\u8bb0;\n    if (eated){\n        //4. \u5403\u5b8c\u89c6\u89c9 (\u5176\u5b9e\u5565\u4e5f\u770b\u4e0d\u5230);\n        [self see:[self.delegate birdView_GetPageView]];\n        //5. \u4ef7\u503c\u53d8\u5316: \u5403\u4e0a\u4e86,\u4e0d\u4f1a\u7acb\u9a6c\u611f\u89c9\u9971,\u800c\u662f\u4e0d\u518d\u7ee7\u7eed\u66f4\u997f (\u53c2\u800328171-todo2);"
        },
        {
            "comment": "Code handles kicking action of a bird model by transforming the input value into an angle and applying it to the container view's transformation for animation.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m\":215-244",
            "content": "        DemoLog(@\"\u5403\u4e0a\u575a\u679c\u4e86\");\n        self.waitEat = false;\n    }else{\n        //3. \u6ca1\u575a\u679c\u53ef\u5403 (\u8ba1\u65f6\u5668\u89e6\u53d1,\u66f4\u997f\u65f6,\u53d1\u73b0\u6ca1\u575a\u679c\u5403,\u5e76\u4e0d\u80fd\u89e3\u51b3\u9965\u997f\u95ee\u9898,\u53c2\u8003:18084_todo1);\n    }\n}\n//MARK:===============================================================\n//MARK:                     < \u8e22 >\n//MARK:===============================================================\n-(void) kickAction:(OutputModel*)model{\n    //1. \u6570\u636e\u68c0\u67e5\n    CGFloat value = [model.data floatValue];\n    value = MAX(MIN(1, value), 0);\n    //2. \u5c06\u4ece\u5de6\u987a\u65f6\u9488: \"0\u81f31\",\u8f6c\u6362\u4e3a: \"-1\u81f31\";\n    CGFloat value_F1_1 = value * 2 - 1;\n    //3. \u5c06\"-1\u81f31\",\u8f6c\u4e3a: \"-180\u81f3180\u5ea6\";\n    CGFloat angle = value_F1_1 * M_PI;\n    //4. \u7528sin\u8ba1\u7b97\u5bf9\u8fb9Y,cos\u8ba1\u7b97\u90bb\u8fb9X;\n    NSLog(@\"kick >> %@ angle:%.0f\",[NVHeUtil getLightStr_Value:value algsType:KICK_RDS dataSource:@\"\"],value_F1_1 * 180);\n    CGFloat duration = model.useTime;\n    CGRect birdStart = self.frame;\n    //5. \u8e22\u52a8\u4f5c;\n    [UIView animateWithDuration:duration / 2.0f animations:^{\n        [self.containerView.layer setTransform:CATransform3DMakeRotation(M_PI_4 * 1.0f, 1, 0, 0)];\n    }completion:^(BOOL finished) {"
        },
        {
            "comment": "This code animates the container view to reset its transform and animates hit food views to move based on a specified angle. The delegate method birdView_GetFoodOnHit is called with specific parameters to retrieve the hit foods, and there's a note about modifying output behavior related to eating.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m\":245-273",
            "content": "        [UIView animateWithDuration:duration / 2.0f animations:^{\n            [self.containerView.layer setTransform:CATransform3DIdentity];\n        }completion:^(BOOL finished) {\n            //6. \u5f3a\u8bad\u8e22\u5b8c\u62a5\u544a;\n            [theRT invoked:kKickSEL];\n        }];\n    }];\n    //7. \u575a\u679c\u8e22\u51fa\u8ddd\u79bb;\n    self.hitFoods = [self.delegate birdView_GetFoodOnHit:birdStart birdEnd:self.frame status:FoodStatus_Border];\n    if (ARRISOK(self.hitFoods)) {\n        [UIView animateWithDuration:duration animations:^{\n            for (UIView *foodView in self.hitFoods) {\n                [foodView setX:foodView.x + (cos(angle) * 30.0f)];\n                [foodView setY:foodView.y + (sin(angle) * 30.0f)];\n            }\n        }];\n    }\n}\n//MARK:===============================================================\n//MARK:                     < outputObserver >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u884c\u4e3a\u8f93\u51fa--------------------\n *  @version\n *      2023.06.23: \u8f93\u51fa\u5403\u65f6: \u7acb\u9a6c\u5c31\u5403\u5230,\u800c\u4e0d\u662f\u7b49\u52a8\u753b\u7ed3\u675f (\u53c2\u800330041-\u8bb0\u5f552);\n */"
        },
        {
            "comment": "This code is processing notifications from a model object in an observer pattern. It handles different types of events related to eating and flying behaviors. If the event is for eating, it triggers corresponding actions like animations and world changes. For flying events, it updates the useTime property of the model based on the type of event.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m\":274-297",
            "content": "-(void) outputObserver:(NSNotification*)notification{\n    if (notification && ISOK(notification.object, OutputModel.class)) {\n        //1. \u53d6\u6570\u636e\n        OutputModel *model = (OutputModel*)notification.object;\n        //2. \u5438\u542e\u53cd\u5c04 / \u4e3b\u52a8\u5403\n        if ([EAT_RDS isEqualToString:model.identify]) {\n            if (OutputObserverType_UseTime == model.type) {\n                model.useTime = 0.2f;\n            } else if (OutputObserverType_Front == model.type) {\n                //b. \u5403\u524d => \u884c\u4e3a\u52a8\u753b;\n                [self eatAction:[model.data floatValue]];\n                //c. \u5403\u540e => \u4e16\u754c\u53d8\u5316 & \u89c6\u89c9 & \u4ea7\u751fmv;\n                [self eatResult:[model.data floatValue]];\n            }else if(OutputObserverType_Back == model.type){}\n        }\n        //3. \u6247\u7fc5\u8180\u53cd\u5c04\n        else if([FLY_RDS isEqualToString:model.identify]){\n            if (OutputObserverType_UseTime == model.type) {\n                model.useTime = 0.1f;\n            } else if (OutputObserverType_Front == model.type) {\n                //a. \u98de\u524d => \u884c\u4e3a\u52a8\u753b;\n                NSLog(@\"\u98de\u524d\u89c6\u89c9%p:%@\",model,[NVHeUtil fly2Str:model.data.floatValue]);"
        },
        {
            "comment": "This code handles various types of animal reactions based on the model. It includes flying actions, visual results after flying, anxious reflexes (with different sub-actions like flapping wings and making sounds), and kicking reflexes. Each action is performed depending on the type and identify of the model.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m\":298-322",
            "content": "                [self flyAction:[model.data floatValue]];\n            }else if(OutputObserverType_Back == model.type){\n                //b. \u98de\u540e => \u89c6\u89c9;\n                NSLog(@\"\u98de\u540e\u89c6\u89c9%p:%@\",model,[NVHeUtil fly2Str:model.data.floatValue]);\n                [self flyResult:[model.data floatValue]];\n            }\n        }\n        //4. \u7126\u6025\u53cd\u5c04\n        else if([ANXIOUS_RDS isEqualToString:model.identify]){\n            if (OutputObserverType_UseTime == model.type) {\n                model.useTime = 0;\n            } else {\n                //1. \u5c0f\u9e1f\u7126\u6025\u65f6_\u6247\u7fc5\u8180;\n                //[self see:[self.delegate birdView_GetPageView]];\n                //CGFloat data = (arc4random() % 8) / 8.0f;\n                //[AIReactorControl commitReactor:FLY_RDS datas:@[@(data)]];\n                //2. 190731\u7531\u98de\u6539\u4e3a\u53eb;\n                [theApp setTipLog:@\"\u53fd\u53fd\u55b3\u55b3\u53eb\u4e00\u53eb\"];\n            }\n        }\n        //3. \u811a\u8e22\u53cd\u5c04\n        else if([KICK_RDS isEqualToString:model.identify]){\n            if (OutputObserverType_UseTime == model.type) {\n                model.useTime = 0.1f;"
        },
        {
            "comment": "Code snippet checks the observer type for a bird and performs different actions based on it. If OutputObserverType_Front, it logs information about kicking animation and calls kickAction method. If OutputObserverType_Back, it logs information about flying view and calls see method with self.delegate's birdView_GetPageView as argument. The setFrame method sets the frame for the view and notifies delegate's birdView_SetFramed.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdLivePage/View/BirdView.m\":323-341",
            "content": "            } else if (OutputObserverType_Front == model.type) {\n                //a. \u8e22\u524d => \u884c\u4e3a\u52a8\u753b;\n                NSLog(@\"\u8e22\u524d\u89c6\u89c9%p:%@\",model,[NVHeUtil fly2Str:model.data.floatValue]);\n                [self kickAction:model];\n            }else if(OutputObserverType_Back == model.type){\n                //b. \u98de\u540e => \u89c6\u89c9;\n                NSLog(@\"\u8e22\u540e\u89c6\u89c9%p:%@\",model,[NVHeUtil fly2Str:model.data.floatValue]);\n                [self see:[self.delegate birdView_GetPageView]];\n            }\n        }\n    }\n}\n-(void)setFrame:(CGRect)frame {\n    [super setFrame:frame];\n    [self.delegate birdView_SetFramed];\n}\n@end"
        }
    ]
}