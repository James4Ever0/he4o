{
    "summary": "XGDebug is a debugging utility that tracks frame statistics, improves performance and crash prevention in the XGDebug library by filtering and printing results. It calculates statistics for XGDebugModel objects, displays summary stats, and removes matching weakRMPrefix models. The 'XGDebug' class includes debugging functions using blocks and conditional statements based on debug flag.",
    "details": [
        {
            "comment": "This code appears to be part of a debugging utility called XGDebug, which is implemented in the file \"XGDebug.m\". The class provides methods for adding records and managing an array of XGDebugModel objects, as well as tracking last operation timestamps, keys, write counts, and read counts. It also notes a previous change in the code to remove the use of line numbers for unique keys.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGDebug/XGDebug.m\":0-37",
            "content": "//\n//  XGDebug.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2022/4/23.\n//  Copyright \u00a9 2022\u5e74 XiaoGang. All rights reserved.\n//\n#import \"XGDebug.h\"\n#import \"XGDebugModel.h\"\n@interface XGDebug ()\n@property (assign, nonatomic) NSTimeInterval lastTime;\n@property (strong, nonatomic) NSString *lastKey;\n@property (strong, nonatomic) NSMutableArray *models;   //List<XGDebugModel>\n@property (assign, nonatomic) NSInteger lastWriteCount;\n@property (assign, nonatomic) NSInteger lastReadCount;\n@end\n@implementation XGDebug\nstatic XGDebug *_instance;\n+(XGDebug*) sharedInstance{\n    if (_instance == nil) _instance = [[XGDebug alloc] init];\n    return _instance;\n}\n//MARK:===============================================================\n//MARK:                     < IN >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u8ffd\u52a0\u4e00\u6761\u8bb0\u5f55--------------------\n *  @version\n *      2022.08.09: \u5e9f\u5f03line\u4ee3\u7801\u884c\u53f7,\u56e0\u4e3a\u5b83\u505a\u4e0d\u53c2\u4e0e\u5230key\u9632\u91cd,\u6240\u4ee5\u4e0d\u552f\u4e00,\u6240\u4ee5\u4e0d\u51c6\u4e14\u6ca1\u7528;\n *      2023.07.20: \u51e0\u6b21pointer being free was not allocated\u56e0\u4e3a\u591a\u7ebf\u7a0b\u628aString\u56de\u6536\u5bfc\u81f4\u95ea\u9000 (\u6539\u4e3a\u5168\u5728\u4e3b\u7ebf\u7a0b\u6267\u884c);"
        },
        {
            "comment": "This function takes a file name and suffix, splits the prefix and suffix, and then calls another function with these parameters. The code performs string manipulation on the prefix and suffix, prepares data for processing, and handles previous frame settlement by filtering an array of debug models based on the last key and time interval. It also accesses the last model from this filtered array.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGDebug/XGDebug.m\":38-61",
            "content": " */\n-(void) debugModuleWithFileName:(NSString*)fileName suffix:(NSString*)suffix {\n    fileName = STRTOOK(fileName);\n    NSString *prefix = SUBSTR2INDEX(fileName, fileName.length - 2);\n    [self debugModuleWithPrefix:prefix suffix:suffix];\n}\n-(void) debugModuleWithPrefix:(NSString*)prefix suffix:(NSString*)suffix {\n    __block NSString *weakPrefix = prefix;\n    __block NSString *weakSuffix = suffix;\n    //__block typeof(self) weakSelf = self;\n    dispatch_async(dispatch_get_main_queue(), ^{\n        //0. \u6570\u636e\u51c6\u5907;\n        weakPrefix = STRTOOK(weakPrefix);\n        NSString *key = STRISOK(weakSuffix) ? STRFORMAT(@\"%@ \u4ee3\u7801\u5757:%@\",weakPrefix,weakSuffix) : weakPrefix;\n        //1. \u4e0a\u5e27\u7ed3\u7b97;\n        NSTimeInterval now = [[NSDate date] timeIntervalSince1970] * 1000;\n        if (self.lastKey && self.lastTime > 0) {\n            //a. \u65e7\u6709model;\n            XGDebugModel *lastModel = ARR_INDEX([SMGUtils filterArr:self.models checkValid:^BOOL(XGDebugModel *item) {\n                return [item.key isEqualToString:self.lastKey];\n            }], 0);"
        },
        {
            "comment": "This code appears to be part of a debugger implementation. It maintains a list of models and tracks frame statistics, including the key, time spent, count, write count, and read count. The code also includes methods for debugging writes and reads, which increment the respective counters asynchronously on the main queue. The `models` method returns an array of models if it hasn't been initialized yet.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGDebug/XGDebug.m\":63-105",
            "content": "            //b. \u65e0\u5219\u65b0\u5efa;\n            if (!lastModel) {\n                lastModel = [[XGDebugModel alloc] init];\n                [self.models addObject:lastModel];\n            }\n            //c. \u7edf\u8ba1\u66f4\u65b0;\n            lastModel.key = self.lastKey;\n            lastModel.sumTime += now - self.lastTime;\n            lastModel.sumCount++;\n            lastModel.sumWriteCount += self.lastWriteCount;\n            lastModel.sumReadCount += self.lastReadCount;\n        }\n        //2. \u5f53\u524d\u5e27\u8bb0\u5f55;\n        self.lastKey = key;\n        self.lastTime = now;\n        self.lastWriteCount = 0;\n        self.lastReadCount = 0;\n    });\n}\n-(void) debugWrite{\n    dispatch_async(dispatch_get_main_queue(), ^{\n        self.lastWriteCount++;\n    });\n}\n-(void) debugRead{\n    dispatch_async(dispatch_get_main_queue(), ^{\n        self.lastReadCount++;\n    });\n}\n-(NSMutableArray *)models{\n    if (!_models) {\n        _models = [[NSMutableArray alloc] init];\n    }\n    return _models;\n}\n//MARK:===============================================================\n//MARK:                     < OUT >"
        },
        {
            "comment": "This code is a part of the XGDebug library, defining methods to get debug models and print results. It filters a collection of models based on a given prefix, and then prints the filtered results in the main thread. Changes were made to optimize performance and avoid crashes due to nested asynchronous operations.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGDebug/XGDebug.m\":106-132",
            "content": "//MARK:===============================================================\n/**\n *  MARK:--------------------\u6839\u636e\u524d\u8f8d\u53d6debugModels--------------------\n *  @desc \u7528\u4e8e\u83b7\u53d6\u7ed3\u679c\u8f93\u51fa;\n *  @version\n *      2023.12.25: \u53bb\u6389\u672c\u65b9\u6cd5\u5f02\u6b65\u4e3b\u7ebf\u7a0b: \u8fd9\u4e2a\u65b9\u6cd5\u53ea\u6709self.print()\u5728\u8c03\u7528,\u800cprint()\u672c\u6765\u5c31\u5728\u4e3b\u7ebf\u7a0b\u4e2d,\u8fd9\u91cc\u5c31\u4e0d\u8fdb\u4e3b\u7ebf\u7a0b\u4e86,\u4e0d\u7136\u95ea\u9000 (\u5e94\u8be5\u662f\u5d4c\u5957\u5f02\u6b65\u5bfc\u81f4\u7684,\u672a\u786e\u8ba4,\u4f46\u6539\u540e\u786e\u5b9e\u4e0d\u95ea\u4e86);\n *  @result notnull\n */\n-(NSArray*) getDebugModels:(NSString*)prefix {\n    prefix = STRTOOK(prefix);\n    return [SMGUtils filterArr:self.models checkValid:^BOOL(XGDebugModel *item) {\n        NSString *itemPrefix = [item.key substringWithRange:NSMakeRange(0, MIN(prefix.length, item.key.length))];\n        return [prefix isEqualToString:itemPrefix];\n    }];\n}\n/**\n *  MARK:--------------------\u6253\u5370\u7ed3\u679c--------------------\n *  @version\n *      2023.06.13: \u652f\u6301\u6253\u5370\u540e\u76f4\u63a5\u5c06\u7ed3\u679c\u5220\u9664,\u56e0\u4e3a\u4ee3\u7801\u5757debug\u5de5\u5177\u4ee5loopId\u62fc\u63a5key,\u8fd9models\u8d8a\u6765\u8d8a\u591a,\u6027\u80fd\u4f1a\u53d8\u5dee (\u53c2\u800330022-\u4f18\u53165);\n */\n-(void) print:(NSString*)prefix rmPrefix:(NSString*)rmPrefix {\n    __block NSString *weakPrefix = prefix;\n    __block NSString *weakRMPrefix = rmPrefix;\n    dispatch_async(dispatch_get_main_queue(), ^{\n        NSArray *debugModels = [self getDebugModels:weakPrefix];"
        },
        {
            "comment": "This code calculates the total counts and times for all XGDebugModel objects in debugModels array, then displays summary statistics. It also removes any matching weakRMPrefix models from self.models.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGDebug/XGDebug.m\":133-150",
            "content": "        if (!ARRISOK(debugModels)) return;\n        XGDebugModel *sum = [[XGDebugModel alloc] init];\n        for (XGDebugModel *model in debugModels) {\n            NSLog(@\"%@ \u8ba1\u6570:%ld \u5747\u8017:%.2f = \u603b\u8017:%.0f \u8bfb:%ld \u5199:%ld\",model.key,model.sumCount,model.sumTime / model.sumCount,model.sumTime,model.sumReadCount,model.sumWriteCount);\n            sum.sumCount += model.sumCount;\n            sum.sumTime += model.sumTime;\n            sum.sumReadCount += model.sumReadCount;\n            sum.sumWriteCount += model.sumWriteCount;\n        }\n        NSLog(@\"DEBUG\u5339\u914d => \u603b\u8ba1\u6570:%ld \u5747\u8017:%.2f = \u603b\u8017:%.0f \u8bfb:%ld \u5199:%ld\",sum.sumCount,sum.sumTime / sum.sumCount,sum.sumTime,sum.sumReadCount,sum.sumWriteCount);\n        //\u652f\u6301\u6253\u5370\u540e\u5c06\u7ed3\u679c\u5220\u9664;\n        if (STRISOK(weakRMPrefix)) {\n            NSArray *rmModels = [self getDebugModels:weakRMPrefix];\n            for (XGDebugModel *model in rmModels) {\n                [self.models removeObject:model];\n            }\n            //NSLog(@\"%@ -> \u6253\u5370\u6761\u6570:%ld \u5220\u9664\u6761\u6570:%lu \u8fd8\u5269\u6761\u6570: %lu\",weakRMPrefix,debugModels.count,rmModels.count,self.models.count);"
        },
        {
            "comment": "The code defines a class 'XGDebug' and its methods to handle debugging functions such as logging and displaying messages on the screen. It uses blocks and conditional statements to execute commands only if the debug flag is enabled.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGDebug/XGDebug.m\":151-155",
            "content": "        }\n    });\n}\n@end"
        }
    ]
}