{
    "summary": "The \"\u53cd\u601d\" method calculates reflection scores for protoCansets, updates various functions, and determines if the reflection passes or fails by comparing task percentages to a threshold value. It logs results using DebugE().",
    "details": [
        {
            "comment": "This code is for a public method called \"\u53cd\u601d\" (Reflection) in the TCRefrection class. It calculates the reflection score for a given set of protoCansets and demand by considering various factors such as similarity, spDic, laziness, etc. The method has gone through several changes and improvements since its initial implementation in July 2022.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCRefrection/TCRefrection.m\":0-28",
            "content": "//\n//  TCRefrection.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2022/8/23.\n//  Copyright \u00a9 2022\u5e74 XiaoGang. All rights reserved.\n//\n#import \"TCRefrection.h\"\n@implementation TCRefrection\n//MARK:===============================================================\n//MARK:                     < publicMethod >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u53cd\u601d--------------------\n *  @desc \u53cd\u601d\u8bc4\u5206 (\u672c\u65b9\u6cd5\u4e2d,\u6839\u636echeckCanset\u81ea\u8eab\u7684spDic,\u524d\u6bb5\u76f8\u4f3c\u5ea6,\u61d2\u503c\u7b49,\u5171\u540c\u7b97\u51fa\u7efc\u5408\u8bc4\u5206);\n *  _param protoCansets : \u6240\u5728\u7684\u6e90\u5019\u9009\u96c6 (\u539f\u59cbproto\u5019\u9009\u96c6);\n *  @param demand   : \u6240\u5728\u7684\u6e90demand;\n *  @version\n *      2022.07.16: \u5199S\u8bc4\u5206pk (\u53c2\u800327048-TODO3 & 27049-TODO4);\n *      2022.09.26: cansets\u7531\u53ef\u7528\u65b9\u6848\u5019\u9009\u96c6,\u6539\u6210\u539f\u59cb\u5019\u9009\u96c6 (\u53c2\u800327123-\u95ee\u98983-\u65b9\u6848);\n *      2022.09.26: \u5c06limit\u4fdd\u7559\u6700\u5c113\u6761 (\u56e0\u4e3a\u53d1\u751f\u4e86\u660e\u660e\u67091\u6761,\u53cd\u800c\u53ea\u9650\u9ad8\u6ca1\u9650\u4f4e,\u5bfc\u81f4\u88ab\u622a\u52690\u6761\u4e86\u7684\u95ee\u9898);\n *      2022.11.30: \u53cd\u601d\u4e0d\u9700\u8981\u8bc6\u522b,\u56e0\u4e3acansets\u90fd\u662f\u540c\u7ea7,\u6ca1\u6cd5\u590d\u7528indexDic\u7b49,\u5e76\u4e14\u76f8\u4f3c\u4e5f\u4e0d\u8868\u793a\u540c\u573a\u666f (\u800c\u73b0\u5728\u76f8\u4f3c\u7684\u62bd\u5177\u8c61\u5df2\u652f\u6301) (\u53c2\u800327211-todo2);\n *      2023.05.26: \u8ba1\u7b97canset\u7a33\u5b9a\u6027\u6539\u4e3a\u6709\u6548\u6027(sp\u6539\u4e3aeff\u5f97\u5206),\u56e0\u4e3acanset\u590d\u73b0\u7387\u4f4e,\u51e0\u4e4e\u5168\u662f0\u5206 (\u53c2\u80032909a-todo2);\n *      2023.05.26: BUG_\u4fee\u590d\u8ba1\u7b97cansetFenXianScore\u65f6,\u53d6cansetFo.cmvNode_p\u5bfc\u81f4\u600e\u4e48\u90fd\u7b97\u51fa\u6765\u662f0\u5206\u95ee\u9898;"
        },
        {
            "comment": "This code performs the following actions:\n1. Prepares data by updating the operation count for a filename, debugging, and retrieving two nodes (cansetFo and sceneFo) from a given set of inputs.\n2. Calculates the risk if the canset is deemed invalid by subtracting the effect score from 1.\n3. Displays log information with relevant data about the canset, cut index, front match value, and risk score.\n4. Computes the risk factor caused by a canset being invalid by multiplying the probability of it being ineffective (represented by 'nEffScore') with the scene's mv evaluation score.\n5. Calculates the score for the lazy segment (a segment after the cut index) by iterating over the remaining elements and assigning a \"lazy\" score to any that have 'isOut' set to true.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCRefrection/TCRefrection.m\":29-49",
            "content": " */\n+(BOOL) refrection:(AICansetModel*)checkCanset demand:(DemandModel*)demand{\n    //1. \u6570\u636e\u51c6\u5907;\n    [theTC updateOperCount:kFILENAME];\n    Debug();\n    AIFoNodeBase *cansetFo = [SMGUtils searchNode:checkCanset.cansetFo];\n    AIFoNodeBase *sceneFo = [SMGUtils searchNode:checkCanset.sceneFo];\n    //4. \u7b97\u51fa\u5982\u679ccanset\u65e0\u6548,\u4f1a\u5e26\u6765\u7684\u98ce\u9669;\n    CGFloat nEffScore = 1 - [TOUtils getEffectScore:sceneFo effectIndex:checkCanset.sceneTargetIndex solutionFo:checkCanset.cansetFo];\n    OFTitleLog(@\"TCRefrection\u53cd\u601d\", @\"\\n%@ CUT:%ld \u524d\u5339\u914d\u5ea6%.2f \u65e0\u6548\u7387:%.2f\",Pit2FStr(checkCanset.cansetFo),(long)checkCanset.cutIndex,checkCanset.frontMatchValue,nEffScore);\n    //5. \u7b97\u51fa\u56e0canset\u65e0\u6548,\u5e26\u6765\u7684\u98ce\u9669\u5206 = Eff\u4e3aN\u7684\u6982\u7387 x scene\u7684mv\u8bc4\u5206;\n    CGFloat canestFenXianScore = [AIScore score4MV:sceneFo.cmvNode_p ratio:nEffScore];\n    //7. \u7b97\u51fa\u540e\u6bb5\u7684\"\u61d2\"\u8bc4\u5206;\n    CGFloat lazyScore = 0;\n    for (NSInteger i = checkCanset.cutIndex + 1; i < cansetFo.count; i++) {\n        //8. \u904d\u5386\u540e\u534a\u6bb5\u4e2d\u7684\"isOut=true\"\u7684\u884c\u4e3a,\u5404\u6307\u5b9a\"\u61d2\"\u8bc4\u5206;\n        AIKVPointer *alg_p = ARR_INDEX(cansetFo.content_ps, i);\n        if (alg_p && alg_p.isOut) {"
        },
        {
            "comment": "This function calculates the reflection score by comparing the task score with the solution score and lazy score. If the sum of these scores is greater than zero, the result is considered to be true; otherwise, it's false. The function also logs the reflection evaluation result.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCRefrection/TCRefrection.m\":50-76",
            "content": "            lazyScore -= 0.5f;\n        }\n    }\n    //10. \u8ba1\u7b97\u89e3\u51b3\u4efb\u52a1\u5956\u52b1\u8bc4\u5206: \u53d6\u8d1f\u7684baseRDemand\u8bc4\u5206 (\u53c2\u800327057);\n    NSArray *rootDemands = [TOUtils getBaseDemands_AllDeep:demand];\n    rootDemands = [SMGUtils filterArr:rootDemands checkValid:^BOOL(id item) {\n        return ISOK(item, ReasonDemandModel.class);\n    }];\n    ReasonDemandModel *baseRDemand = ARR_INDEX_REVERSE(rootDemands, 0);\n    CGFloat demandJianLiScore = -[AIScore score4Demand:baseRDemand];\n    //11. S\u8bc4\u5206PK: pk\u901a\u8fc7 = \u4efb\u52a1\u8bc4\u5206 - \u65b9\u6848\u8bc4\u5206 - \u61d2\u8bc4\u5206 > 0;\n    //12. \u4e09\u4e2a\u8bc4\u5206\u90fd\u662f\u8d1f\u7684,\u6240\u4ee5\u516c\u5f0f\u4e3a\u4ee5\u4e0b (result = \u6536\u76ca(\u8d1f\u4efb\u52a1\u5206) + mv\u7684\u8d1f\u5206 + lazy\u7684\u8d1f\u5206 > 0);\n    CGFloat sumScore = demandJianLiScore + canestFenXianScore + lazyScore;\n    BOOL result = sumScore > 0;\n    NSLog(@\"\u53cd\u601d\u8bc4\u4ef7\u7ed3\u679c:%@\u901a\u8fc7 (\u89e3\u51b3\u4efb\u52a1\u5956\u52b1\u5206%.1f Canset\u98ce\u9669:%.2f \u61d2\u5206:%.1f = %.1f)\",result?@\"\u5df2\":@\"\u672a\",demandJianLiScore,canestFenXianScore,lazyScore,sumScore);\n    [AITest test21:result];\n    DebugE();\n    return result;\n}\n/**\n *  MARK:--------------------\u884c\u4e3a\u5316\u53cd\u601d--------------------\n *  @desc \u5bf9\u6bd4\u5f53\u524dfoModel\u80fd\u89e3\u51b3\u7684\u4efb\u52a1\u5206 \u4e0e \u5b50\u4efb\u52a1\u5e26\u6765\u7684\u6700\u4e25\u91cd\u8d1f\u5206 => \u5f97\u51fa\u53cd\u601d\u7ed3\u679c (\u53c2\u800330054-todo6);\n *  @version\n *      2023.07.14: \u5b50\u4efb\u52a1\u8bc4\u5206\u964d\u6743\u81f360%,\u4ee5\u589e\u5f3a\u8fde\u7eed\u884c\u4e3a\u5316\u610f\u613f (\u53c2\u80033005a-\u65b9\u68481);"
        },
        {
            "comment": "This code compares the demand score of a foModel and the most severe subDemand score, adjusts the subDemand score by 70%, and determines whether to pass the reflection based on their comparison.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCRefrection/TCRefrection.m\":77-103",
            "content": " */\n+(BOOL) actionRefrection:(TOFoModel*)baseFoModel {\n    //1. \u6839\u636efoModel\u5411\u4e0a\u627e\u51farDemand\u7684\u8bc4\u5206;\n    [theTC updateOperCount:kFILENAME];\n    Debug();\n    OSTitleLog(@\"\u884c\u4e3a\u5316\u524d \u53cd\u601d\u8bc4\u4ef7\");\n    ReasonDemandModel *baseRDemand = ARR_INDEX([TOUtils getBaseRDemands_AllDeep:baseFoModel], 0);\n    if (!baseRDemand) return true;\n    CGFloat demandScore = [AIScore score4Demand:baseRDemand];\n    //2. \u6839\u636efoModel\u5411\u4e0b\u53d6\u51fasubDemands\u7684\u8bc4\u5206 (\u53d6\u6700\u4e25\u91cd\u7684\u4e00\u6761subDemand\u5206);\n    CGFloat zuiYanZonSubDemandScore = 0;\n    NSString *zuiYanZonDemandTypeStr = @\"\";\n    for (DemandModel *item in baseFoModel.subDemands) {\n        CGFloat curSubScore = [AIScore score4Demand:item];\n        if (zuiYanZonSubDemandScore > curSubScore) {\n            zuiYanZonSubDemandScore = curSubScore;\n            zuiYanZonDemandTypeStr = ClassName2Str(item.algsType);\n        }\n    }\n    //2. \u5b50\u4efb\u52a1\u8bc4\u5206\u964d\u6743\u81f370% (\u53c2\u80033005a-\u65b9\u68481);\n    zuiYanZonSubDemandScore *= 0.7f;\n    //3. \u5bf9\u6bd4\u4e8c\u8005,\u5f97\u51fa\u53cd\u601d\u662f\u5426\u901a\u8fc7 (\u6700\u4e25\u91cd\u4e5f\u4e0d\u6bd4\u5f53\u524d\u91cd\u8981\u65f6,\u53cd\u601d\u901a\u8fc7) (\u53c2\u800330054-todo6);\n    BOOL result = zuiYanZonSubDemandScore > demandScore;\n    NSLog(@\"> \u6700\u4e25\u91cd\u5b50\u4efb\u52a1\u5206(%@"
        },
        {
            "comment": "This method compares the current task's percentage to a threshold value and returns either \"\u5df2\" (passed) or \"\u672a\" (failed) based on whether it exceeds that threshold. The result is then logged with additional information using DebugE().",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCRefrection/TCRefrection.m\":103-108",
            "content": "):%.2f > \u5f53\u524d\u4efb\u52a1\u5206(%@):%.2f =====> %@\u901a\u8fc7\",zuiYanZonDemandTypeStr,zuiYanZonSubDemandScore,ClassName2Str(baseRDemand.algsType),demandScore,result?@\"\u5df2\":@\"\u672a\");\n    DebugE();\n    return result;\n}\n@end"
        }
    ]
}