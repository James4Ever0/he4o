{
    "summary": "The code enhances UIView with properties and methods for easy frame manipulation, property/subview retrieval, and subview management. It also includes utilities for superview finding, coordinate conversion, and 2D distance calculations, including Euclidean distance between points.",
    "details": [
        {
            "comment": "This code extends the UIView class by adding properties and methods to manipulate its frame, allowing for easy access to and modification of x, y, width, and height values.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIView+Extension.m\":0-52",
            "content": "//\n//  UIView+Extension.m\n//  SMG_NothingIsAll\n//\n//  Created by jiaxiaogang on 2018/11/8.\n//  Copyright \u00a9 2018\u5e74 XiaoGang. All rights reserved.\n//\n#import \"UIView+Extension.h\"\n@implementation UIView (Extension)\n//MARK:===============================================================\n//MARK:                     < frame >\n//MARK:===============================================================\n- (CGFloat)x {\n    return self.frame.origin.x;\n}\n- (void)setX:(CGFloat)x {\n    CGRect frame = self.frame;\n    frame.origin.x = x;\n    self.frame = frame;\n}\n- (CGFloat)y {\n    return self.frame.origin.y;\n}\n- (void)setY:(CGFloat)y {\n    CGRect frame = self.frame;\n    frame.origin.y = y;\n    self.frame = frame;\n}\n- (CGFloat)width {\n    return self.frame.size.width;\n}\n- (void)setWidth:(CGFloat)width{\n    CGRect frame = self.frame;\n    frame.size.width = width;\n    self.frame = frame;\n}\n- (CGFloat)height {\n    return self.frame.size.height;\n}\n- (void)setHeight:(CGFloat)height {\n    CGRect frame = self.frame;\n    frame.size.height = height;\n    self.frame = frame;"
        },
        {
            "comment": "This code defines a UIView extension with methods for setting and getting the origin, size, and show properties of the view. The show properties are specifically used in animations to retrieve real-time display data. It also includes a method to get the presentation frame.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIView+Extension.m\":53-111",
            "content": "}\n- (CGPoint)origin {\n    return self.frame.origin;\n}\n- (void)setOrigin:(CGPoint)origin {\n    CGRect frame = self.frame;\n    frame.origin = origin;\n    self.frame = frame;\n}\n- (CGSize)size {\n    return self.frame.size;\n}\n- (void)setSize:(CGSize)size {\n    CGRect frame = self.frame;\n    frame.size = size;\n    self.frame = frame;\n}\n//MARK:===============================================================\n//MARK:                     < show (\u4e00\u822c\u7528\u4e8e\u52a8\u753b\u4e2d,\u53d6\u771f\u5b9e\u663e\u793a\u6570\u636e) >\n//MARK:===============================================================\n- (CGFloat)showX {\n    return self.showOrigin.x;\n}\n- (CGFloat)showY {\n    return self.showOrigin.y;\n}\n- (CGFloat)showW {\n    return self.showSize.width;\n}\n- (CGFloat)showH {\n    return self.showSize.height;\n}\n- (CGRect)showFrame {\n    if (ARRISOK(self.layer.animationKeys)) {\n        return self.layer.presentationLayer.frame;\n    }\n    return self.frame;\n}\n- (CGPoint) showOrigin{\n    return self.showFrame.origin;\n}\n-(CGSize) showSize{\n    return self.showFrame.size;\n}\n- (CGFloat)showMinX {\n    return self.showX;\n}"
        },
        {
            "comment": "This code defines methods for retrieving various properties related to a UIView, including its minimum and maximum coordinates. It also contains methods for collecting all subviews of a view or a specific class of subviews recursively.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIView+Extension.m\":113-151",
            "content": "- (CGFloat)showMinY {\n    return self.showY;\n}\n- (CGFloat)showMaxX {\n    return self.showX + self.showW;\n}\n- (CGFloat)showMaxY {\n    return self.showY + self.showH;\n}\n- (CGFloat)showCenX {\n    return self.showX + self.showW * 0.5f;\n}\n- (CGFloat)showCenY {\n    return self.showY + self.showH * 0.5f;\n}\n//MARK:===============================================================\n//MARK:                     < subView >\n//MARK:===============================================================\n-(NSMutableArray*) subViews_AllDeep{\n    NSMutableArray *arr = [[NSMutableArray alloc]init];\n    [self collectSubViews:arr withClass:[UIView class]];\n    return arr;\n}\n-(NSMutableArray*) subViews_AllDeepWithClass:(Class)aClass{\n    NSMutableArray *arr = [[NSMutableArray alloc]init];\n    [self collectSubViews:arr withClass:aClass];\n    return arr;\n}\n-(void) collectSubViews:(NSMutableArray*)arr withClass:(Class)aClass{\n    if (arr != nil && aClass != nil){\n        if ([self isKindOfClass:aClass]) {\n            [arr addObject:self];\n        }\n        if(self.subviews != nil){"
        },
        {
            "comment": "This code is part of a UIView extension that provides methods for retrieving all subviews within a specified rectangular area. The \"subViews_AllDeepWithRect:\" method collects all views recursively within the given rect, adds itself to an array if it falls within the rect, and iterates over its subviews to add their subviews to the array as well. The \"removeAllSubviews\" method removes all subviews from a superview by removing them one-by-one in reverse order.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIView+Extension.m\":152-184",
            "content": "            for (UIView *childView in self.subviews) {\n                [childView collectSubViews:arr withClass:aClass];\n            }\n        }\n    }\n}\n-(NSMutableArray*) subViews_AllDeepWithRect:(CGRect)rect{\n    NSMutableArray *arr = [[NSMutableArray alloc]init];\n    CGRect sRect = [UIView convertWorldRect:self];\n    if (CGRectGetMinX(sRect) >= CGRectGetMinX(rect) &&\n        CGRectGetMinY(sRect) >= CGRectGetMinY(rect) &&\n        CGRectGetMaxX(sRect) <= CGRectGetMaxX(rect) &&\n        CGRectGetMaxY(sRect) <= CGRectGetMaxY(rect)) {\n        [arr addObject:self];\n    }\n    if(self.subviews != nil){\n        for (UIView *childView in self.subviews) {\n            [arr addObjectsFromArray:[childView subViews_AllDeepWithRect:rect]];\n        }\n    }\n    return arr;\n}\n-(void)removeAllSubviews {\n    while (self.subviews.count) {\n        UIView *child = self.subviews.lastObject;\n        [child removeFromSuperview];\n    }\n}\n//MARK:===============================================================\n//MARK:                     < superView >"
        },
        {
            "comment": "This code defines a method that finds all superviews of the current view and adds them to an array if they belong to a specified class. It also provides two functions for converting coordinates: one to convert a given view's local coordinate system to its parent view's coordinate system, and another to convert a global point to a view's local coordinate system.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIView+Extension.m\":185-215",
            "content": "//MARK:===============================================================\n-(NSMutableArray*) superViews_AllDeepWithClass:(Class)aClass{\n    NSMutableArray *arr = [[NSMutableArray alloc]init];\n    UIView *curView = self;\n    while (curView.superview) {\n        if ([curView.superview isKindOfClass:aClass]) {\n            [arr addObject:curView.superview];\n        }\n        curView = curView.superview;\n    }\n    return arr;\n}\n//MARK:===============================================================\n//MARK:                     < convert\u5750\u6807 >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u8f6c\u6362\u4e16\u754c\u5750\u6807--------------------\n *  @result \u4e16\u754c\u5750\u6807 : NotNull\n */\n+(CGPoint) convertWorldPoint:(UIView*)selfView{\n    if(selfView && selfView.superview){\n        CGRect rect = [self convertWorldRect:selfView];\n        return CGPointMake(rect.origin.x + selfView.width / 2.0f, rect.origin.y + selfView.height / 2.0f);\n    }\n    return CGPointZero;\n}\n/**\n *  MARK:--------------------\u8f6c\u6362\u4e16\u754crect--------------------"
        },
        {
            "comment": "This code snippet provides methods for converting frame rectangles, calculating distances between views, and performing distance calculations in two dimensions. The `convertWorldRect` method takes a view and its superview to convert the view's frame rectangle to the window's coordinate system. The `distance` method calculates the distance between two views using the `distancePoint` method. This method takes both views as parameters, converts their world points to local coordinates, and returns the distance in pixels using the `distance4DP` method. Overall, this code aims to facilitate calculations related to view positions and distances within an app's user interface.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIView+Extension.m\":216-244",
            "content": " *  @version\n *      2021.09.07: \u52a8\u753b\u4e2d\u7684frame\u4e0d\u51c6\u786e,\u6539\u4e3a\u4ecelayer.presentationLayer\u53d6\u624d\u51c6\u786e;\n */\n+(CGRect) convertWorldRect:(UIView*)selfView{\n    if(selfView && selfView.superview){\n        return [selfView.superview convertRect:selfView.showFrame toView:theApp.window];\n    }\n    return CGRectZero;\n}\n//MARK:===============================================================\n//MARK:                     < distance >\n//MARK:===============================================================\n+(CGFloat) distance:(UIView*)selfView target:(UIView*)target{\n    return [self convertPoint2DP:[self distancePoint:selfView target:target]];\n}\n+(CGPoint) distancePoint:(UIView*)selfView target:(UIView*)target{\n    if (selfView && target) {\n        return [self distance4Point:[UIView convertWorldPoint:selfView] pointB:[UIView convertWorldPoint:target]];\n    }\n    return CGPointZero;\n}\n+(CGFloat) distance4DP:(CGPoint)pointA pointB:(CGPoint)pointB {\n    return [self convertPoint2DP:[self distance4Point:pointA pointB:pointB]];\n}\n+(CGPoint) distance4Point:(CGPoint)pointA pointB:(CGPoint)pointB {"
        },
        {
            "comment": "This code calculates the Euclidean distance between two points (pointA and pointB) and converts it to a device-independent pixel unit by dividing it with the screen scale.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIView+Extension.m\":245-257",
            "content": "    CGFloat distanceX = (pointB.x - pointA.x);\n    CGFloat distanceY = (pointB.y - pointA.y);\n    return CGPointMake(distanceX, distanceY);\n}\n//\u5c06point\u8ddd\u79bb\u8f6c\u6210dp\u8ddd\u79bb\n+(CGFloat) convertPoint2DP:(CGPoint)p {\n    CGFloat disFloat = sqrt(powf(p.x, 2) + powf(p.y, 2));\n    CGFloat distance = disFloat / [UIScreen mainScreen].scale;\n    return distance;\n}\n@end"
        }
    ]
}