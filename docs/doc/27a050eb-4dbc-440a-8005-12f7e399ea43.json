{
    "summary": "The `cur2Root` function in the `TOModelVision` class converts a current model to a sub-visualization log, retrieving and formatting values for ReasonDemandModel and TOModelBase classes. It returns the string representation of the model.",
    "details": [
        {
            "comment": "This code defines a function `cur2Root` in the class `TOModelVision`. It prepares data by creating an empty mutable string, initializes the current model as `single`, and then recursively retrieves values from each nested model until reaching the root model. The retrieved values are inserted at the beginning of the string with a specific format, and the string is also appended with additional characters at the beginning and end.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOModelVision/TOModelVision.m\":0-37",
            "content": "//\n//  TOModelVision.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2021/5/11.\n//  Copyright \u00a9 2021\u5e74 XiaoGang. All rights reserved.\n//\n#import \"TOModelVision.h\"\n#import \"TOModelBase.h\"\n#import \"PerceptDemandModel.h\"\n#import \"ReasonDemandModel.h\"\n#import \"AIMatchFoModel.h\"\n#import \"TOModelVisionUtil.h\"\n#import \"UnorderItemModel.h\"\n@implementation TOModelVision\n+(NSString*) cur2Root:(TOModelBase*)curModel{\n    //1. \u6570\u636e\u51c6\u5907\n    NSMutableString *mStr = [[NSMutableString alloc] init];\n    TOModelBase *single = curModel;\n    //2. \u9012\u5f52\u53d6\u503c\n    while (single) {\n        NSString *singleStr = [self singleVision:single];\n        //3. \u5f53\u524d/base\u6709\u6548\u65f6,\u63d2\u5165\u9996\u90e8\u4e00\u884c;\n        if (STRISOK(singleStr)) {\n            if (STRISOK(mStr)) [mStr insertString:@\"\\n   \u2191\\n\" atIndex:0];\n            [mStr insertString:singleStr atIndex:0];\n        }\n        single = single.baseOrGroup;\n    }\n    //4. \u5934\u5c3e\n    [mStr insertString:@\"\\n\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\\n\" atIndex:0];\n    [mStr appendString:@\"\\n\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\\n\"];"
        },
        {
            "comment": "This function converts a current model to a sub-visualization log. It prepares the data, converts it to an unordered list of models, then for each unordered model, creates a line log with indentation and content, finally appending it to the result string. The result string is enclosed by special characters at the beginning and end.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOModelVision/TOModelVision.m\":38-68",
            "content": "    return mStr;\n}\n/**\n *  MARK:--------------------\u4ece\u5f53\u524d\u5230sub\u53ef\u89c6\u5316\u65e5\u5fd7--------------------\n *  @version\n *      2021.06.03: \u4fee\u590dsingleDesc\u4e3a\u7a7a\u65f6,appendString:nil,\u95ea\u9000\u7684\u95ee\u9898;\n */\n+(NSString*) cur2Sub:(TOModelBase*)curModel{\n    //1. \u6570\u636e\u51c6\u5907\n    NSMutableString *result = [[NSMutableString alloc] init];\n    //2. \u8f6c\u4e3a\u65e0\u5e8f\u5217\u8868\u6a21\u578b\n    NSMutableArray *unorderModels = [TOModelVisionUtil convertCur2Sub2UnorderModels:curModel];\n    //3. \u8f6c\u4e3alogStr\n    for (UnorderItemModel *unorder in unorderModels) {\n        //4. \u5c06unorderModel\u8f6c\u4e3aline\u65e5\u5fd7;\n        NSMutableString *line = [[NSMutableString alloc] init];\n        [line appendString:@\"\\n\"];//\u6362\u884c\n        for (int i = 0; i < unorder.tabNum; i++) [line appendString:@\"  \"];//\u7f29\u8fdb\n        [line appendString:STRFORMAT(@\"%@ \",[TOModelVisionUtil getUnorderPrefix:unorder.tabNum])];//\u65e0\u5e8f\u5217\u6807\n        [line appendString:STRTOOK([self singleVision:unorder.data])];//\u5185\u5bb9\n        //5. \u6536\u96c6line\n        [result appendString:line];\n    }\n    //6. \u5934\u5c3e\n    [result insertString:@\"\\n\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\ufe39\" atIndex:0];"
        },
        {
            "comment": "This function converts a model to a string representation, supporting both ReasonDemandModel and TOModelBase classes. It retrieves the content_p pointer from the input model and converts it to a string, including additional information about the model's class and status. The result is then returned as a formatted NSString.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOModelVision/TOModelVision.m\":69-95",
            "content": "    [result appendString:@\"\\n\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\ufe3a\\n\"];\n    return result;\n}\n/**\n *  MARK:--------------------\u5355model\u8f6cstr--------------------\n *  @version\n *      2021.06.01: \u652f\u6301ReasonDemandModel;\n *  @result notnull\n */\n+(NSString*) singleVision:(TOModelBase*)model{\n    //1. \u53d6content_p\n    AIKVPointer *content_p = nil;\n    if (ISOK(model, ReasonDemandModel.class)) {\n        ReasonDemandModel *rData = (ReasonDemandModel*)model;\n        content_p = rData.protoOrRegroupFo;\n    }else if(ISOK(model, TOModelBase.class)){\n        content_p = model.content_p;\n    }\n    //2. \u8f6c\u6210str\n    if (content_p) {\n        if (PitIsFo(content_p)) {\n            AIFoNodeBase *node = [SMGUtils searchNode:content_p];\n            return STRFORMAT(@\"%@: %@->%@ (%@ | %@)\",NSStringFromClass(model.class),Pit2FStr(content_p),Mvp2Str(node.cmvNode_p),content_p.typeStr,TOStatus2Str(model.status));\n        }else{\n            return STRFORMAT(@\"%@: %@ (%@ | %@)\",NSStringFromClass(model.class),Pit2FStr(content_p),content_p.typeStr,TOStatus2Str(model.status));"
        },
        {
            "comment": "If class is a subclass of model, return nil; otherwise, format string with NSStringFromClass.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOModelVision/TOModelVision.m\":96-103",
            "content": "        }\n    }else{\n        return STRFORMAT(@\"%@\",NSStringFromClass(model.class));\n    }\n}\n@end"
        }
    ]
}