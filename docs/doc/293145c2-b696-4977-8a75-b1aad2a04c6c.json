{
    "summary": "A UIViewController subclass with class properties and init method initializes the view, data, and display. The \"commitBtnOnClick\" handles button clicks and populates folderNames array based on moduleSegment selection. Code assigns parameters to AIKVPointer object for network submission, verifies nodes, marks them as valid/invalid, and closes window accordingly.",
    "details": [
        {
            "comment": "Class definition and properties for a UIViewController subclass, initializes view, data, and display in its init method.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/CustomAddNodeWindow.m\":0-42",
            "content": "//\n//  CustomAddNodeWindow.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2019/7/1.\n//  Copyright \u00a9 2019\u5e74 XiaoGang. All rights reserved.\n//\n#import \"CustomAddNodeWindow.h\"\n#import \"MASConstraint.h\"\n#import \"View+MASAdditions.h\"\n#import \"AIKVPointer.h\"\n#import \"ImvAlgsHungerModel.h\"\n#import \"ImvAlgsHurtModel.h\"\n@interface CustomAddNodeWindow ()\n@property (strong,nonatomic) IBOutlet UIView *containerView;\n@property (weak, nonatomic) IBOutlet UISegmentedControl *moduleSegment;\n@property (weak, nonatomic) IBOutlet UITextField *pointerIdTF;\n@property (weak, nonatomic) IBOutlet UITextField *algsTypeTF;\n@property (weak, nonatomic) IBOutlet UITextField *dataSourceTF;\n@end\n@implementation CustomAddNodeWindow\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initView];\n        [self initData];\n        [self initDisplay];\n    }\n    return self;\n}\n-(void) initView{\n    //self\n    float height = 380;\n    [self setFrame:CGRectMake((ScreenWidth - 300) / 2.0f, (ScreenHeight - height) / 2.0f,300, height)];\n    //containerView"
        },
        {
            "comment": "This code sets up a window with a container view, and initializes data and display. The \"commitBtnOnClick\" method is an action triggered when the commit button is clicked. Depending on the selected segment index in the moduleSegment, it populates the folderNames array with different values.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/CustomAddNodeWindow.m\":43-71",
            "content": "    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self.class) owner:self options:nil];\n    [self addSubview:self.containerView];\n    [self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.leading.mas_equalTo(self);\n        make.trailing.mas_equalTo(self);\n        make.top.mas_equalTo(self);\n        make.bottom.mas_equalTo(self);\n    }];\n}\n-(void) initData{\n}\n-(void) initDisplay{\n}\n//MARK:===============================================================\n//MARK:                     < onclick >\n//MARK:===============================================================\n- (IBAction)commitBtnOnClick:(id)sender {\n    //2. folderName\n    NSArray *folderNames = nil;\n    if (self.moduleSegment.selectedSegmentIndex == 0) {\n        folderNames = @[kPN_VALUE];\n    }else if (self.moduleSegment.selectedSegmentIndex == 1) {\n        folderNames = @[kPN_ALG_ABS_NODE,kPN_ALG_NODE];\n    }else if (self.moduleSegment.selectedSegmentIndex == 2) {\n        folderNames = @[kPN_FO_ABS_NODE,kPN_FRONT_ORDER_NODE];"
        },
        {
            "comment": "This code checks the selected segment index from a module and based on that, assigns folder names, algorithm types, pointer ID, and data source. It then creates an AIKVPointer object using these parameters and iterates through different combinations of outgoing and incoming pointers to submit the information to the network.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/CustomAddNodeWindow.m\":72-99",
            "content": "    }else if (self.moduleSegment.selectedSegmentIndex == 3) {\n        folderNames = @[kPN_ABS_CMV_NODE,kPN_CMV_NODE];\n    }\n    //3. pointerId\n    NSInteger pointerId = [STRTOOK(self.pointerIdTF.text) integerValue];\n    //6. algsType\n    NSArray *ats = nil;\n    if (STRISOK(self.algsTypeTF.text)) {\n        ats = @[self.algsTypeTF.text];\n    }else if (self.moduleSegment.selectedSegmentIndex == 3) {\n        ats = @[@\"ImvAlgsHungerModel\",@\"ImvAlgsHurtModel\"];\n    }else {\n        ats = @[DefaultAlgsType];\n    }\n    //7. dataSource\n    NSString *dataSource = STRISOK(self.dataSourceTF.text) ? self.dataSourceTF.text : DefaultDataSource;\n    //8. \u63d0\u4ea4\u5230\u7f51\u7edc\n    for (NSNumber *isOut in @[@(true),@(false)]) {\n        for (NSString *fn in folderNames) {\n            for (NSString *at in ats) {\n                AIKVPointer *node_p = [AIKVPointer newWithPointerId:pointerId\n                                                         folderName:fn\n                                                           algsType:at\n                                                         dataSource:dataSource"
        },
        {
            "comment": "100-128: This code verifies if a node exists, sets it as valid, and adds it to the network. If invalid, it closes the window.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/CustomAddNodeWindow.m\":100-128",
            "content": "                                                              isOut:isOut.boolValue\n                                                               type:ATDefault];\n                //9. \u9a8c\u8bc1\u662f\u5426\u5b58\u5728;\n                BOOL isValid = false;\n                if (PitIsValue(node_p)) {\n                    isValid = NUMISOK([AINetIndex getData:node_p]);//\u7a00\u758f\u7801\u8bfbvalue\u7c7b\u578b\n                }else{\n                    isValid = [SMGUtils searchNode:node_p];//\u8bfbnode\u7c7b\u578b\n                }\n                //11. \u8ffd\u52a0\u5230\u7f51;\n                if (isValid) {\n                    [theNV setNodeData:node_p];\n                    TPLog(@\"\u8ffd\u52a0\u8282\u70b9:%@\",Pit2FStr(node_p));\n                }\n            }\n        }\n    }\n    //9. \u5173\u95ed\u7a97\u53e3\n    [self removeFromSuperview];\n}\n- (IBAction)closeBtnOnClick:(id)sender {\n    [self removeFromSuperview];\n}\n@end"
        }
    ]
}