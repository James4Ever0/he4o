{
    "summary": "AINet is a network operations class providing indexing, model conversion, and data packaging. It references sequences, creates nodes, defines objects with specific parameters, and uses AIAlgNode for unique concept node creation while preventing duplicates.",
    "details": [
        {
            "comment": "AINet is a class that provides network operations and serves as an entry point for other parts of the system to call. It organizes various network functions and allows for indexing, converting algorithm models to pointer arrays, and handling data packaging.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.h\":0-31",
            "content": "//\n//  AINet.h\n//  SMG_NothingIsAll\n//\n//  Created by \u8d3e  on 2017/9/17.\n//  Copyright \u00a9 2017\u5e74 XiaoGang. All rights reserved.\n//\n#import <Foundation/Foundation.h>\n/**\n *  MARK:--------------------AINet\u9762\u677f--------------------\n *  @desc \u6574\u7406\u5404\u79cd\u7f51\u7edc\u64cd\u4f5c\u7684\u603b\u5165\u53e3,\u4f9b\u7cfb\u7edf\u522b\u5904\u8c03\u7528;\n *  @\u5173\u8054\u5f3a\u5ea6\n *      1. \u65b9\u5411\u7d22\u5f15: setMvNodeToDirectionReference:difStrong:\n */\n@class AIImvAlgsModel,AIPointer,AIKVPointer,AIPort,AIFrontOrderNode,AINetAbsFoNode,AIAbsCMVNode,AIAlgNode,AIAbsAlgNode,AIAlgNodeBase,AICMVNode;\n@interface AINet : NSObject\n+(AINet*) sharedInstance;\n//MARK:===============================================================\n//MARK:                     < index >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u7b97\u6cd5\u6a21\u578b\u7684\u88c5\u7bb1--------------------\n *  \u8f6c\u4e3a\u6307\u9488\u6570\u7ec4(\u6bcf\u4e2a\u503c\u90fd\u662f\u6307\u9488)(\u5728dataIn\u540e\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u88c5\u7bb1)\n *  @result notnull\n */\n-(NSMutableArray*) algModelConvert2Pointers:(NSDictionary*)modelDic algsType:(NSString*)algsType;\n-(AIKVPointer*) getNetDataPointerWithData:(NSNumber*)data algsType:(NSString*)algsType dataSource:(NSString*)dataSource isOut:(BOOL)isOut;//\u5355data\u88c5\u7bb1"
        },
        {
            "comment": "This code contains methods related to referencing sequences, creating CMV (Common Motion Vector) nodes, and creating CON (Connection) motion vector nodes. The `setNetReference` method is deprecated, while `getNetReference` retrieves the second sequence association for an algorithm's results. The `createCMVFo` and `createConMv` methods create CMV and CON nodes respectively.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.h\":34-58",
            "content": "//MARK:===============================================================\n//MARK:                     < reference >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u5f15\u7528\u5e8f\u5217--------------------\n *  @param indexPointer : value\u5730\u5740\n *  @param target_p : \u5f15\u7528\u8005\u5730\u5740(\u5982:xxNode.pointer)\n *\n *  \u6ce8:\n *  1. \u6682\u4e0d\u652f\u6301output;\n *  2. \u7531AINetUtils.insertRefPorts_AllMvNode()\u53d6\u4ee3\n */\n//-(void) setNetReference:(AIKVPointer*)value_p target_p:(AIKVPointer*)target_p difValue:(int)difValue;\n//\u83b7\u53d6\u7b97\u6cd5\u5355\u7ed3\u679c\u7684\u7b2c\u4e8c\u5e8f\u5217\u8054\u60f3;\n//-(NSArray*) getNetReference:(AIKVPointer*)pointer limit:(NSInteger)limit;\n//MARK:===============================================================\n//MARK:                     < cmv >\n//MARK:===============================================================\n-(AIFrontOrderNode*) createCMVFo:(NSTimeInterval)inputTime order:(NSArray*)order mv:(AICMVNodeBase*)mv;\n-(AICMVNodeBase*) createConMv:(NSArray*)imvAlgsArr;\n-(AICMVNodeBase*) createConMv:(AIKVPointer*)urgentTo_p delta_p:(AIKVPointer*)delta_p at:(NSString*)at;"
        },
        {
            "comment": "This code defines methods for creating AIFoNodeBase and AIFrontOrderNode objects, as well as an AIFrontOrderNode object with specific parameters. It also includes a method to create AIAbsFoNode object with additional parameters. Some methods are marked for not repeating certain elements or areas.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.h\":61-73",
            "content": "//MARK:===============================================================\n//MARK:                     < conFo >\n//MARK:===============================================================\n-(AIFrontOrderNode*) createConFo:(NSArray*)order;\n-(AIFoNodeBase*) createConFo_NoRepeat:(NSArray*)order;\n-(AIFoNodeBase*) createConFoForCanset:(NSArray*)order sceneFo:(AIFoNodeBase*)sceneFo sceneTargetIndex:(NSInteger)sceneTargetIndex;\n//MARK:===============================================================\n//MARK:                     < absFo >\n//MARK:===============================================================\n//-(AINetAbsFoNode*) createAbsFo_General:(NSArray*)conFos content_ps:(NSArray*)content_ps difStrong:(NSInteger)difStrong ds:(NSString*)ds;\n-(AINetAbsFoNode*) createAbsFo_NoRepeat:(NSArray*)content_ps protoFo:(AIFoNodeBase*)protoFo assFo:(AIFoNodeBase*)assFo difStrong:(NSInteger)difStrong type:(AnalogyType)type protoIndexDic:(NSDictionary*)protoIndexDic assIndexDic:(NSDictionary*)assIndexDic outConAbsIsRelate:(BOOL*)outConAbsIsRelate noRepeatArea_ps:(NSArray*)noRepeatArea_ps;"
        },
        {
            "comment": "This code defines methods for working with direction references and AINetOutputIndex. The getNetNodePointers method retrieves node pointers from a direction reference, while the setMvNodeToDirectionReference method sets a mvNode's direction reference strength. The getOutputIndex method retrieves an output index for an AIKVPointer.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.h\":75-95",
            "content": "//MARK:===============================================================\n//MARK:                     < directionReference >\n//MARK:===============================================================\n-(NSArray*) getNetNodePointersFromDirectionReference:(NSString*)mvAlgsType direction:(MVDirection)direction limit:(int)limit;\n-(NSArray*) getNetNodePointersFromDirectionReference:(NSString*)mvAlgsType direction:(MVDirection)direction filter:(NSArray*(^)(NSArray *protoArr))filter;\n/**\n *  MARK:--------------------mvNode\u7684\u65b9\u5411\u7d22\u5f15--------------------\n *  @param difStrong    : mv\u7684\u8feb\u5207\u5ea6\u8d8a\u9ad8,\u8d8a\u5f3a;\n *  @param cmvNode      : cmvNode\u6709\u53ef\u80fd\u8fd8\u5728create\u9636\u6bb5,\u672a\u5b58\u786c\u76d8,\u6240\u4ee5\u4e0d\u80fd\u4f20\u6307\u9488\u8fdb\u6765;\n *  @desc \u52a0\u5f3a\u5173\u8054\u5f3a\u5ea6;\n */\n-(void) setMvNodeToDirectionReference:(AICMVNodeBase*)cmvNode difStrong:(NSInteger)difStrong;\n//MARK:===============================================================\n//MARK:                     < AINetOutputIndex >\n//MARK:===============================================================\n//\u5c0f\u8111\u7d22\u5f15\n-(AIKVPointer*) getOutputIndex:(NSString*)algsType outputObj:(NSNumber*)outputObj;"
        },
        {
            "comment": "This code defines functions for creating abstract concept nodes and implementing global prevention of duplicate algorithms using AIAbsAlgNode instead of AIAlgNode. The functions take in parameters such as input values, constraint algorithms, and other necessary data to create the desired node with unique algorithms.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.h\":98-115",
            "content": "//MARK:===============================================================\n//MARK:                     < absCmv >\n//MARK:===============================================================\n-(AIAbsCMVNode*) createAbsCMVNode_Outside:(AIKVPointer*)absFo_p aMv_p:(AIKVPointer*)aMv_p bMv_p:(AIKVPointer*)bMv_p;\n//MARK:===============================================================\n//MARK:                     < algNode >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u6784\u5efa\u62bd\u8c61\u6982\u5ff5_\u9632\u91cd--------------------\n *  @desc \u8981\u505a\u5230\u5168\u5c40\u9632\u91cd,\u6240\u4ee5\u5e9f\u5f03\u5177\u8c61AIAlgNode,\u53ea\u4f7f\u7528AIAbsAlgNode;\n */\n-(AIAbsAlgNode*)createAbsAlg_NoRepeat:(NSArray*)value_ps conAlgs:(NSArray*)conAlgs;\n-(AIAbsAlgNode*)createAbsAlg_NoRepeat:(NSArray*)value_ps conAlgs:(NSArray*)conAlgs at:(NSString*)at type:(AnalogyType)type;\n-(AIAbsAlgNode*)createAbsAlg_NoRepeat:(NSArray*)value_ps conAlgs:(NSArray*)conAlgs at:(NSString*)at ds:(NSString*)ds type:(AnalogyType)type;\n-(AIAbsAlgNode*)createAbsAlg_NoRepeat:(NSArray*)value_ps conAlgs:(NSArray*)conAlgs isOut:(BOOL)isOut at:(NSString*)at type:(AnalogyType)type;"
        },
        {
            "comment": "Creates an AI algorithm node for building empty concepts, preventing duplicate creation.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.h\":116-123",
            "content": "-(AIAbsAlgNode*)createAbsAlg_NoRepeat:(NSArray*)value_ps conAlgs:(NSArray*)conAlgs isOut:(BOOL)isOut at:(NSString*)at ds:(NSString*)ds type:(AnalogyType)type;\n/**\n *  MARK:--------------------\u6784\u5efa\u7a7a\u6982\u5ff5_\u9632\u91cd (\u53c2\u800329031-todo1)--------------------\n */\n-(AIAlgNodeBase*)createEmptyAlg_NoRepeat:(NSArray*)conAlgs;\n@end"
        }
    ]
}