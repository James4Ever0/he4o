{
    "summary": "The code uses binary search for retrieving index sequences and converts them into sparse code pointers, supports V indices restrictions, and efficient memory management. It extracts value info and utilizes serialization in classes conforming to NSCoding protocol.",
    "details": [
        {
            "comment": "This method retrieves the data pointer for a specific data using a binary search. It first prepares the data and then searches for it using XGRedisUtil with a compare function to determine the result index. If found, returns the corresponding AIKVPointer, otherwise nil.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndex.m\":0-29",
            "content": "//\n//  AINetIndex.m\n//  SMG_NothingIsAll\n//\n//  Created by iMac on 2018/4/20.\n//  Copyright \u00a9 2018\u5e74 XiaoGang. All rights reserved.\n//\n#import \"AINetIndex.h\"\n#import \"PINCache.h\"\n#import \"XGRedisUtil.h\"\n@implementation AINetIndex\n//MARK:===============================================================\n//MARK:                     < method >\n//MARK:===============================================================\n+(AIKVPointer*) getDataPointerWithData:(NSNumber*)data algsType:(NSString*)algsType dataSource:(NSString*)dataSource isOut:(BOOL)isOut{\n    //1. \u6570\u636e\u51c6\u5907\n    if (!ISOK(data, NSNumber.class)) {\n        return nil;\n    }\n    //2. \u53d6\u7d22\u5f15\u5e8f\u5217 \u548c \u7a00\u758f\u7801\u503c\u5b57\u5178;\n    AINetIndexModel *model = [AINetIndexUtils searchIndexModel:algsType ds:dataSource isOut:isOut];\n    NSMutableDictionary *dataDic = [[NSMutableDictionary alloc] initWithDictionary:[AINetIndexUtils searchDataDic:algsType ds:dataSource isOut:isOut]];\n    //3. \u4f7f\u7528\u4e8c\u5206\u6cd5\u67e5\u627edata\n    __block AIKVPointer *resultPointer;\n    [XGRedisUtil searchIndexWithCompare:^NSComparisonResult(NSInteger checkIndex) {"
        },
        {
            "comment": "Creates a pointer for the given data source, type, and index. Checks if the pointer id matches the data value, returns comparison result. If not found, creates a new pointer with default values.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndex.m\":30-44",
            "content": "        NSNumber *checkPointerIdNumber = ARR_INDEX(model.pointerIds, checkIndex);\n        long checkPointerId = [NUMTOOK(checkPointerIdNumber) longValue];\n        AIKVPointer *checkValue_p = [SMGUtils createPointerForValue:checkPointerId algsType:algsType dataSource:dataSource isOut:isOut];\n        NSString *key = STRFORMAT(@\"%ld\",(long)checkValue_p.pointerId);\n        NSNumber *checkValue = [dataDic objectForKey:key];\n        NSComparisonResult compareResult = [NUMTOOK(checkValue) compare:data];\n        return compareResult;\n    } startIndex:0 endIndex:model.pointerIds.count - 1 success:^(NSInteger index) {\n        NSNumber *pointerIdNum = ARR_INDEX(model.pointerIds, index);\n        long pointerId = [NUMTOOK(pointerIdNum) longValue];\n        AIKVPointer *value_p = [SMGUtils createPointerForValue:pointerId algsType:algsType dataSource:dataSource isOut:isOut];\n        resultPointer = value_p;\n    } failure:^(NSInteger index) {\n        //4. \u672a\u627e\u5230;\u521b\u5efa\u4e00\u4e2a;\n        AIKVPointer *value_p = [SMGUtils createPointerForValue:algsType dataSource:dataSource isOut:isOut];"
        },
        {
            "comment": "The code adds and retrieves data from a dictionary with pointer IDs, using the `AINetIndexUtils` class for index operations. The `getData:` method retrieves a value from the dictionary based on the given pointer, while the main block of code adds data to the dictionary along with updating the pointer ID array in the `model` object and storing the changes using `AINetIndexUtils`.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndex.m\":45-72",
            "content": "        NSString *key = STRFORMAT(@\"%ld\",(long)value_p.pointerId);\n        [dataDic setObject:data forKey:key];\n        resultPointer = value_p;\n        if (model.pointerIds.count <= index) {\n            [model.pointerIds addObject:@(value_p.pointerId)];\n        }else{\n            [model.pointerIds insertObject:@(value_p.pointerId) atIndex:index];\n        }\n        //5. \u5b58\n        [AINetIndexUtils insertIndexModel:model isOut:isOut];\n        [AINetIndexUtils insertDataDic:dataDic at:algsType ds:dataSource isOut:isOut];\n    }];\n    return resultPointer;\n}\n/**\n *  MARK:--------------------\u83b7\u53d6\u7a00\u758f\u7801\u503c--------------------\n *  _param fromDataDic \u4e3a\u6027\u80fd\u597d,\u53ef\u63d0\u524d\u7f13\u5b58\u597ddataDic,\u4f20\u5165\u8fdb\u6765\u4fbf\u4e8e\u590d\u7528;\n */\n+(NSNumber*) getData:(AIKVPointer*)value_p{\n    return [self getData:value_p fromDataDic:nil];\n}\n+(NSNumber*) getData:(AIKVPointer*)value_p fromDataDic:(NSDictionary*)dataDic {\n    if (!DICISOK(dataDic)) dataDic = [AINetIndexUtils searchDataDic:value_p.algsType ds:value_p.dataSource isOut:value_p.isOut];\n    return [dataDic objectForKey:STRFORMAT(@\"%ld\",(long)value_p.pointerId)];"
        },
        {
            "comment": "This code defines a class method `getIndex_ps` that retrieves an index sequence and converts it into a sparse code pointer array. It also includes methods for getting the value range of an index sequence and obtaining information about the values. The code supports wide-to-narrow conversion, has restrictions on V indices, and returns only the first N narrow limit bars.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndex.m\":73-107",
            "content": "}\n/**\n *  MARK:--------------------\u83b7\u53d6\u7d22\u5f15\u5e8f\u5217--------------------\n *  @desc \u5c06\u7d22\u5f15\u5e8f\u5217\u8f6c\u4e3a\u7a00\u758f\u7801\u6307\u9488\u6570\u7ec4\u8fd4\u56de;\n *  @version\n *      2022.05.20: \u652f\u6301\u5bbd\u5165\u7a84\u51fa,\u4ec5\u8fd4\u56de\u524dNarrowLimit\u6761 (\u53c2\u800326073-TODO1);\n *      2022.05.21: V\u7d22\u5f15\u4e0d\u80fd\u592a\u7a84,\u6539\u62101000 (\u53c2\u800326075);\n *  @result notnull\n */\n+(NSArray*) getIndex_ps:(NSString*)at ds:(NSString*)ds isOut:(BOOL)isOut{\n    //1. \u53d6\u51fa\u7d22\u5f15\u5e8f\u5217;\n    AINetIndexModel *indexModel = [AINetIndexUtils searchIndexModel:at ds:ds isOut:isOut];\n    //2. \u8f6c\u4e3a\u7a00\u758f\u7801\u6307\u9488\u6570\u7ec4\u8fd4\u56de;\n    NSArray *nears = [SMGUtils convertArr:indexModel.pointerIds convertBlock:^id(NSNumber *obj) {\n        return [SMGUtils createPointerForValue:[NUMTOOK(obj) longValue] algsType:at dataSource:ds isOut:isOut];\n    }];\n    //3. \u7a84\u51fa,\u4ec5\u8fd4\u56de\u524dNarrowLimit\u6761;\n    return ARR_SUB(nears, 0, cIndexNarrowLimit);\n}\n/**\n *  MARK:--------------------\u83b7\u53d6\u67d0\u6807\u8bc6\u7d22\u5f15\u5e8f\u5217\u7684\u503c\u57df--------------------\n *  @desc \u83b7\u53d6\u7d22\u5f15\u5e8f\u5217\u7684\u503c\u57df (\u53c2\u800325082-\u516c\u5f0f1);\n *  @result \u503c\u57df\u4e0d\u4e3a\u8d1f\n */\n+(double) getIndexSpan:(NSString*)at ds:(NSString*)ds isOut:(BOOL)isOut {\n    AIValueInfo *info = [self getValueInfo:at ds:ds isOut:isOut];\n    return info.span;\n}\n/**\n *  MARK:--------------------\u83b7\u53d6\u503c\u7684\u4fe1\u606f--------------------"
        },
        {
            "comment": "This code retrieves the value info for a given address and dataset. It first checks if it is loop code, returning a specified number if so. Then, it retrieves the index model and data dictionary. It extracts minimum and maximum pointerIds to find corresponding sparse values and returns an AIValueInfo object with these values. If any of the values are not valid, it returns 0 as min/max value.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndex.m\":108-131",
            "content": " *  @result notnull;\n */\n+(AIValueInfo*) getValueInfo:(NSString*)at ds:(NSString*)ds isOut:(BOOL)isOut {\n    //0. \u5982\u679c\u662f\u5faa\u73af\u7801\u65f6,\u76f4\u63a5\u8fd4\u56de\u6307\u5b9a\u6570;\n    double maxLoopValue = [CortexAlgorithmsUtil maxOfLoopValue:at ds:ds];\n    if (maxLoopValue > 0) {\n        return [AIValueInfo newWithMin:0 max:maxLoopValue loop:true];\n    }\n    //1. \u53d6\u7d22\u5f15\u5e8f\u5217 & \u7a00\u758f\u7801\u503c\u5b57\u5178;\n    AINetIndexModel *model = [AINetIndexUtils searchIndexModel:at ds:ds isOut:isOut];\n    NSDictionary *dataDic = [AINetIndexUtils searchDataDic:at ds:ds isOut:isOut];\n    //2. \u53d6\u51fa\u6700\u5927\u6700\u5c0fpointerId;\n    long minPId = [NUMTOOK(ARR_INDEX(model.pointerIds, 0)) longValue];\n    long maxPId = [NUMTOOK(ARR_INDEX_REVERSE(model.pointerIds, 0)) longValue];\n    //3. \u53d6\u51fa\u6700\u5927\u6700\u5c0f\u7684\u7a00\u758f\u7801\u503c;\n    NSNumber *minData = [dataDic objectForKey:STRFORMAT(@\"%ld\",minPId)];\n    NSNumber *maxData = [dataDic objectForKey:STRFORMAT(@\"%ld\",maxPId)];\n    if (!NUMISOK(minData) || !NUMISOK(maxData)) {\n        return [AIValueInfo newWithMin:0 max:0 loop:false];\n    }\n    return [AIValueInfo newWithMin:minData.doubleValue max:maxData.doubleValue loop:false];"
        },
        {
            "comment": "This code snippet is for a class named AINetIndexModel, which seems to be related to AIKVPointer and AIKVReference objects. It has two methods: setIndexReference and getIndexReference, both of which are currently not implemented (commented out). The class also appears to have a data model (MemoryDataSortModel) associated with it.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndex.m\":132-155",
            "content": "}\n//MARK:===============================================================\n//MARK:                     < output >\n//MARK:===============================================================\n//\u6682\u65f6\u4e0d\u5b9e\u73b0\u5c0f\u8111\u7f51\u7edc;\n//-(void) setIndexReference:(AIKVPointer*)indexPointer target_p:(AIKVPointer*)target_p difValue:(int)difValue{\n//    //    [self.outReference setNodePointerToOutputReference:nil algsType:nil dataSource:nil difStrong:0];\n//    //    [outReference setReference:indexPointer target_p:target_p difValue:difValue];\n//}\n//-(NSArray*) getIndexReference:(AIKVPointer*)indexPointer limit:(NSInteger)limit{\n//    //    self.outReference getNodePointersFromOutputReference:algsType dataSource:dataSource limit:333333\n//    //    return [self.outReference getReference:indexPointer limit:limit];\n//    return nil;\n//}\n@end\n//MARK:===============================================================\n//MARK:                     < \u5185\u5b58DataSortModel (\u4e00\u7ec4index) >\n//MARK:===============================================================\n@implementation AINetIndexModel : NSObject"
        },
        {
            "comment": "This code defines a class that conforms to the NSCoding protocol, providing methods for initializing and encoding objects. The class has an array of pointer IDs, an algorithm type, and a data source. It uses NSMutableArray and NSCoder for efficient memory management and data serialization.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndex.m\":157-186",
            "content": "//MARK:===============================================================\n//MARK:                     < method >\n//MARK:===============================================================\n-(NSMutableArray *)pointerIds{\n    if (!ISOK(_pointerIds, NSMutableArray.class)) _pointerIds = [[NSMutableArray alloc] initWithArray:_pointerIds];\n    return _pointerIds;\n}\n/**\n *  MARK:--------------------NSCoding--------------------\n */\n- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder {\n    self = [super init];\n    if (self) {\n        self.pointerIds = [aDecoder decodeObjectForKey:@\"pointerIds\"];\n        self.algsType = [aDecoder decodeObjectForKey:@\"algsType\"];\n        self.dataSource = [aDecoder decodeObjectForKey:@\"dataSource\"];\n    }\n    return self;\n}\n- (void)encodeWithCoder:(NSCoder *)aCoder {\n    [aCoder encodeObject:[self.pointerIds copy] forKey:@\"pointerIds\"];\n    [aCoder encodeObject:self.algsType forKey:@\"algsType\"];\n    [aCoder encodeObject:self.dataSource forKey:@\"dataSource\"];\n}\n@end\n//MARK:==============================================================="
        },
        {
            "comment": "This code defines a class named AIValueInfo, which has properties for min, max, and loop values. It also provides methods to initialize an instance of this class with the given minimum, maximum, and loop parameters, as well as calculating the span (difference) between the maximum and minimum values.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndex.m\":187-203",
            "content": "//MARK:                     < \u7801\u57df\u4fe1\u606f >\n//MARK:===============================================================\n@implementation AIValueInfo : NSObject\n+(AIValueInfo*) newWithMin:(double)min max:(double)max loop:(BOOL)loop {\n    AIValueInfo *info = [[AIValueInfo alloc] init];\n    info.min = min;\n    info.max = max;\n    info.loop = loop;\n    return info;\n}\n-(double) span {\n    return self.max - self.min;\n}\n@end"
        }
    ]
}