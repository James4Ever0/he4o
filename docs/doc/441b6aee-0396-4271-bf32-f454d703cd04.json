{
    "summary": "ThinkingUtils class contains methods for CMV functionality and demand direction determination. getMvReferenceDirection constructs index direction, calculates value direction using delta, and parses algorithm results. Code defines a class with two methods: one checks if object responds to selector and is on main thread, returning true or false; the other runs block of code in main thread using GCD's dispatch_async function.",
    "details": [
        {
            "comment": "The code is part of the \"ThinkingUtils.m\" file in a project called SMG_NothingIsAll. It defines methods for ThinkingUtils, specifically focusing on CMV (Cross Model Validation) functionality. One method checks if an algorithm type is a subclass of ImvBadModel (indicating hunger or other negative feelings). Another method checks if there is a demand for going down (hunger increasing) based on the algorithm type and delta value. Similarly, there's a third method for detecting an upward demand (happiness decreasing) based on the same parameters.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/ThinkingUtils.m\":0-39",
            "content": "//\n//  ThinkingUtils.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2018/3/23.\n//  Copyright \u00a9 2018\u5e74 XiaoGang. All rights reserved.\n//\n#import \"ThinkingUtils.h\"\n#import \"ImvGoodModel.h\"\n#import \"ImvBadModel.h\"\n@implementation ThinkingUtils\n@end\n//MARK:===============================================================\n//MARK:                     < ThinkingUtils (CMV) >\n//MARK:===============================================================\n@implementation ThinkingUtils (CMV)\n+(BOOL) isBadWithAT:(NSString*)algsType{\n    algsType = STRTOOK(algsType);\n    if ([NSClassFromString(algsType) isSubclassOfClass:ImvBadModel.class]) {//\u9965\u997f\u611f\u7b49\n        return true;\n    }else if ([NSClassFromString(algsType) isSubclassOfClass:ImvGoodModel.class]) {//\u723d\u611f\u7b49;\n        return false;\n    }\n    return false;\n}\n//\u662f\u5426\u6709\u5411\u4e0b\u9700\u6c42 (\u76ee\u6807\u4e3a\u4e0b,\u4f46delta\u5374+) (\u997f\u611f\u4e0a\u5347)\n+(BOOL) havDownDemand:(NSString*)algsType delta:(NSInteger)delta {\n    BOOL isBad = [ThinkingUtils isBadWithAT:algsType];\n    return isBad && delta > 0;\n}\n//\u662f\u5426\u6709\u5411\u4e0a\u9700\u6c42 (\u76ee\u6807\u4e3a\u4e0a,\u4f46delta\u5374-) (\u5feb\u4e50\u4e0b\u964d)\n+(BOOL) havUpDemand:(NSString*)algsType delta:(NSInteger)delta {"
        },
        {
            "comment": "This code defines methods to check if there is any demand for a specific algorithm type. It also determines the direction of the demand based on whether it's increasing or decreasing. The getMvReferenceDirection method constructs an index direction based on delta values.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/ThinkingUtils.m\":40-69",
            "content": "    BOOL isGood = ![ThinkingUtils isBadWithAT:algsType];\n    return isGood && delta < 0;\n}\n//\u662f\u5426\u6709\u4efb\u610f\u9700\u6c42 (\u574f\u589e\u52a0 \u6216 \u597d\u51cf\u5c11);\n+(BOOL) havDemand:(NSString*)algsType delta:(NSInteger)delta{\n    return [self havDownDemand:algsType delta:delta] || [self havUpDemand:algsType delta:delta];\n}\n+(BOOL) havDemand:(AIKVPointer*)cmvNode_p{\n    if (!cmvNode_p) return false;\n    AICMVNodeBase *cmvNode = [SMGUtils searchNode:cmvNode_p];\n    NSInteger delta = [NUMTOOK([AINetIndex getData:cmvNode.delta_p]) integerValue];\n    return [self havDemand:cmvNode_p.algsType delta:delta];\n}\n+(MVDirection) getDemandDirection:(NSString*)algsType delta:(NSInteger)delta {\n    BOOL downDemand = [self havDownDemand:algsType delta:delta];\n    BOOL upDemand = [self havUpDemand:algsType delta:delta];\n    if (downDemand) {\n        return MVDirection_Negative;\n    }else if(upDemand){\n        return MVDirection_Positive;\n    }else{\n        return MVDirection_None;\n    }\n}\n//\u83b7\u53d6\u7d22\u5f15\u65b9\u5411 (\u6709\u4e86\u7d22\u5f15\u65b9\u5411\u540e,\u53ef\u4f9b\u76ee\u6807\u65b9\u5411\u53d6\u7528)\n+(MVDirection) getMvReferenceDirection:(NSInteger)delta {\n    //\u76ee\u524d\u7684\u7d22\u5f15\u5c31\u4ec5\u662f\u6309\u7167delta\u6b63\u8d1f\u6765\u6784\u5efa\u7684;"
        },
        {
            "comment": "This method calculates the direction of a value based on its delta, returning negative, positive, or none accordingly. The following block of code defines a parserAlgsMVArrWithoutValue method that takes an array of pointers and success block as input. It iterates through the pointers, assigning relevant values to delta_p, urgentTo_p, and algsType variables based on their dataSource property. Finally, it calls the success block with these variables if provided.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/ThinkingUtils.m\":70-102",
            "content": "    if (delta < 0) return MVDirection_Negative;\n    else if(delta > 0) return MVDirection_Positive;\n    else return MVDirection_None;\n}\n/**\n *  MARK:--------------------\u89e3\u6790algsMVArr--------------------\n *  cmvAlgsArr->mvValue\n */\n+(void) parserAlgsMVArrWithoutValue:(NSArray*)algsArr success:(void(^)(AIKVPointer *delta_p,AIKVPointer *urgentTo_p,NSString *algsType))success{\n    //1. \u6570\u636e\n    AIKVPointer *delta_p = nil;\n    AIKVPointer *urgentTo_p = 0;\n    NSString *algsType = DefaultAlgsType;\n    //2. \u6570\u636e\u68c0\u67e5\n    for (AIKVPointer *pointer in algsArr) {\n        if ([NSClassFromString(pointer.algsType) isSubclassOfClass:ImvAlgsModelBase.class]) {\n            if ([@\"delta\" isEqualToString:pointer.dataSource]) {\n                delta_p = pointer;\n            }else if ([@\"urgentTo\" isEqualToString:pointer.dataSource]) {\n                urgentTo_p = pointer;\n            }\n        }\n        algsType = pointer.algsType;\n    }\n    //3. \u903b\u8f91\u6267\u884c\n    if (success) success(delta_p,urgentTo_p,algsType);\n}\n//cmvAlgsArr->mvValue\n+(void) par"
        },
        {
            "comment": "This function parses an array of algorithm results and checks if any of them are subclasses of ImvAlgsModelBase. If so, it returns true. The code first transforms the format to integers from objects for delta and urgentTo, then calls a success block passing these values along with the algsType. This function is used to check if there are any inbound algorithm results.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/ThinkingUtils.m\":102-126",
            "content": "serAlgsMVArr:(NSArray*)algsArr success:(void(^)(AIKVPointer *delta_p,AIKVPointer *urgentTo_p,NSInteger delta,NSInteger urgentTo,NSString *algsType))success{\n    //1. \u89e3\u6790\n    [self parserAlgsMVArrWithoutValue:algsArr success:^(AIKVPointer *delta_p, AIKVPointer *urgentTo_p, NSString *algsType) {\n        //2. \u8f6c\u6362\u683c\u5f0f\n        NSInteger delta = [NUMTOOK([AINetIndex getData:delta_p]) integerValue];\n        NSInteger urgentTo = [NUMTOOK([AINetIndex getData:urgentTo_p]) integerValue];\n        //3. \u56de\u8c03\n        if (success) success(delta_p,urgentTo_p,delta,urgentTo,algsType);\n    }];\n}\n@end\n//MARK:===============================================================\n//MARK:                     < ThinkingUtils (In) >\n//MARK:===============================================================\n@implementation ThinkingUtils (In)\n+(BOOL) dataIn_CheckMV:(NSArray*)algResult_ps{\n    for (AIKVPointer *pointer in ARRTOOK(algResult_ps)) {\n        if ([NSClassFromString(pointer.algsType) isSubclassOfClass:ImvAlgsModelBase.class]) {\n            return true;"
        },
        {
            "comment": "This code defines a class with two methods. The first method is used to check if an object responds to a selector and is currently on the main thread, returning true or false accordingly. The second method allows running a block of code in the main thread by utilizing GCD's dispatch_async function.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/ThinkingUtils.m\":127-142",
            "content": "        }\n    }\n    return false;\n}\n/**\n *  MARK:--------------------\u5728\u4e3b\u7ebf\u7a0b\u8dd1act--------------------\n */\n+(void) runAtMainThread:(Act0)act {\n    __block Act0 weakAct = act;\n    dispatch_async(dispatch_get_main_queue(), ^{\n        weakAct();\n    });\n}\n@end"
        }
    ]
}