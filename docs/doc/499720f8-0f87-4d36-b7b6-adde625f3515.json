{
    "summary": "AINet.m is a singleton class in SMG_NothingIsAll codebase, utilizing dictionaries for model data conversion and defining methods related to nodes, network data pointers, output indexes, and algorithms management, while avoiding algorithm repetition using parameters. The 'createEmptyAlg_NoRepeat' method creates an empty algorithm node that does not repeat any of the provided connected algorithms in class 'AIAlgNodeManager'.",
    "details": [
        {
            "comment": "AINet.m is a file in the SMG_NothingIsAll codebase, containing an interface and implementation for the AINet class. The class has properties including a net index, mvFoManager, absFoManager, netDirectionReference, and absCmvManager. It also has a sharedInstance method.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.m\":0-41",
            "content": "//\n//  AINet.m\n//  SMG_NothingIsAll\n//\n//  Created by \u8d3e  on 2017/9/17.\n//  Copyright \u00a9 2017\u5e74 XiaoGang. All rights reserved.\n//\n#import \"AINet.h\"\n#import \"AIPointer.h\"\n#import \"AINetIndex.h\"\n#import \"AIMvFoManager.h\"\n#import \"AIPort.h\"\n#import \"AIAbsFoManager.h\"\n#import \"AINetDirectionReference.h\"\n#import \"AIAbsCMVManager.h\"\n#import \"AIAbsCMVNode.h\"\n#import \"AIKVPointer.h\"\n#import \"AIFrontOrderNode.h\"\n#import \"AINetUtils.h\"\n#import \"AIAlgNodeManager.h\"\n#import \"Output.h\"\n#import \"AIAlgNode.h\"\n#import \"NSString+Extension.h\"\n#import \"AIAbsAlgNode.h\"\n#import \"ThinkingUtils.h\"\n@interface AINet ()\n//@property (strong, nonatomic) AINetIndex *netIndex; //\u7d22\u5f15\u533a(\u76ae\u5c42/\u6d77\u9a6c)\n@property (strong, nonatomic) AIMvFoManager *mvFoManager;     //\u7f51\u7edc\u6811\u6839(\u674f\u4ec1\u6838)\n@property (strong, nonatomic) AIAbsFoManager *absFoManager; //\u62bd\u8c61\u65f6\u5e8f\u7ba1\u7406\u5668\n@property (strong, nonatomic) AINetDirectionReference *netDirectionReference;\n@property (strong, nonatomic) AIAbsCMVManager *absCmvManager;//\u62bd\u8c61mv\u7ba1\u7406\u5668;\n@end\n@implementation AINet\nstatic AINet *_instance;\n+(AINet*) sharedInstance{"
        },
        {
            "comment": "This code implements a singleton design pattern and initializes various managers and references. It also provides a method to convert model data into pointers using dictionary manipulation. The function prepares data, loops through the dictionary keys, stores indices and data, and converts them into pointers.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.m\":42-78",
            "content": "    if (_instance == nil) {\n        _instance = [[AINet alloc] init];\n    }\n    return _instance;\n}\n-(id) init{\n    self = [super init];\n    if (self) {\n        [self initData];\n    }\n    return self;\n}\n-(void) initData{\n    //self.netIndex = [[AINetIndex alloc] init];\n    self.mvFoManager = [[AIMvFoManager alloc] init];\n    self.absFoManager = [[AIAbsFoManager alloc] init];\n    self.netDirectionReference = [[AINetDirectionReference alloc] init];\n    self.absCmvManager = [[AIAbsCMVManager alloc] init];\n}\n//MARK:===============================================================\n//MARK:                     < index >\n//MARK:===============================================================\n-(NSMutableArray*) algModelConvert2Pointers:(NSDictionary*)modelDic algsType:(NSString*)algsType{\n    //1. \u6570\u636e\u51c6\u5907\n    NSMutableArray *algsArr = [[NSMutableArray alloc] init];\n    modelDic = DICTOOK(modelDic);\n    //2. \u5faa\u73af\u88c5\u7bb1\n    for (NSString *dataSource in modelDic.allKeys) {\n        //3. \u5b58\u50a8\u7d22\u5f15 & data;\n        NSNumber *data = NUMTOOK([modelDic objectForKey:dataSource]);"
        },
        {
            "comment": "Method returns an array of AIPointer objects based on the input data, algorithms type, and data source. It also provides a method to get a single data pointer and creates a CMV front order node. The code contains methods for getting network data pointers, output indexes, and creating CMV front order nodes.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.m\":79-105",
            "content": "        AIPointer *pointer = [AINetIndex getDataPointerWithData:data algsType:algsType dataSource:dataSource isOut:false];\n        if (pointer) {\n            [algsArr addObject:pointer];\n        }\n    }\n    return algsArr;\n}\n//\u5355data\u88c5\u7bb1\n-(AIKVPointer*) getNetDataPointerWithData:(NSNumber*)data algsType:(NSString*)algsType dataSource:(NSString*)dataSource isOut:(BOOL)isOut{\n    return [AINetIndex getDataPointerWithData:data algsType:algsType dataSource:dataSource isOut:isOut];\n}\n//\u5c0f\u8111\u7d22\u5f15\n-(AIKVPointer*) getOutputIndex:(NSString*)algsType outputObj:(NSNumber*)outputObj {\n    if (outputObj) {\n        return [AINetIndex getDataPointerWithData:outputObj algsType:algsType dataSource:DefaultDataSource isOut:true];\n    }\n    return nil;\n}\n//MARK:===============================================================\n//MARK:                     < cmv >\n//MARK:===============================================================\n-(AIFrontOrderNode*) createCMVFo:(NSTimeInterval)inputTime order:(NSArray*)order mv:(AICMVNodeBase*)mv{\n    return [self.mvFoManager create:inputTime order:order mv:mv];"
        },
        {
            "comment": "This code appears to define methods for creating various types of nodes, specifically CMV (conMv) and Fo (FrontOrder and FoBase) nodes. The createConFo method creates a FrontOrder node from an order array, while createConFo_NoRepeat creates one without repeating any nodes and createConFoForCanset creates one for a canSet with optional sceneFo and targetIndex parameters. The code uses the mvFoManager object to perform these creations.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.m\":106-135",
            "content": "}\n-(AICMVNodeBase*) createConMv:(NSArray*)imvAlgsArr{\n    return [self.mvFoManager createConMv:imvAlgsArr];\n}\n-(AICMVNodeBase*) createConMv:(AIKVPointer*)urgentTo_p delta_p:(AIKVPointer*)delta_p at:(NSString*)at {\n    return [self.mvFoManager createConMv:urgentTo_p delta_p:delta_p at:at];\n}\n//MARK:===============================================================\n//MARK:                     < conFo >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u6784\u5efaconFo--------------------\n *  @result notnull\n */\n-(AIFrontOrderNode*) createConFo:(NSArray*)order{\n    return [AIMvFoManager createConFo:order];\n}\n-(AIFoNodeBase*) createConFo_NoRepeat:(NSArray*)order{\n    return [AIMvFoManager createConFo_NoRepeat:order];\n}\n-(AIFoNodeBase*) createConFoForCanset:(NSArray*)order sceneFo:(AIFoNodeBase*)sceneFo sceneTargetIndex:(NSInteger)sceneTargetIndex {\n    return [AIMvFoManager createConFoForCanset:order sceneFo:sceneFo sceneTargetIndex:sceneTargetIndex];\n}\n//MARK:==============================================================="
        },
        {
            "comment": "This code defines a method `createAbsFo_NoRepeat` that creates an AINetAbsFoNode without repeating any content. It takes in several parameters including content_ps, protoFo, assFo, difStrong, type, protoIndexDic, assIndexDic, outConAbsIsRelate, and noRepeatArea_ps. The method calls `[self.absFoManager create_NoRepeat:content_ps protoFo:protoFo assFo:assFo difStrong:difStrong type:type protoIndexDic:protoIndexDic assIndexDic:assIndexDic outConAbsIsRelate:outConAbsIsRelate noRepeatArea_ps:noRepeatArea_ps]` to create the AINetAbsFoNode without repeating any content.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.m\":136-147",
            "content": "//MARK:                     < absFo >\n//MARK:===============================================================\n//-(AINetAbsFoNode*) createAbsFo_General:(NSArray*)conFos content_ps:(NSArray*)content_ps difStrong:(NSInteger)difStrong ds:(NSString*)ds{\n//    return [self.absFoManager create:conFos orderSames:content_ps difStrong:difStrong dsBlock:^NSString *{\n//        return ds;\n//    }];\n//}\n-(AINetAbsFoNode*) createAbsFo_NoRepeat:(NSArray*)content_ps protoFo:(AIFoNodeBase*)protoFo assFo:(AIFoNodeBase*)assFo difStrong:(NSInteger)difStrong type:(AnalogyType)type protoIndexDic:(NSDictionary*)protoIndexDic assIndexDic:(NSDictionary*)assIndexDic outConAbsIsRelate:(BOOL*)outConAbsIsRelate noRepeatArea_ps:(NSArray*)noRepeatArea_ps{\n    return [self.absFoManager create_NoRepeat:content_ps protoFo:protoFo assFo:assFo difStrong:difStrong type:type protoIndexDic:protoIndexDic assIndexDic:assIndexDic outConAbsIsRelate:outConAbsIsRelate noRepeatArea_ps:noRepeatArea_ps];\n}\n//MARK:==============================================================="
        },
        {
            "comment": "This code defines three methods for working with direction references in a network. One method retrieves net node pointers based on a given direction reference and limit, another allows filtering of the returned array using a block parameter, and the third sets an MV node's direction reference based on its delta and returns the corresponding MV direction index.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.m\":148-168",
            "content": "//MARK:                     < directionReference >\n//MARK:===============================================================\n-(NSArray*) getNetNodePointersFromDirectionReference:(NSString*)mvAlgsType direction:(MVDirection)direction limit:(int)limit {\n    return [self.netDirectionReference getNodePointersFromDirectionReference:mvAlgsType direction:direction limit:limit];\n}\n-(NSArray*) getNetNodePointersFromDirectionReference:(NSString*)mvAlgsType direction:(MVDirection)direction filter:(NSArray*(^)(NSArray *protoArr))filter{\n    return [self.netDirectionReference getNodePointersFromDirectionReference:mvAlgsType direction:direction filter:filter];\n}\n-(void) setMvNodeToDirectionReference:(AICMVNodeBase*)cmvNode difStrong:(NSInteger)difStrong {\n    //1. \u6570\u636e\u68c0\u67e5\n    if (cmvNode) {\n        //2. \u53d6\u65b9\u5411(delta\u7684\u6b63\u8d1f)\n        NSInteger delta = [NUMTOOK([AINetIndex getData:cmvNode.delta_p]) integerValue];\n        MVDirection direction = [ThinkingUtils getMvReferenceDirection:delta];\n        //3. \u53d6mv\u65b9\u5411\u7d22\u5f15;\n        AIKVPoint"
        },
        {
            "comment": "This code is part of the AINet module in a larger codebase. It involves creating pointers for directions, inserting reference ports for mvNode, and working with AIKVPointer and AIAlgNodeManager classes. The code also includes functions for creating AbsCMVNode, AbsAlgNode, and managing abstract concepts to prevent duplication.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.m\":168-192",
            "content": "er *mvReference_p = [SMGUtils createPointerForDirection:cmvNode.pointer.algsType direction:direction];\n        //4. \u5c06mvNode\u5730\u5740,\u63d2\u5165\u5230\u5f3a\u5ea6\u5e8f\u5217,\u5e76\u5b58\u50a8;\n        [AINetUtils insertRefPorts_AllMvNode:cmvNode value_p:mvReference_p difStrong:difStrong];\n    }\n}\n//MARK:===============================================================\n//MARK:                     < absCmv >\n//MARK:===============================================================\n-(AIAbsCMVNode*) createAbsCMVNode_Outside:(AIKVPointer*)absFo_p aMv_p:(AIKVPointer*)aMv_p bMv_p:(AIKVPointer*)bMv_p{\n    return [self.absCmvManager create:absFo_p aMv_p:aMv_p bMv_p:bMv_p];\n}\n//MARK:===============================================================\n//MARK:                     < algNode >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u6784\u5efa\u62bd\u8c61\u6982\u5ff5_\u9632\u91cd--------------------\n */\n-(AIAbsAlgNode*)createAbsAlg_NoRepeat:(NSArray*)value_ps conAlgs:(NSArray*)conAlgs {\n    return [AIAlgNodeManager createAbsAlg_NoRepeat:value_ps conAlgs:conAlgs at:nil ds:nil isOutBlock:nil type:ATDefault];"
        },
        {
            "comment": "This code defines various methods for creating an AIAbsAlgNode without repeating the same algorithm. The parameters include input values, related algorithms, specific position, optional data, and a flag for determining if it should be excluded from generation. These methods delegate the actual creation to AIAlgNodeManager.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.m\":193-206",
            "content": "}\n-(AIAbsAlgNode*)createAbsAlg_NoRepeat:(NSArray*)value_ps conAlgs:(NSArray*)conAlgs at:(NSString*)at type:(AnalogyType)type{\n    return [AIAlgNodeManager createAbsAlg_NoRepeat:value_ps conAlgs:conAlgs at:at ds:nil isOutBlock:nil type:type];\n}\n-(AIAbsAlgNode*)createAbsAlg_NoRepeat:(NSArray*)value_ps conAlgs:(NSArray*)conAlgs at:(NSString*)at ds:(NSString*)ds type:(AnalogyType)type{\n    return [AIAlgNodeManager createAbsAlg_NoRepeat:value_ps conAlgs:conAlgs at:at ds:ds isOutBlock:nil type:type];\n}\n-(AIAbsAlgNode*)createAbsAlg_NoRepeat:(NSArray*)value_ps conAlgs:(NSArray*)conAlgs isOut:(BOOL)isOut at:(NSString*)at type:(AnalogyType)type{\n    return [AIAlgNodeManager createAbsAlg_NoRepeat:value_ps conAlgs:conAlgs at:at ds:nil isOutBlock:^BOOL{\n        return isOut;\n    } type:type];\n}\n-(AIAbsAlgNode*)createAbsAlg_NoRepeat:(NSArray*)value_ps conAlgs:(NSArray*)conAlgs isOut:(BOOL)isOut at:(NSString*)at ds:(NSString*)ds type:(AnalogyType)type{\n    return [AIAlgNodeManager createAbsAlg_NoRepeat:value_ps conAlgs:conAlgs at:at ds:ds isOutBlock:^BOOL{"
        },
        {
            "comment": "Method 'createEmptyAlg_NoRepeat' in class 'AIAlgNodeManager' creates an empty algorithm node that does not repeat any of the provided connected algorithms.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINet.m\":207-218",
            "content": "        return isOut;\n    } type:type];\n}\n/**\n *  MARK:--------------------\u6784\u5efa\u7a7a\u6982\u5ff5_\u9632\u91cd (\u53c2\u800329031-todo1)--------------------\n */\n-(AIAlgNodeBase*)createEmptyAlg_NoRepeat:(NSArray*)conAlgs {\n    return [AIAlgNodeManager createEmptyAlg_NoRepeat:conAlgs];\n}\n@end"
        }
    ]
}