{
    "summary": "The ShortMatchManager class manages a fixed-size array of AIShortMatchModel objects, allowing retrieval of frames, sequences or match algorithms based on a boolean parameter. It initializes the array using a provided algorithm and includes methods to clear it.",
    "details": [
        {
            "comment": "This class, ShortMatchManager, manages a mutable array of AIShortMatchModel objects. It provides methods to add models, get the frame model at a specific index, and retrieve either short memory sequences or match algorithms depending on the given boolean parameter. The array size is limited to 4 objects if it exceeds that limit, it will be trimmed accordingly.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/Model/ShortMatchManager.m\":0-38",
            "content": "//\n//  ShortMatchManager.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2020/4/12.\n//  Copyright \u00a9 2020\u5e74 XiaoGang. All rights reserved.\n//\n#import \"ShortMatchManager.h\"\n@interface ShortMatchManager ()\n@property (strong, nonatomic) NSMutableArray *models;\n@end\n@implementation ShortMatchManager\n-(NSMutableArray*)models{\n    if (_models == nil) _models = [[NSMutableArray alloc] init];\n    return _models;\n}\n-(void) add:(AIShortMatchModel*)model{\n    if (model) [self.models addObject:model];\n    if (self.models.count > cShortMemoryLimit)\n        self.models = [[NSMutableArray alloc] initWithArray:ARR_SUB(self.models, self.models.count - cShortMemoryLimit, cShortMemoryLimit)];\n}\n-(AIShortMatchModel*) getFrameModel:(NSInteger)frameIndex {\n    NSArray *inModels = self.models;\n    return ARR_INDEX(inModels, frameIndex);\n}\n/**\n *  MARK:--------------------\u83b7\u53d6\u77ac\u65f6\u8bb0\u5fc6\u5e8f\u5217--------------------\n *  @param isMatch\n *      true : matchAlgs\u8fd4\u56de\u4ee5\u540e\u9010\u6b65\u66ff\u4ee3shortCache;\n *      false: protoAlgs(\u7531algsDic\u751f\u6210\u7684algNode_p)\u8fd4\u56de;\n *  @desc \u5b58\u6700\u591a4\u6761algNode_p;\n *  @version"
        },
        {
            "comment": "This code initializes a mutable array and iterates through each model in the provided models array. It then selects an algorithm based on a boolean isMatch flag: if isMatch, it prioritizes Match > Part > Proto; otherwise, it directly takes the proto algorithm. The selected algorithm pointer is added to the result array, unless the algorithm is null or has already been added. Finally, the function returns the resulting non-null array of AIShortMatchModel_Simple objects.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/Model/ShortMatchManager.m\":39-62",
            "content": " *      2019.01.23: \u5c06protoAlg\u6536\u96c6\u5230\u77ac\u65f6\u8bb0\u5fc6\u4e2d;\n *      xxxx.xx.xx: \u8f93\u5165\u6982\u5ff5\u8bc6\u522b\u6210\u529f\u65f6,\u52a0\u5165matchAlg;\n *      2020.06.26: \u8bc6\u522b\u5931\u8d25\u65f6,\u5c06protoAlg\u52a0\u5165 (\u4ee5\u907f\u514d,\u98de\u884c\u884c\u4e3a\u56e0\u4e0d\u88ab\u8bc6\u522b\u800c\u65e0\u6cd5\u52a0\u5165\u7684BUG);\n *      2020.08.17: \u5c06\u77ac\u65f6\u8bb0\u5fc6\u6574\u5408\u5230\u77ed\u65f6\u8bb0\u5fc6\u4e2d;\n *      2020.11.13: \u5f53isMatch=true\u65f6,Match\u4e3a\u7a7a\u65f6,\u53d6Part,\u6700\u540e\u518d\u53d6Proto (\u56e0\u4ee5\u5f80\u672a\u53d6Part,\u5bfc\u81f4\u6700\u521d\u8bad\u7ec3\u65f6\u7684\u65f6\u5e8f\u8bc6\u522b\u5931\u8d25) (\u53c2\u800321144);\n *  @result \u8fd4\u56deAIShortMatchModel_Simple\u6570\u7ec4 notnull;\n */\n-(NSMutableArray*) shortCache:(BOOL)isMatch{\n    //1. \u6570\u636e\u51c6\u5907\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    for (AIShortMatchModel *mModel in self.models) {\n        //2. \u9010\u4e2a\u53d6: isMatch=true\u65f6,\u53d6\u4f18\u5148\u7ea7\u4e3a(Match > Part > Proto) / isMatch=false\u65f6,\u76f4\u63a5\u53d6proto;\n        AIKVPointer *itemAlg_p;\n        if (isMatch) {\n            if (mModel.firstMatchAlg) {\n                itemAlg_p = mModel.firstMatchAlg.matchAlg;\n            }else if(ARRISOK(mModel.partAlgs)){\n                AIAlgNodeBase *firstPartAlg = ARR_INDEX(mModel.partAlgs, 0);\n                itemAlg_p = firstPartAlg.pointer;\n            }\n        }\n        if (!itemAlg_p) itemAlg_p = mModel.protoAlg.pointer;\n        //3. \u6709\u6548\u5219\u6536\u96c6;"
        },
        {
            "comment": "This code initializes an array of short match models using a provided algorithm, and returns it. It also provides a method to clear the array.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/Model/ShortMatchManager.m\":63-75",
            "content": "        if (itemAlg_p) {\n            AIShortMatchModel_Simple *simple = [AIShortMatchModel_Simple newWithAlg_p:itemAlg_p inputTime:mModel.inputTime isTimestamp:true];\n            [result addObject:simple];\n        }\n    }\n    return result;\n}\n-(void) clear{\n    [self.models removeAllObjects];\n}\n@end"
        }
    ]
}