{
    "summary": "This code allows manipulation of UIColor, offering darkening, conversions, random generation, and parsing. It also caches color names, handles invalid inputs, and provides CSS name-based RGB search functionality.",
    "details": [
        {
            "comment": "Code imports a header file and includes a comment thanking contributors, a list of requested features, and reference information about color space models. It also initializes a static cache for looked-up color names and provides a note about undocumented methods of UIColor.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":0-36",
            "content": "#import \"UIColor+Expanded.h\"\n/*\n Thanks to Poltras, Millenomi, Eridius, Nownot, WhatAHam, jberry,\n and everyone else who helped out but whose name is inadvertantly omitted\n */\n/*\n Current outstanding request list:\n - PolarBearFarm - color descriptions ([UIColor warmGrayWithHintOfBlueTouchOfRedAndSplashOfYellowColor])\n - Crayola color set\n - Eridius - UIColor needs a method that takes 2 colors and gives a third complementary one\n - Consider UIMutableColor that can be adjusted (brighter, cooler, warmer, thicker-alpha, etc)\n */\n/*\n FOR REFERENCE: Color Space Models: enum CGColorSpaceModel {\n kCGColorSpaceModelUnknown = -1,\n kCGColorSpaceModelMonochrome,\n kCGColorSpaceModelRGB,\n kCGColorSpaceModelCMYK,\n kCGColorSpaceModelLab,\n kCGColorSpaceModelDeviceN,\n kCGColorSpaceModelIndexed,\n kCGColorSpaceModelPattern\n };\n */\n// Static cache of looked up color names. Used with +colorWithName:\nstatic NSMutableDictionary *colorNameCache = nil;\n#if SUPPORTS_UNDOCUMENTED_API\n// UIColor_Undocumented\n// Undocumented methods of UIColor"
        },
        {
            "comment": "This code adds two methods to the UIColor class: `styleString` and `searchForColorByName`. It also includes a method that returns the color space model of a UIColor object as a CGColorSpaceModel enum. The possible color spaces are kCGColorSpaceModelUnknown, kCGColorSpaceModelMonochrome, kCGColorSpaceModelRGB, kCGColorSpaceModelCMYK, kCGColorSpaceModelLab, kCGColorSpaceModelDeviceN, and kCGColorSpaceModelIndexed.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":37-72",
            "content": "@interface UIColor (UIColor_Undocumented)\n- (NSString *)styleString;\n@end\n#endif // SUPPORTS_UNDOCUMENTED_API\n@interface UIColor (UIColor_Expanded_Support)\n+ (UIColor *)searchForColorByName:(NSString *)cssColorName;\n@end\n#pragma mark -\n@implementation UIColor (UIColor_Expanded)\n- (CGColorSpaceModel)colorSpaceModel {\n\treturn CGColorSpaceGetModel(CGColorGetColorSpace(self.CGColor));\n}\n- (NSString *)colorSpaceString {\n\tswitch (self.colorSpaceModel) {\n\t\tcase kCGColorSpaceModelUnknown:\n\t\t\treturn @\"kCGColorSpaceModelUnknown\";\n\t\tcase kCGColorSpaceModelMonochrome:\n\t\t\treturn @\"kCGColorSpaceModelMonochrome\";\n\t\tcase kCGColorSpaceModelRGB:\n\t\t\treturn @\"kCGColorSpaceModelRGB\";\n\t\tcase kCGColorSpaceModelCMYK:\n\t\t\treturn @\"kCGColorSpaceModelCMYK\";\n\t\tcase kCGColorSpaceModelLab:\n\t\t\treturn @\"kCGColorSpaceModelLab\";\n\t\tcase kCGColorSpaceModelDeviceN:\n\t\t\treturn @\"kCGColorSpaceModelDeviceN\";\n\t\tcase kCGColorSpaceModelIndexed:\n\t\t\treturn @\"kCGColorSpaceModelIndexed\";\n\t\tcase kCGColorSpaceModelPattern:\n\t\t\treturn @\"kCGColorSpaceModelPattern\";\n\t\tdefault:"
        },
        {
            "comment": "This code defines a category on UIColor class that checks if the color is RGB or monochrome and returns an array of its components. It also validates if the color is valid for the method it's being used in.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":73-115",
            "content": "\t\t\treturn @\"Not a valid color space\";\n\t}\n}\n- (BOOL)canProvideRGBComponents {\n\tswitch (self.colorSpaceModel) {\n\t\tcase kCGColorSpaceModelRGB:\n\t\tcase kCGColorSpaceModelMonochrome:\n\t\t\treturn YES;\n\t\tdefault:\n\t\t\treturn NO;\n\t}\n}\n- (NSArray *)arrayFromRGBAComponents {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be an RGB color to use -arrayFromRGBAComponents\");\n\tCGFloat r,g,b,a;\n\tif (![self red:&r green:&g blue:&b alpha:&a]) return nil;\n\treturn [NSArray arrayWithObjects:\n\t\t\t[NSNumber numberWithFloat:r],\n\t\t\t[NSNumber numberWithFloat:g],\n\t\t\t[NSNumber numberWithFloat:b],\n\t\t\t[NSNumber numberWithFloat:a],\n\t\t\tnil];\n}\n- (BOOL)red:(CGFloat *)red green:(CGFloat *)green blue:(CGFloat *)blue alpha:(CGFloat *)alpha {\n\tconst CGFloat *components = CGColorGetComponents(self.CGColor);\n\tCGFloat r,g,b,a;\n\tswitch (self.colorSpaceModel) {\n\t\tcase kCGColorSpaceModelMonochrome:\n\t\t\tr = g = b = components[0];\n\t\t\ta = components[1];\n\t\t\tbreak;\n\t\tcase kCGColorSpaceModelRGB:\n\t\t\tr = components[0];\n\t\t\tg = components[1];\n\t\t\tb = components[2];\n\t\t\ta = components[3];"
        },
        {
            "comment": "This code is a part of the UIColor class and provides functions for accessing RGB and white color components. It handles different model colors and returns appropriate values. The code also performs assertions to ensure the correct usage of each function.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":116-152",
            "content": "\t\t\tbreak;\n\t\tdefault:\t// We don't know how to handle this model\n\t\t\treturn NO;\n\t}\n\tif (red) *red = r;\n\tif (green) *green = g;\n\tif (blue) *blue = b;\n\tif (alpha) *alpha = a;\n\treturn YES;\n}\n- (CGFloat)red {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be an RGB color to use -red\");\n\tconst CGFloat *c = CGColorGetComponents(self.CGColor);\n\treturn c[0];\n}\n- (CGFloat)green {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be an RGB color to use -green\");\n\tconst CGFloat *c = CGColorGetComponents(self.CGColor);\n\tif (self.colorSpaceModel == kCGColorSpaceModelMonochrome) return c[0];\n\treturn c[1];\n}\n- (CGFloat)blue {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be an RGB color to use -blue\");\n\tconst CGFloat *c = CGColorGetComponents(self.CGColor);\n\tif (self.colorSpaceModel == kCGColorSpaceModelMonochrome) return c[0];\n\treturn c[2];\n}\n- (CGFloat)white {\n\tNSAssert(self.colorSpaceModel == kCGColorSpaceModelMonochrome, @\"Must be a Monochrome color to use -white\");\n\tconst CGFloat *c = CGColorGetComponents(self.CGColor);\n\treturn c[0];"
        },
        {
            "comment": "This code defines a UIColor subclass with methods for getting the alpha value, converting RGB values to hex, performing arithmetic operations on RGB values, and creating new colors based on those operations. The code asserts that the color is in RGB format before performing these operations.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":153-190",
            "content": "}\n- (CGFloat)alpha {\n\treturn CGColorGetAlpha(self.CGColor);\n}\n- (UInt32)rgbHex {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be a RGB color to use rgbHex\");\n\tCGFloat r,g,b,a;\n\tif (![self red:&r green:&g blue:&b alpha:&a]) return 0;\n\tr = MIN(MAX(self.red, 0.0f), 1.0f);\n\tg = MIN(MAX(self.green, 0.0f), 1.0f);\n\tb = MIN(MAX(self.blue, 0.0f), 1.0f);\n\treturn (((int)roundf(r * 255)) << 16)\n\t| (((int)roundf(g * 255)) << 8)\n\t| (((int)roundf(b * 255)));\n}\n#pragma mark Arithmetic operations\n- (UIColor *)colorByLuminanceMapping {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be a RGB color to use arithmatic operations\");\n\tCGFloat r,g,b,a;\n\tif (![self red:&r green:&g blue:&b alpha:&a]) return nil;\n\t// http://en.wikipedia.org/wiki/Luma_(video)\n\t// Y = 0.2126 R + 0.7152 G + 0.0722 B\n\treturn [UIColor colorWithWhite:r*0.2126f + g*0.7152f + b*0.0722f\n\t\t\t\t\t\t\t alpha:a];\n}\n- (UIColor *)colorByMultiplyingByRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be a RGB color to use arithmatic operations\");"
        },
        {
            "comment": "This code defines a category on UIColor that adds methods to modify the color by adding or lightening its RGB components. It first checks if the color is an RGB color, and then performs the requested operations within bounds of 0-1 range.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":192-217",
            "content": "\tCGFloat r,g,b,a;\n\tif (![self red:&r green:&g blue:&b alpha:&a]) return nil;\n\treturn [UIColor colorWithRed:MAX(0.0, MIN(1.0, r * red))\n\t\t\t\t\t\t   green:MAX(0.0, MIN(1.0, g * green)) \n\t\t\t\t\t\t\tblue:MAX(0.0, MIN(1.0, b * blue))\n\t\t\t\t\t\t   alpha:MAX(0.0, MIN(1.0, a * alpha))];\n}\n- (UIColor *)colorByAddingRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be a RGB color to use arithmatic operations\");\n\tCGFloat r,g,b,a;\n\tif (![self red:&r green:&g blue:&b alpha:&a]) return nil;\n\treturn [UIColor colorWithRed:MAX(0.0, MIN(1.0, r + red))\n\t\t\t\t\t\t   green:MAX(0.0, MIN(1.0, g + green)) \n\t\t\t\t\t\t\tblue:MAX(0.0, MIN(1.0, b + blue))\n\t\t\t\t\t\t   alpha:MAX(0.0, MIN(1.0, a + alpha))];\n}\n- (UIColor *)colorByLighteningToRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be a RGB color to use arithmatic operations\");\n\tCGFloat r,g,b,a;\n\tif (![self red:&r green:&g blue:&b alpha:&a]) return nil;"
        },
        {
            "comment": "This code defines various methods to manipulate UIColor by adjusting its RGB and alpha values. The `colorByDarkeningToRed`, `colorByLighteningToRed`, etc. methods use MAX, MIN, and arithmetic operations to adjust the color accordingly. The `colorByMultiplyingByColor` method takes another UIColor object as an input and adjusts the color based on its RGB values.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":219-253",
            "content": "\treturn [UIColor colorWithRed:MAX(r, red)\n\t\t\t\t\t\t   green:MAX(g, green)\n\t\t\t\t\t\t\tblue:MAX(b, blue)\n\t\t\t\t\t\t   alpha:MAX(a, alpha)];\n}\n- (UIColor *)colorByDarkeningToRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be a RGB color to use arithmatic operations\");\n\tCGFloat r,g,b,a;\n\tif (![self red:&r green:&g blue:&b alpha:&a]) return nil;\n\treturn [UIColor colorWithRed:MIN(r, red)\n\t\t\t\t\t\t   green:MIN(g, green)\n\t\t\t\t\t\t\tblue:MIN(b, blue)\n\t\t\t\t\t\t   alpha:MIN(a, alpha)];\n}\n- (UIColor *)colorByMultiplyingBy:(CGFloat)f {\n\treturn [self colorByMultiplyingByRed:f green:f blue:f alpha:1.0f];\n}\n- (UIColor *)colorByAdding:(CGFloat)f {\n\treturn [self colorByMultiplyingByRed:f green:f blue:f alpha:0.0f];\n}\n- (UIColor *)colorByLighteningTo:(CGFloat)f {\n\treturn [self colorByLighteningToRed:f green:f blue:f alpha:0.0f];\n}\n- (UIColor *)colorByDarkeningTo:(CGFloat)f {\n\treturn [self colorByDarkeningToRed:f green:f blue:f alpha:1.0f];\n}\n- (UIColor *)colorByMultiplyingByColor:(UIColor *)color {"
        },
        {
            "comment": "The code includes four methods that perform arithmetic operations on RGB colors, including multiplying, adding, and lightening/darkening. It ensures the color being used is RGB by checking if it can provide its components. If not, it returns nil.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":254-284",
            "content": "\tNSAssert(self.canProvideRGBComponents, @\"Must be a RGB color to use arithmatic operations\");\n\tCGFloat r,g,b,a;\n\tif (![self red:&r green:&g blue:&b alpha:&a]) return nil;\n\treturn [self colorByMultiplyingByRed:r green:g blue:b alpha:1.0f];\n}\n- (UIColor *)colorByAddingColor:(UIColor *)color {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be a RGB color to use arithmatic operations\");\n\tCGFloat r,g,b,a;\n\tif (![self red:&r green:&g blue:&b alpha:&a]) return nil;\n\treturn [self colorByAddingRed:r green:g blue:b alpha:0.0f];\n}\n- (UIColor *)colorByLighteningToColor:(UIColor *)color {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be a RGB color to use arithmatic operations\");\n\tCGFloat r,g,b,a;\n\tif (![self red:&r green:&g blue:&b alpha:&a]) return nil;\n\treturn [self colorByLighteningToRed:r green:g blue:b alpha:0.0f];\n}\n- (UIColor *)colorByDarkeningToColor:(UIColor *)color {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be a RGB color to use arithmatic operations\");\n\tCGFloat r,g,b,a;\n\tif (![self red:&r green:&g blue:&b alpha:&a]) return nil;"
        },
        {
            "comment": "The code provides a UIColor class with methods to create colors by darkening red, green, and blue values, convert color to string representation in different formats (RGB or hex), generate random colors, and create colors from RGB hex value.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":286-323",
            "content": "\treturn [self colorByDarkeningToRed:r green:g blue:b alpha:1.0f];\n}\n#pragma mark String utilities\n- (NSString *)stringFromColor {\n\tNSAssert(self.canProvideRGBComponents, @\"Must be an RGB color to use -stringFromColor\");\n\tNSString *result;\n\tswitch (self.colorSpaceModel) {\n\t\tcase kCGColorSpaceModelRGB:\n\t\t\tresult = [NSString stringWithFormat:@\"{%0.3f, %0.3f, %0.3f, %0.3f}\", self.red, self.green, self.blue, self.alpha];\n\t\t\tbreak;\n\t\tcase kCGColorSpaceModelMonochrome:\n\t\t\tresult = [NSString stringWithFormat:@\"{%0.3f, %0.3f}\", self.white, self.alpha];\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tresult = nil;\n\t}\n\treturn result;\n}\n- (NSString *)hexStringFromColor {\n\treturn [NSString stringWithFormat:@\"%0.6X\", self.rgbHex];\n}\n#pragma mark Class methods\n+ (UIColor *)randomColor {\n\treturn [UIColor colorWithRed:(CGFloat)RAND_MAX / random()\n\t\t\t\t\t\t   green:(CGFloat)RAND_MAX / random()\n\t\t\t\t\t\t\tblue:(CGFloat)RAND_MAX / random()\n\t\t\t\t\t\t   alpha:1.0f];\n}\n+ (UIColor *)colorWithRGBHex:(UInt32)hex {\n\tint r = (hex >> 16) & 0xFF;\n\tint g = (hex >> 8) & 0xFF;\n\tint b = (hex) & 0xFF;"
        },
        {
            "comment": "This code defines methods for creating UIColor objects from hex string representation. The first method takes a red, green, and blue value as parameters to create the color. The second method scans an input string for a valid hex number and returns a corresponding color using the +[UIColor colorWithRGBHex:] method. The third method further accepts an alpha channel parameter and trims any whitespace from the input string before creating a color object using the previously defined methods.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":325-352",
            "content": "\treturn [UIColor colorWithRed:r / 255.0f\n\t\t\t\t\t\t   green:g / 255.0f\n\t\t\t\t\t\t\tblue:b / 255.0f\n\t\t\t\t\t\t   alpha:1.0f];\n}\n// Returns a UIColor by scanning the string for a hex number and passing that to +[UIColor colorWithRGBHex:]\n// Skips any leading whitespace and ignores any trailing characters\n+ (UIColor *)colorWithTheHexString:(NSString *)stringToConvert {\n\tNSScanner *scanner = [NSScanner scannerWithString:stringToConvert];\n\tunsigned hexNum;\n\tif (![scanner scanHexInt:&hexNum]) return nil;\n\treturn [UIColor colorWithRGBHex:hexNum];\n}\n+ (UIColor *)colorWithHexString:(NSString *)color alpha:(CGFloat)alpha {\n    // \u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\n    NSString * colorStr = [[color stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]] uppercaseString];\n    // String should be 6 or 8 characters\n    if ([colorStr length] < 6) {\n        return [UIColor clearColor];\n    }\n    // strip 0X if it appears\n    // \u5982\u679c\u662f0x\u5f00\u5934\u7684\uff0c\u90a3\u4e48\u622a\u53d6\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u4ece\u7d22\u5f15\u4e3a2\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u4e00\u76f4\u5230\u672b\u5c3e\n    if ([colorStr hasPrefix:@\"0X\"]) {\n        colorStr = [colorStr substringFromIndex:2];"
        },
        {
            "comment": "The code converts a hexadecimal color string into a UIColor object. It first checks if the string starts with '#' and removes it, then extracts separate substrings for red, green, and blue components. The code then uses NSScanner to convert each substring into an integer representing the corresponding component's value in hexadecimal format. Finally, the code creates a new UIColor object with the extracted RGB values and the specified alpha channel.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":353-387",
            "content": "    }\n    // \u5982\u679c\u662f#\u5f00\u5934\u7684\uff0c\u90a3\u4e48\u622a\u53d6\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u4ece\u7d22\u5f15\u4e3a1\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u4e00\u76f4\u5230\u672b\u5c3e\n    if ([colorStr hasPrefix:@\"#\"]) {\n        colorStr = [colorStr substringFromIndex:1];\n    }\n    // \u9664\u53bb\u6240\u6709\u5f00\u5934\u5b57\u7b26\u540e \u518d\u5224\u65ad\u5b57\u7b26\u4e32\u957f\u5ea6\n    if ([colorStr length] != 6) {\n        return [UIColor clearColor];\n    }\n    // Separate into r, g, b substrings\n    NSRange range;\n    range.location = 0;\n    range.length = 2;\n    //red\n    NSString * redStr = [colorStr substringWithRange:range];\n    //green\n    range.location = 2;\n    NSString * greenStr = [colorStr substringWithRange:range];\n    //blue\n    range.location = 4;\n    NSString * blueStr = [colorStr substringWithRange:range];\n    // Scan values \u5c06\u5341\u516d\u8fdb\u5236\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\n    unsigned int r, g, b;\n    [[NSScanner scannerWithString:redStr] scanHexInt:&r];\n    [[NSScanner scannerWithString:greenStr] scanHexInt:&g];\n    [[NSScanner scannerWithString:blueStr] scanHexInt:&b];\n    return [UIColor colorWithRed:((float)r / 255.0f) green:((float)g / 255.0f) blue:((float)b / 255.0f) alpha:alpha];\n}\n+ (UIColor *)colorWithHexString:(NSString *)color {\n    return [self colorWithHexString:color alpha:1.0f];"
        },
        {
            "comment": "This code defines a method for getting UIColor from a CSS/SVG color name and initializes the cache when loading. It uses a cache to store previously looked-up colors and searches for colors if they are not found in the cache. The cache is implemented using an NSMutableDictionary, and it stores either the actual color or NSNull if there was a failure in searching for the color. Additionally, the code provides a method for fetching the style string of a UIColor object, possibly making use of an undocumented API.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":388-430",
            "content": "}\n// Lookup a color using css 3/svg color name\n+ (UIColor *)colorWithName:(NSString *)cssColorName {\n\tUIColor *color;\n\t@synchronized(colorNameCache) {\n\t\t// Look for the color in the cache\n\t\tcolor = [colorNameCache objectForKey:cssColorName];\n\t\tif ((id)color == [NSNull null]) {\n\t\t\t// If it wasn't there previously, it's still not there now\n\t\t\tcolor = nil;\n\t\t} else if (!color) {\n\t\t\t// Color not in cache, so search for it now\n\t\t\tcolor = [self searchForColorByName:cssColorName];\n\t\t\t// Set the value in cache, storing NSNull on failure\n\t\t\t[colorNameCache setObject:(color ?: (id)[NSNull null])\n\t\t\t\t\t\t\t   forKey:cssColorName];\n\t\t}\n\t}\n\treturn color;\n}\n#pragma mark UIColor_Expanded initialization\n+ (void)load {\n\tcolorNameCache = [[NSMutableDictionary alloc] init];\n}\n@end\n#pragma mark -\n#if SUPPORTS_UNDOCUMENTED_API\n@implementation UIColor (UIColor_Undocumented_Expanded)\n- (NSString *)fetchStyleString {\n\treturn [self styleString];\n}\n// Convert a color into RGB Color space, courtesy of Poltras\n// via http://ofcodeandmen.poltras.com/2009/01/22/convert-a-cgcolorref-to-another-cgcolorspaceref/"
        },
        {
            "comment": "This method defines a custom rgbColor property for UIColor class, which parses the color string \"rgb(red, green, blue)\" and returns a UIColor object. It uses an undocumented method \"styleString\" to obtain the color string and scans it using NSScanner. If the scanning process fails at any step, it returns nil indicating an invalid color string. Finally, if the color string is valid, it creates and returns a new UIColor object with the provided red, green, blue values and the alpha value from self.alpha property.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":431-460",
            "content": "//\n- (UIColor *)rgbColor {\n\t// Call to undocumented method \"styleString\".\n\tNSString *style = [self styleString];\n\tNSScanner *scanner = [NSScanner scannerWithString:style];\n\tCGFloat red, green, blue;\n\tif (![scanner scanString:@\"rgb(\" intoString:NULL]) return nil;\n\tif (![scanner scanFloat:&red]) return nil;\n\tif (![scanner scanString:@\",\" intoString:NULL]) return nil;\n\tif (![scanner scanFloat:&green]) return nil;\n\tif (![scanner scanString:@\",\" intoString:NULL]) return nil;\n\tif (![scanner scanFloat:&blue]) return nil;\n\tif (![scanner scanString:@\")\" intoString:NULL]) return nil;\n\tif (![scanner isAtEnd]) return nil;\n\treturn [UIColor colorWithRed:red green:green blue:blue alpha:self.alpha];\n}\n@end\n#endif // SUPPORTS_UNDOCUMENTED_API\n@implementation UIColor (UIColor_Expanded_Support)\n/*\n * Database of color names and hex rgb values, derived\n * from the css 3 color spec:\n *\thttp://www.w3.org/TR/css3-color/\n *\n * We think this is a very compact way of storing\n * this information, and relatively cheap to lookup.\n *\n * Note that we search for color names starting with ','"
        },
        {
            "comment": "This code contains a static const char array, named colorNameDB, which stores the expanded names of various colors along with their respective color codes. Each color entry is terminated by '#', and the database begins with a ',' to avoid false matches.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":461-475",
            "content": " * and terminated by '#', so that we don't get false matches.\n * For this reason, the database begins with ','.\n */\nstatic const char *colorNameDB = \",\"\n\"aliceblue#f0f8ff,antiquewhite#faebd7,aqua#00ffff,aquamarine#7fffd4,azure#f0ffff,\"\n\"beige#f5f5dc,bisque#ffe4c4,black#000000,blanchedalmond#ffebcd,blue#0000ff,\"\n\"blueviolet#8a2be2,brown#a52a2a,burlywood#deb887,cadetblue#5f9ea0,chartreuse#7fff00,\"\n\"chocolate#d2691e,coral#ff7f50,cornflowerblue#6495ed,cornsilk#fff8dc,crimson#dc143c,\"\n\"cyan#00ffff,darkblue#00008b,darkcyan#008b8b,darkgoldenrod#b8860b,darkgray#a9a9a9,\"\n\"darkgreen#006400,darkgrey#a9a9a9,darkkhaki#bdb76b,darkmagenta#8b008b,\"\n\"darkolivegreen#556b2f,darkorange#ff8c00,darkorchid#9932cc,darkred#8b0000,\"\n\"darksalmon#e9967a,darkseagreen#8fbc8f,darkslateblue#483d8b,darkslategray#2f4f4f,\"\n\"darkslategrey#2f4f4f,darkturquoise#00ced1,darkviolet#9400d3,deeppink#ff1493,\"\n\"deepskyblue#00bfff,dimgray#696969,dimgrey#696969,dodgerblue#1e90ff,\"\n\"firebrick#b22222,floralwhite#fffaf0,forestgreen#228b22,fuchsia#ff00ff,\""
        },
        {
            "comment": "This code contains a string of hexadecimal values, each representing different colors in the RGB color model. These colors can be used as input for various UI-related functions or operations.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":476-489",
            "content": "\"gainsboro#dcdcdc,ghostwhite#f8f8ff,gold#ffd700,goldenrod#daa520,gray#808080,\"\n\"green#008000,greenyellow#adff2f,grey#808080,honeydew#f0fff0,hotpink#ff69b4,\"\n\"indianred#cd5c5c,indigo#4b0082,ivory#fffff0,khaki#f0e68c,lavender#e6e6fa,\"\n\"lavenderblush#fff0f5,lawngreen#7cfc00,lemonchiffon#fffacd,lightblue#add8e6,\"\n\"lightcoral#f08080,lightcyan#e0ffff,lightgoldenrodyellow#fafad2,lightgray#d3d3d3,\"\n\"lightgreen#90ee90,lightgrey#d3d3d3,lightpink#ffb6c1,lightsalmon#ffa07a,\"\n\"lightseagreen#20b2aa,lightskyblue#87cefa,lightslategray#778899,\"\n\"lightslategrey#778899,lightsteelblue#b0c4de,lightyellow#ffffe0,lime#00ff00,\"\n\"limegreen#32cd32,linen#faf0e6,magenta#ff00ff,maroon#800000,mediumaquamarine#66cdaa,\"\n\"mediumblue#0000cd,mediumorchid#ba55d3,mediumpurple#9370db,mediumseagreen#3cb371,\"\n\"mediumslateblue#7b68ee,mediumspringgreen#00fa9a,mediumturquoise#48d1cc,\"\n\"mediumvioletred#c71585,midnightblue#191970,mintcream#f5fffa,mistyrose#ffe4e1,\"\n\"moccasin#ffe4b5,navajowhite#ffdead,navy#000080,oldlace#fdf5e6,olive#808000,\"\n\"olivedrab#6b8e23,orange#ffa500,orangered#ff4500,orchid#da70d6,palegoldenrod#eee8aa,\""
        },
        {
            "comment": "This code defines a method `searchForColorByName:` that takes a CSS color name as input, searches for the corresponding hex representation in a pre-compiled string, and returns a UIColor object if found. The code compiles a search string to avoid false matches and uses strstr() to find the color name within the colorNameDB string.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":490-509",
            "content": "\"palegreen#98fb98,paleturquoise#afeeee,palevioletred#db7093,papayawhip#ffefd5,\"\n\"peachpuff#ffdab9,peru#cd853f,pink#ffc0cb,plum#dda0dd,powderblue#b0e0e6,\"\n\"purple#800080,red#ff0000,rosybrown#bc8f8f,royalblue#4169e1,saddlebrown#8b4513,\"\n\"salmon#fa8072,sandybrown#f4a460,seagreen#2e8b57,seashell#fff5ee,sienna#a0522d,\"\n\"silver#c0c0c0,skyblue#87ceeb,slateblue#6a5acd,slategray#708090,slategrey#708090,\"\n\"snow#fffafa,springgreen#00ff7f,steelblue#4682b4,tan#d2b48c,teal#008080,\"\n\"thistle#d8bfd8,tomato#ff6347,turquoise#40e0d0,violet#ee82ee,wheat#f5deb3,\"\n\"white#ffffff,whitesmoke#f5f5f5,yellow#ffff00,yellowgreen#9acd32\";\n+ (UIColor *)searchForColorByName:(NSString *)cssColorName {\n\tUIColor *result = nil;\n\t// Compile the string we'll use to search against the database\n\t// We search for \",<colorname>#\" to avoid false matches\n\tconst char *searchString = [[NSString stringWithFormat:@\",%@#\", cssColorName] UTF8String];\n\t// Search for the color name\n\tconst char *found = strstr(colorNameDB, searchString);\n\t// If found, step past the search string and grab the hex representation"
        },
        {
            "comment": "This code checks if a found string contains a valid hex color code after the search string. If so, it converts the hex to an UIColor object using the 'colorWithRGBHex' method of UIColor class and assigns it to the result variable.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/UIColor+expanded.m\":510-520",
            "content": "\tif (found) {\n\t\tconst char *after = found + strlen(searchString);\n\t\tint hex;\n\t\tif (sscanf(after, \"%x\", &hex) == 1) {\n\t\t\tresult = [self colorWithRGBHex:hex];\n\t\t}\n\t}\n\treturn result;\n}\n@end"
        }
    ]
}