{
    "summary": "This code initializes and manages a TVideoWindow view, sorts video paths by creation time, retrieves file attributes, and updates the table view based on dates. It defines methods for a TVideoWindow class implementing UITableViewDataSource and UITableViewDelegate, includes closeBtnOnClick and deleteSaveOnClick, and sets table view row height to 30 pixels.",
    "details": [
        {
            "comment": "This code is initializing the TVideoWindow view, setting its frame to match the screen width and height. It loads the nib file for the window, adds it as a subview of itself, and initializes the data and display. The class extends UITableViewDelegate and UITableViewDataSource to manage the table view contents.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVideoWindow.m\":0-42",
            "content": "//\n//  MemManagerWindow.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2021/6/6.\n//  Copyright \u00a9 2021\u5e74 XiaoGang. All rights reserved.\n//\n#import \"TVideoWindow.h\"\n#import \"MASConstraint.h\"\n#import \"View+MASAdditions.h\"\n#import \"NSFile+Extension.h\"\n#import \"MemManager.h\"\n@interface TVideoWindow () <UITableViewDelegate,UITableViewDataSource>\n@property (strong, nonatomic) IBOutlet UIView *containerView;\n@property (weak, nonatomic) IBOutlet UITextField *saveNameTF;\n@property (weak, nonatomic) IBOutlet UITableView *readTableView;\n@property (strong, nonatomic) NSMutableArray *datas;   //\u5df2\u5b58\u7684\u6240\u6709\u5386\u53f2;\n@end\n@implementation TVideoWindow\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initView];\n        [self initData];\n        [self initDisplay];\n    }\n    return self;\n}\n-(void) initView{\n    //self\n    [self setFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];\n    //containerView\n    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self.class) owner:self options:nil];\n    [self addSubview:self.containerView];"
        },
        {
            "comment": "The code belongs to TVideoWindow.m file of TOMVision2 project and is related to the management and display of videos in a window. It sets up constraints for the container view, initializes data and display, provides public methods to open/close the window, and sorts video paths based on creation time.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVideoWindow.m\":43-81",
            "content": "    [self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.leading.mas_equalTo(self);\n        make.trailing.mas_equalTo(self);\n        make.top.mas_equalTo(self);\n        make.bottom.mas_equalTo(self);\n    }];\n    //readTableView\n    self.readTableView.delegate = self;\n    self.readTableView.dataSource = self;\n}\n-(void) initData{\n    self.datas = [[NSMutableArray alloc] init];\n}\n-(void) initDisplay{\n    [self refreshDisplay];\n    [self close];\n}\n//MARK:===============================================================\n//MARK:                     < publicMethod >\n//MARK:===============================================================\n-(void) open{\n    [theApp.window addSubview:self];\n}\n-(void) close{\n    [self removeFromSuperview];\n}\n-(void) refreshDisplay{\n    //1. \u91cd\u52a0\u8f7d\u6570\u636e_\u52a0\u8f7dsave\u4e0b\u7684\u8def\u5f84;\n    NSString *cachePath = kCachePath;\n    NSArray *paths = [NSFile_Extension subFiles:STRFORMAT(@\"%@/tvideo\",cachePath)];\n    //2. \u6309\u521b\u5efa\u65f6\u95f4\u6392\u5e8f;\n    paths = [paths sortedArrayUsingComparator:^NSComparisonResult(NSString *path1, NSString *path2) {"
        },
        {
            "comment": "This code retrieves file attributes, compares their creation dates to reload data and update table view. It converts paths to folder names, clears existing data array, adds new data, and reloads the table view for display.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVideoWindow.m\":82-103",
            "content": "        NSDictionary *info1 = DICTOOK([[NSFileManager defaultManager] attributesOfItemAtPath:path1 error:nil]);\n        NSDictionary *info2 = DICTOOK([[NSFileManager defaultManager] attributesOfItemAtPath:path2 error:nil]);\n        NSDate *date1 = [info1 objectForKey:NSFileCreationDate];\n        NSDate *date2 = [info2 objectForKey:NSFileCreationDate];\n        NSTimeInterval time1 = [date1 timeIntervalSince1970];\n        NSTimeInterval time2 = [date2 timeIntervalSince1970];\n        return (time1 == time2) ? NSOrderedSame : ((time1 < time2) ? NSOrderedAscending : NSOrderedDescending);\n    }];\n    //3. \u91cd\u52a0\u8f7d\u6570\u636e_\u8f6c\u4e3afolderName;\n    NSArray *foloders = [SMGUtils convertArr:paths convertBlock:^id(NSString *path) {\n        NSString *sep = @\"/\";\n        NSString *folderName = STRTOOK(ARR_INDEX_REVERSE(STRTOARR(path, sep), 0));\n        return folderName;\n    }];\n    //4. \u91cd\u52a0\u8f7d\u6570\u636e_\u6536\u96c6\u5230datas\u4e2d;\n    [self.datas removeAllObjects];\n    [self.datas addObjectsFromArray:foloders];\n    //5. \u91cd\u663e\u793a;\n    [self.readTableView reloadData];"
        },
        {
            "comment": "This code is for a UITableView-based iOS application. It sets the default selection to the last cell, and provides three IBAction methods: clearMemOnClick clears the model data, saveMemOnClick saves the current data with an optional name, and readMemOnClick retrieves the selected data from the table view.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVideoWindow.m\":105-131",
            "content": "    //6. \u9ed8\u8ba4\u9009\u4e2d\u6700\u540e\u4e00\u4e2acell;\n    if (ARRISOK(self.datas)) {\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.3f * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            NSIndexPath *row = [NSIndexPath indexPathForRow:self.datas.count - 1 inSection:0];\n            [self.readTableView selectRowAtIndexPath:row animated:true scrollPosition:UITableViewScrollPositionTop];\n        });\n    }\n}\n//MARK:===============================================================\n//MARK:                     < onclick >\n//MARK:===============================================================\n- (IBAction)clearMemOnClick:(id)sender {\n    [self.delegate tvideo_ClearModels];\n}\n- (IBAction)saveMemOnClick:(id)sender {\n    if (STRISOK(self.saveNameTF.text)) {\n        [self.delegate tvideo_Save:self.saveNameTF.text];\n        [self refreshDisplay];\n    }\n}\n- (IBAction)readMemOnClick:(id)sender {\n    NSIndexPath *selected = [self.readTableView indexPathForSelectedRow];\n    NSString *data = ARR_INDEX(self.datas, selected.row);\n    if (STRISOK(data)) {"
        },
        {
            "comment": "The code defines methods for a TVideoWindow class, which implements UITableViewDataSource and UITableViewDelegate. The closeBtnOnClick method closes the window, while deleteSaveOnClick deletes a selected item from cache and refreshes the display. The class also has a delegate method tvideo_Read.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVideoWindow.m\":132-159",
            "content": "        [self.delegate tvideo_Read:data];\n        [self close];\n    }\n}\n- (IBAction)closeBtnOnClick:(id)sender {\n    [self close];\n}\n- (IBAction)deleteSaveOnClick:(id)sender {\n    NSIndexPath *selected = [self.readTableView indexPathForSelectedRow];\n    NSString *data = ARR_INDEX(self.datas, selected.row);\n    if (STRISOK(data)) {\n        NSString *cachePath = kCachePath;\n        [[NSFileManager defaultManager] removeItemAtPath:STRFORMAT(@\"%@/tvideo/%@\",cachePath,data) error:nil];\n        [self refreshDisplay];\n    }\n}\n//MARK:===============================================================\n//MARK:       < UITableViewDataSource &  UITableViewDelegate>\n//MARK:===============================================================\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n    return self.datas.count;\n}\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n    UITableViewCell *cell = [[UITableViewCell alloc] init];\n    NSString *data = STRTOOK(ARR_INDEX(self.datas, indexPath.row));"
        },
        {
            "comment": "This code contains a UITableViewDataSource method and a UITableViewDelegate method. The dataSource method sets the cell's text label with provided data and returns the cell. The delegate method sets the table view row height to 30 pixels.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVideoWindow.m\":160-167",
            "content": "    [cell.textLabel setText:data];\n    return cell;\n}\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{\n    return 30;\n}\n@end"
        }
    ]
}