{
    "summary": "The RTModel class manages training queues and execution with pause, register, report, queue management methods. It includes an `invoke` method for handling invocation attempts. The code initializes lastStartTime and handles waiting for commands to execute, considering busy status, advancing in the training model.",
    "details": [
        {
            "comment": "This code defines the RTModel class, which contains properties like a skill dictionary, training queues, progress index, and timers. The class also initializes data during initialization.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/Model/RTModel.m\":0-38",
            "content": "//\n//  RTModel.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2022/3/31.\n//  Copyright \u00a9 2022\u5e74 XiaoGang. All rights reserved.\n//\n#import \"RTModel.h\"\n#define TimerInterval 0.6f\n@interface RTModel ()\n@property (strong, nonatomic) NSMutableDictionary *dic;     //\u6280\u80fd\u5b57\u5178\n@property (strong, nonatomic) NSMutableArray *queues;       //\u8bad\u7ec3\u961f\u5217\n@property (assign, nonatomic) NSInteger queueIndex;         //\u8bad\u7ec3\u8fdb\u5ea6\n@property (strong, nonatomic) NSTimer *timer;               //\u95f4\u9694\u8ba1\u65f6\u5668\n@property (assign, nonatomic) long long lastOperCount;      //\u601d\u7ef4\u64cd\u4f5c\u8ba1\u6570\n@property (assign, nonatomic) long long useTimed;           //\u5df2\u4f7f\u7528\u65f6\u95f4\n@property (assign, nonatomic) long long lastStartTime;      //\u6700\u540e\u4e00\u6b21\u5f00\u59cb\u65f6\u95f4\n@property (strong, nonatomic) NSString *invokingName;       //\u5f53\u524d\u6267\u884c\u4e2dname;\n@property (strong, nonatomic) NSMutableArray *pauseNames;   //\u9700\u8981\u505c\u4e0b\u7b49\u5f85\u7684\u547d\u4ee4;\n@end\n@implementation RTModel\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initData];\n    }\n    return self;\n}\n-(void) initData{\n    self.dic = [[NSMutableDictionary alloc] init];\n    self.queues = [[NSMutableArray alloc] init];"
        },
        {
            "comment": "This code initializes a pauseNames array and sets up a timer on the main queue. It also provides getter methods for queues and queueIndex, and a public method regist to register a name, target, and selector using reflection.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/Model/RTModel.m\":39-65",
            "content": "    self.pauseNames = [[NSMutableArray alloc] init];\n    dispatch_async(dispatch_get_main_queue(), ^{\n       self.timer = [NSTimer scheduledTimerWithTimeInterval:TimerInterval target:self selector:@selector(timeBlock) userInfo:nil repeats:true];\n    });\n}\n//MARK:===============================================================\n//MARK:                     < getset >\n//MARK:===============================================================\n-(NSMutableArray *)queues{\n    return _queues;\n}\n-(NSInteger)queueIndex{\n    return _queueIndex;\n}\n//MARK:===============================================================\n//MARK:                     < publicMethod >\n//MARK:===============================================================\n-(void) regist:(NSString*)name target:(NSObject*)target selector:(SEL)selector{\n    //1. \u83b7\u5f97\u7c7b\u548c\u65b9\u6cd5\u7684\u7b7e\u540d\n    NSMethodSignature *methodSignature = [[target class] instanceMethodSignatureForSelector:selector];\n    //2. \u53cd\u5c04\u5668;\n    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:methodSignature];"
        },
        {
            "comment": "This code appears to be part of an object that manages training queues and execution. It handles invocations, updates the training queue, clears the queues, tracks total use timed, and provides methods for invoked reporting and queue management.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/Model/RTModel.m\":67-111",
            "content": "    //3. \u4ece\u7b7e\u540d\u83b7\u5f97\u8c03\u7528\u5bf9\u8c61\n    [invocation setTarget:target];\n    invocation.target = target;\n    invocation.selector = selector;\n    //4. \u6536\u96c6\u5907\u7528;\n    [self.dic setObject:invocation forKey:name];\n}\n-(void) queue:(NSArray*)queues count:(NSInteger)count{\n    //1. \u6570\u636e\u68c0\u67e5;\n    queues = ARRTOOK(queues);\n    //2. \u66f4\u65b0\u8bad\u7ec3\u961f\u5217;\n    for (NSInteger i = 0; i < count; i++) {\n        for (RTQueueModel *queue in queues) {\n            [self.queues addObject:queue];\n        }\n    }\n}\n//\u5355\u6b65\u8bad\u7ec3\u6267\u884c\u5b8c\u6210\u62a5\u544a;\n-(void) invoked:(NSString*)name{\n    if ([STRTOOK(name) isEqualToString:self.invokingName]) {\n        self.invokingName = nil;\n    }\n}\n-(void) clear{\n    [self.queues removeAllObjects];\n    self.queueIndex = 0;\n    self.useTimed = 0;\n    self.lastStartTime = 0;\n}\n//\u8fd4\u56deuseTimed + \u73b0\u5728\u64ad\u653e\u4e2d\u5df2\u7528\u65f6;\n-(long long) getTotalUseTimed{\n    if (self.lastStartTime > 0) {\n        long long now = [[NSDate new] timeIntervalSince1970];\n        return self.useTimed + now - self.lastStartTime;\n    }\n    return self.useTimed;\n}\n//MARK:==============================================================="
        },
        {
            "comment": "This code defines methods for adding and clearing pause commands, as well as a private method for invoking a queue. The `appendPauseNames` and `clearPauseNames` methods add or remove objects from the `pauseNames` array. The `invoke` method sets arguments for an invocation object and attempts to invoke it, catching any exceptions that may occur. The `pauseCollectUseTimed` method collects the last training time if a pause occurs.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/Model/RTModel.m\":112-145",
            "content": "//MARK:               < publicMethod: \u89e6\u53d1\u6682\u505c\u547d\u4ee4 >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u589e\u52a0\u6682\u505c\u547d\u4ee4 (\u53c2\u800328172-todo1.1)--------------------\n *  @desc \u7528\u4e8e\u6709\u4e9b\u9884\u7ea6\u6307\u4ee4\u9700\u8981\u65f6\u95f4\u7b49\u5f85\u6267\u884c,\u9632\u6b62\u5f3a\u8bad\u5de5\u5177\u63d0\u524d\u9000\u51fa\u672c\u6b21\u8bad\u7ec3 (\u6240\u4ee5\u4e00\u822c\u7528\u4e8e\u9632\u6b62\u56de\u5230MainPage\u6216\u6a21\u62df\u91cd\u542f);\n */\n-(void) appendPauseNames:(NSArray*)value {\n    [self.pauseNames addObjectsFromArray:value];\n}\n-(void) clearPauseNames {\n    [self.pauseNames removeAllObjects];\n}\n//MARK:===============================================================\n//MARK:                     < privateMethod >\n//MARK:===============================================================\n-(void) invoke:(RTQueueModel*)queue {\n    NSInvocation *invc = [self.dic objectForKey:queue.name];\n    if (queue.arg0) {\n        id arg0 = queue.arg0;\n        [invc setArgument:&arg0 atIndex:2];\n    }\n    @try {\n        [invc invoke];\n    }@catch (NSException *exception) {\n        NSLog(@\"%@\", exception);\n    }\n}\n//\u6682\u505c\u65f6,\u628a\u6700\u540e\u4e00\u6b21\u8bad\u7ec3\u7528\u65f6\u6536\u96c6\u5230\u5df2\u7528\u65f6:useTimed\u4e2d;\n-(void) pauseCollectUseTimed{\n    if (self.lastStartTime > 0) {"
        },
        {
            "comment": "This code sets the lastStartTime to 0 if it's currently 0 and records the current time in seconds since 1970. This is used in a block section of code where it checks the state of the model, stops execution if not playing or if the queue has finished playing, and then proceeds to execute the next command in the queue.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/Model/RTModel.m\":146-183",
            "content": "        long long now = [[NSDate new] timeIntervalSince1970];\n        self.useTimed += now - self.lastStartTime;\n        self.lastStartTime = 0;\n    }\n}\n//\u5f00\u59cb\u64ad\u653e\u65f6,\u8bb0\u4e0b\u5f00\u59cb\u64ad\u653e\u7684\u65f6\u95f4;\n-(void) playSetLastStartTime{\n    if (self.lastStartTime == 0) {\n        self.lastStartTime = [[NSDate new] timeIntervalSince1970];\n    }\n}\n//MARK:===============================================================\n//MARK:                     < block >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u5f3a\u8bad\u6267\u884c\u5668--------------------\n *  @version\n *      2023.02.11: \u5728\u7b49\u5f85\u4e0a\u6761\u547d\u540d,\u6216\u601d\u7ef4\u7a7a\u8f7d\u65f6,kFlySEL\u7ee7\u7eed\u6267\u884c (\u53c2\u800328066-todo2);\n *      2023.02.11: BUG_\u591a\u6b21\u98de\u7684\u52a8\u753b\u4f3c\u4e4e\u6709\u4e00\u70b9\u4ea4\u53c9,\u6539\u4e3a\u884c\u4e3a\u8f93\u51fa\u65f6,\u5fc5\u987b\u7b49\u4e0a\u6761\u6267\u884c\u5b8c,\u624d\u80fd\u6267\u884c\u4e0b\u6761;\n */\n-(void) timeBlock {\n    //1. \u4e0d\u7528\u6267\u884c: \u975e\u64ad\u653e\u72b6\u6001,return;\n    if (![self.delegate rtModel_Playing]) {\n        [self pauseCollectUseTimed];\n        return;\n    }\n    //2. \u4e0d\u7528\u6267\u884c: \u6267\u884c\u64ad\u653e\u5b8c\u65f6,return;\n    if (self.queueIndex == self.queues.count){\n        [self pauseCollectUseTimed];\n        [self.delegate rtModel_Finished];\n        return;\n    }\n    //3. \u610f\u5916>count\u65f6\u5904\u7406;"
        },
        {
            "comment": "This code snippet handles waiting for previous commands to execute and checking the current command's execution status in a reinforcement learning training. It also considers waiting for the right frame, preventing immediate execution of some commands, and accounting for the Thinker's busy status. The code determines whether or not to wait based on conditions involving current and previous commands, as well as the Thinker's operational count.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/Model/RTModel.m\":184-213",
            "content": "    if (self.queueIndex > self.queues.count) return;\n    [self playSetLastStartTime];\n    //3. \u6682\u505c\u547d\u4ee4\u7b49\u5f85;\n    RTQueueModel *queue = ARR_INDEX(self.queues, self.queueIndex);\n    if ([self.pauseNames containsObject:queue.name]) {\n        NSLog(@\"----> \u5f3a\u5316\u8bad\u7ec3_\u9047\u5230\u6682\u505c\u547d\u4ee4 -> \u7b49\u5f85\");\n        return;\n    }\n    //4. \u884c\u4e3a\u8f93\u51fa\u65f6,\u4f1a\u5373\u523b\u6267\u884c;\n    BOOL curNeedWait = ![kFlySEL isEqualToString:queue.name];\n    BOOL lastNeedCurWait = [kFlySEL isEqualToString:self.invokingName];\n    //5. (a || b) && c => \u9700\u8981\u7b49\u5f85\u4e0a\u4e00\u547d\u4ee4\u6267\u884c\u5b8c;\n    //  a. \u8fd9\u6b65\u8981\u6c42\u7b49\u5f85 = curNeedWait;\n    //  b. \u4e0a\u6b65\u8981\u6c42\u8fd9\u6b65\u7b49\u5b83 = lastNeedCurWait (\u4e0a\u6761\u547d\u4ee4\u662f\u884c\u4e3a);\n    //  c. \u8fd9\u6b65\u6267\u884c\u4e2d = STRISOK(self.invokingName);\n    if ((curNeedWait || lastNeedCurWait) && STRISOK(self.invokingName)) {\n        NSLog(@\"----> \u5f3a\u5316\u8bad\u7ec3_\u4e0a\u5e27\u6267\u884c\u4e2d -> \u7b49\u5f85\");\n        return;\n    }\n    //6. \u975e\u5373\u523b\u6267\u884c\u7684\u547d\u4ee4 => \u7b49\u5f85\u601d\u7ef4\u7a7a\u8f7d;\n    if (curNeedWait) {\n        //7. \u601d\u7ef4\u5fd9\u65f6\u6ca1\u8f6e\u5230\u4e0b\u5e27: TC\u5fd9\u788c\u72b6\u6001\u5219\u8fd4\u56de (\u8ba1\u6570\u901f\u7387(\u8d1f\u8f7d)>10\u65f6,\u4e3a\u5fd9\u72b6\u6001);\n        NSInteger operDelta = theTC.getOperCount - self.lastOperCount;\n        self.lastOperCount = theTC.getOperCount;\n        BOOL busyStatus = operDelta > 0;\n        if (busyStatus) {"
        },
        {
            "comment": "This code is part of a reinforcement learning training model. It logs when it reaches a certain state and then waits, eventually executing the next step in the training process by incrementing the queue index, setting the invoking name, and invoking the queue's function while notifying the delegate.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/Model/RTModel.m\":214-227",
            "content": "            NSLog(@\"----> \u5f3a\u5316\u8bad\u7ec3_\u601d\u7ef4\u8d1f\u8f7d(%ld) -> \u7b49\u5f85\",operDelta);\n            return;\n        }\n    }\n    //8. \u6267\u884c\u4e0b\u5e27;\n    NSLog(@\"\u5f3a\u5316\u8bad\u7ec3 -> \u6267\u884c:%@ (%ld/%ld)\",queue.name,self.queueIndex+1,self.queues.count);\n    self.queueIndex++;\n    self.invokingName = queue.name;\n    [self invoke:queue];\n    [self.delegate rtModel_Invoked];\n}\n@end"
        }
    ]
}