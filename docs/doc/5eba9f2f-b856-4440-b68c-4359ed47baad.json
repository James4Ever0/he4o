{
    "summary": "The TCScore class in SMG_NothingIsAll project calculates comprehensive scores for solution models, updating tasks, supporting sub-branch evaluation, avoiding invalid branches, and storing scores. It evaluates and ranks strategies using `score_Single` and `score_Multi`, returning the best model with the highest score.",
    "details": [
        {
            "comment": "This code is for the TCScore class in the SMG_NothingIsAll project, responsible for calculating scores based on certain conditions and tasks. It uses multiple methods such as \"scoreFromIfTCNeed\" and \"scoreFromTOQueue\". The score calculation process involves updating the current task, taking into account firstRootDemand, and then passing the information to TCPlan for optimal path planning.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCScore/TCScore.m\":0-41",
            "content": "//\n//  TCScore.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2021/12/19.\n//  Copyright \u00a9 2021\u5e74 XiaoGang. All rights reserved.\n//\n#import \"TCScore.h\"\n@implementation TCScore\n/**\n *  MARK:--------------------\u8c03\u7528\u5165\u53e3--------------------\n *  @version\n *      2023.07.21: \u5173\u95edTC\u5404\u5904\u8c03\u7528,\u6539\u4e3a\u5728TO\u7ebf\u7a0b\u8c03\u7528 (\u53c2\u800330084-\u65b9\u6848);\n */\n+(void) scoreFromIfTCNeed{}\n+(TCResult*) scoreFromTOQueue{\n    return [self score];\n}\n/**\n *  MARK:--------------------\u65b0\u87ba\u65cb\u67b6\u6784score\u65b9\u6cd5--------------------\n */\n+(TCResult*) score{\n    //1. \u53d6\u5f53\u524d\u4efb\u52a1 (\u53c2\u800324195-1);\n    [theTC updateOperCount:kFILENAME min:1200];\n    Debug();\n    //OSTitleLog(@\"TCScore\");\n    DemandModel *demand = [theTC.outModelManager getCanDecisionDemand];\n    //2. \u5bf9firstRootDemand\u53d6\u5f97\u5206\u5b57\u5178 (\u53c2\u800324195-2 & 24196\u793a\u56fe);\n    NSMutableDictionary *scoreDic = [[NSMutableDictionary alloc] init];\n    TOFoModel *foModel = [self score_Multi:demand.actionFoModels scoreDic:scoreDic];\n    //3. \u8f6c\u7ed9TCPlan\u53d6\u6700\u4f18\u8def\u5f84;\n    DebugE();\n    return [TCPlan plan:demand rootFo:foModel scoreDic:scoreDic];\n}\n//MARK:==============================================================="
        },
        {
            "comment": "This function calculates the comprehensive score of a solution model and stores it in a dictionary. It supports various states, such as WithOut or ActNo, and can interrupt evaluating sub-branches if rDemand and hDemand are already finished. The function also includes a single demand scoring method and ensures that models with invalid branches are not considered.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCScore/TCScore.m\":42-65",
            "content": "//MARK:                     < \u7efc\u5408\u8bc4\u5206 >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u77ed\u65f6\u8bb0\u5fc6\u6811\u7efc\u5408\u8bc4\u5206--------------------\n *  @desc \u5bf9\u89e3\u51b3\u65b9\u6848S\u8fdb\u884c\u7efc\u5408\u8bc4\u5206 (\u53c2\u800324192);\n *  @desc\n *      1. \u7f29\u5199\u8bf4\u660e: 1.sr=SubRDemand 2.ss=SubSolution 3.sa=SubAlgModel 4.sh=SubHDemand\n *      2. \u6bcf\u6267\u884c\u4e00\u6b21single\u65b9\u6cd5,\u5219scoreDic\u4e2d\u6536\u96c6\u4e00\u6761model\u7684\u5f97\u5206 <foModel,score>;\n *      3. S\u7ade\u4e89\u65b9\u6cd5\u7531_Best\u65b9\u6cd5\u5b9e\u73b0;\n *      4. R\u6c42\u548c\u65b9\u6cd5\u4e3b\u8981\u5728_Single\u4e2d\u5b9e\u73b0;\n *      5. \u5148\u5c06\u6240\u6709\u5f97\u5206\u7b97\u5b8c\u540e,\u518d\u91cd\u65b0\u4eceroot\u5f00\u59cb\u7b97\u6700\u4f18\u8def\u5f84,\u56e0\u4e3a\u53ea\u6709\u5b50\u679d\u7b97\u5b8c,\u7236\u679d\u624d\u80fd\u77e5\u9053\u600e\u4e48\u7b97\u6700\u4f18\u8def\u5f84;\n *  @version\n *      2021.12.21: \u652f\u6301\u72b6\u6001\u4e3aWithOut\u7684\u5904\u7406 (\u53ea\u6709WithOut\u72b6\u6001\u7684\u624d\u53ef\u80fd\u7406\u6027\u6dd8\u6c70,\u4e0d\u7136\u5c31\u6709\u53ef\u80fd\u6b7b\u7070\u590d\u71c3);\n *      2021.12.21: \u652f\u6301\u72b6\u6001\u4e3aActNo (\u5982\u4e3a\u65f6\u95f4\u4e0d\u6025\u6dd8\u6c70\u6389) \u7684\u5904\u7406 (\u5b50\u89e3\u51b3\u65b9\u6848\u5168ActNo\u4e4b\u540e\u4e14WithOut\u7684\u7406\u6027\u6dd8\u6c70);\n *      2021.12.26: \u652f\u6301\u5f53rDemand\u548chDemand\u5df2finish\u65f6\u4e0d\u8ba1\u5206,\u5e76\u4e2d\u65ad\u5411\u5b50\u679d\u8bc4\u5206;\n *      2022.03.11: \u5347\u7ea7\u652f\u6301mvScoreV2 (\u53c2\u800325142-TODO4);\n *      2022.06.02: \u5c01\u88c5\u5355demand\u8bc4\u5206\u65b9\u6cd5 (\u987a\u4fbf\u89e3\u51b3\u6709\u65f6solutionFos\u5168\u4e3aActNo\u65f6,\u76f4\u63a5\u5224\u8d1f\u5206,\u800c\u4e0d\u5c1d\u8bd5\u65b0\u65b9\u6848);\n *  @param scoreDic : notnull;\n *\n *  _result \u5c06model\u53ca\u5176\u4e0b\u6709\u6548\u7684\u5206\u679d\u8bc4\u5206\u8ba1\u7b97,\u5e76\u6536\u96c6\u5230\u8bc4\u5206\u5b57\u5178 <K=foModel,V=score>;\n */\n+(void) score_Single:(TOFoModel*)model scoreDic:(NSMutableDictionary*)scoreDic{\n    //1. \u6570\u636e\u68c0\u67e5;"
        },
        {
            "comment": "This code calculates the score of a task model by considering its sub-models and demands. It first checks if the model has an \"actNo\" status, in which case it sets the score to the minimum value. Next, it iterates through each sub-model's sub-demands, summing their scores if they have solutions; otherwise, they are rationally eliminated. Finally, it adds the scores of all reason demands to the total score and stores it in the score dictionary.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCScore/TCScore.m\":66-94",
            "content": "    double modelScore = 0;\n    //2. ===== \u7b2c0\u90e8\u5206: foModel\u81ea\u8eab\u7406\u6027\u6dd8\u6c70\u5224\u65ad (\u6bd4\u5982\u65f6\u95f4\u4e0d\u6025\u8bc4\u5426\u540e,\u4e3aactNo\u72b6\u6001) (\u53c2\u800324053);\n    if (model.status == TOModelStatus_ActNo) {\n        [scoreDic setObject:@(INT_MIN) forKey:TOModel2Key(model)];\n        NSLog(@\"\u8bc4\u52061: \u56e0actNo\u76f4\u63a5\u8bc4\u6700\u5c0f\u5206: K:%@\",TOModel2Key(model));\n        return;\n    }\n    //3. ===== \u7b2c\u4e00\u90e8\u5206: HDemand\u5728FoModel.subModels\u4e0b (\u6709\u89e3\u51b3\u65b9\u6848:\u53c2\u4e0e\u6c42\u548c & \u65e0\u89e3\u51b3\u65b9\u6848:\u7406\u6027\u6dd8\u6c70);\n    //3. \u7528\u6bcf\u4e2asa\u53d6sh\u5b50\u4efb\u52a1 (\u6c42\u548c);\n    for (TOAlgModel *sa in model.subModels) {\n        //3. \u53d6\u51fash (\u4e00\u6761sa\u6700\u591a\u53ea\u80fd\u751f\u6210\u4e00\u4e2ash\u4efb\u52a1);\n        HDemandModel *sh = ARR_INDEX(sa.subDemands, 0);\n        if (sh) {\n            CGFloat score = [self score_SingleDemand:sh scoreDic:scoreDic];\n            modelScore += score;\n        }\n    }\n    //4. ===== \u7b2c\u4e8c\u90e8\u5206: RDemand\u5728AlgModel.subDemands\u4e0b (\u6709\u89e3\u51b3\u65b9\u6848:\u53c2\u4e0e\u6c42\u548c & \u65e0\u89e3\u51b3\u65b9\u6848:R\u81ea\u8eab\u8ba1\u5165\u7efc\u5408\u8bc4\u5206\u4e2d);\n    //4. \u53d6\u51fasubRDemands\u5b50\u4efb\u52a1 (\u6c42\u548c) \u7efc\u5408\u8bc4\u4ef7\u662f\u5426\u653e\u5f03\u5f53\u524d\u7236\u4efb\u52a1 (\u5982\u53c8\u7d2f\u53c8\u70e6\u7684\u6d3b,\u8d5a\u94b1\u4e5f\u4e0d\u5e72) (\u53c2\u800324195);\n    for (ReasonDemandModel *sr in model.subDemands) {\n        CGFloat score = [self score_SingleDemand:sr scoreDic:scoreDic];\n        modelScore += score;\n    }\n    //5. \u5c06\u6c42\u548c\u5f97\u5206,\u8ba1\u5165dic (\u5f53\u6ca1\u6709sr\u4e5f\u6ca1\u6709sa\u5b50\u4efb\u52a1 = 0\u5206);"
        },
        {
            "comment": "This code calculates the score for a single demand. It first checks if the demand is already finished or invalid, and then filters out any valid solution options. If all solution options are invalid, it rationalizes by deducting points based on specific conditions such as whether the demand is in \"WithOut\" status. The calculated score is stored in the scoreDic dictionary for further use.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCScore/TCScore.m\":95-120",
            "content": "    [scoreDic setObject:@(modelScore) forKey:TOModel2Key(model)];\n    NSLog(@\"\u8bc4\u52063: K:%@ => V:%@\u5206\",TOModel2Key(model),[scoreDic objectForKey:TOModel2Key(model)]);\n}\n/**\n *  MARK:--------------------\u83b7\u53d6\u5355demand\u7684\u8bc4\u5206--------------------\n *  @desc \u53ea\u8fd4\u56de\u4e0d\u76f4\u63a5\u8ba1\u5165\u5b57\u5178,\u56e0\u4e3ademand\u8bc4\u5206\u662f\u8981\"\u6c42\u548c\"\u540e\u8ba1\u5165\u5b57\u5178\u7684;\n *  @version\n *      2022.09.24: \u5931\u6548\u5904\u7406: \u5b50\u4efb\u52a1\u5931\u6548\u65f6,\u4e0d\u8fdb\u884c\u51b3\u7b56\u7efc\u8bc4 (\u53c2\u800327123-\u95ee\u98982-todo3);\n */\n+(CGFloat) score_SingleDemand:(DemandModel*)demand scoreDic:(NSMutableDictionary*)scoreDic{\n    //1. \u5f53demand\u5728feedbackTOR\u5df2finish\u65f6,\u4e0d\u8ba1\u5206;\n    if (demand.status == TOModelStatus_Finish) return 0;\n    //1. \u5f53demand\u5931\u6548\u65f6,\u4e0d\u8ba1\u5206;\n    if (ISOK(demand, ReasonDemandModel.class) && ((ReasonDemandModel*)demand).isExpired) return 0;\n    //2. \u53d6\u51fa\u8fd8\u672a\u7406\u6027\u5931\u8d25\u7684\u89e3\u51b3\u65b9\u6848;\n    NSArray *validActionFos = [SMGUtils filterArr:demand.actionFoModels checkValid:^BOOL(TOFoModel *actionFo) {\n        return actionFo.status != TOModelStatus_ActNo;\n    }];\n    //3. \u5f53demand\u5df2\u7ecfwithOut\u72b6\u6001,\u4e14\u5176\u89e3\u51b3\u65b9\u6848\u5168\u90e8actNo\u65f6,\u5219\u7406\u6027\u6dd8\u6c70 (\u53c2\u800324192-H14);\n    if (demand.status == TOModelStatus_WithOut && !ARRISOK(validActionFos)) {\n        if (ISOK(demand, HDemandModel.class)) {"
        },
        {
            "comment": "This code appears to be part of a larger system designed for evaluating and ranking different problem-solving strategies (solution A, solution R, and solution S) in some context. The function returns the best model score based on four different scenarios: when there is no solution A or R, when there is no solution S, and when there are multiple solution S options. In each scenario, it calculates a score for each solution using a function `score_Single`, compares them, and returns the highest-scoring solution as the best model (`TOFoModel`). The code also includes methods to handle multi-solution scenarios through competition (`score_Multi`) and converts scores to doubles.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCScore/TCScore.m\":121-155",
            "content": "            //4. H\u65e0\u89e3\u51b3\u65b9\u6848\u65f6,\u76f4\u63a5\u8ba1min\u5206\u8ba1\u5165modelScore;\n            return INT_MIN;\n        }else {\n            //5. R\u65e0\u89e3\u51b3\u65b9\u6848\u65f6,\u76f4\u63a5\u5c06sr\u8bc4\u5206\u8ba1\u5165modelScore;\n            return [AIScore score4Demand:demand];\n        }\n    }else{\n        //6. demand\u6709\u89e3\u51b3\u65b9\u6848\u65f6,\u5bf9S\u7ade\u4e89,\u5e76\u5c06\u6700\u9ad8\u5206\u8ba1\u5165modelScore;\n        TOFoModel *bestSS = [self score_Multi:validActionFos scoreDic:scoreDic];\n        //7. \u5e76\u5c06\u7ade\u4e89\u6700\u9ad8\u5206\u80dc\u8005\u8ba1\u5165modelScore;\n        return [NUMTOOK([scoreDic objectForKey:TOModel2Key(bestSS)]) doubleValue];\n    }\n}\n/**\n *  MARK:--------------------S\u89e3\u51b3\u65b9\u6848\u7ade\u4e89--------------------\n *  @desc \u611f\u6027\u7ade\u4e89 (\u53c2\u800324192-R9);\n *  @param foModels : \u89e3\u51b3\u65b9\u6848S\u6570,single\u4f20\u5165>=1\u6761,plan\u4f20\u5165\u53ef\u80fd\u4e3a0\u6761;\n *  @param scoreDic : notnull\n *  @result \u5c06bestFo\u8fd4\u56de;\n */\n+(TOFoModel*) score_Multi:(NSArray*)foModels scoreDic:(NSMutableDictionary*)scoreDic{\n    //1. \u53d6\u51fa\u5b50\u4efb\u52a1\u7684\u6bcf\u4e2a\u89e3\u51b3\u65b9\u6848S (\u7ade\u4e89);\n    TOFoModel *bestFoModel = nil;\n    for (TOFoModel *foModel in foModels) {\n        //2. \u8bc4\u5206\n        [self score_Single:foModel scoreDic:scoreDic];\n        //3. \u7ade\u4e89\n        if (!bestFoModel) {\n            bestFoModel = foModel;\n        }else{\n            double oldScore = [NUMTOOK([scoreDic objectForKey:TOModel2Key(bestFoModel)]) doubleValue];"
        },
        {
            "comment": "This function calculates the new score for each model and returns the best model (with the highest score) among them.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCScore/TCScore.m\":156-167",
            "content": "            double newScore = [NUMTOOK([scoreDic objectForKey:TOModel2Key(foModel)]) doubleValue];\n            if (newScore > oldScore) {\n                bestFoModel = foModel;\n            }\n        }\n    }\n    //4. \u5c06\u6700\u4f18S\u8fd4\u56de;\n    return bestFoModel;\n}\n@end"
        }
    ]
}