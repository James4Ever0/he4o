{
    "summary": "TCFeedback manages memory updates and end-of-sequence cases, handles task recognition, execution, and improved feedback with validation, processing, and calculation of matching degrees. It updates algorithms' status, collects data, performs regrouping, and manages feedback in a task management system involving ML/AI models, HDemand filters, and bug fixes for index dictionaries and UI synchronization.",
    "details": [
        {
            "comment": "TCFeedback handles input from the outer layer to impact In short-term memory's status updates in a multi-sequence recognition system. It supports IRT's rational failure, and now considers non-terminal predictions for reflection.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":0-28",
            "content": "//\n//  TCFeedback.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2021/12/2.\n//  Copyright \u00a9 2021\u5e74 XiaoGang. All rights reserved.\n//\n#import \"TCFeedback.h\"\n@implementation TCFeedback\n/**\n *  MARK:--------------------\"\u5916\u5c42\u8f93\u5165\" \u63a8\u8fdb \"\u4e2d\u5c42\u5faa\u73af\" \u51b3\u7b56--------------------\n *  @title \u5916\u5c42\u8f93\u5165\u5bf9In\u77ed\u65f6\u8bb0\u5fc6\u7684\u5f71\u54cd\u5904\u7406 (\u53c2\u800322052-2);\n *  @param model : \u65b0\u5e27\u7684model;\n *  @version\n *      2021.01.24: \u591a\u65f6\u5e8f\u8bc6\u522b\u652f\u6301,\u4f7f\u4e4b\u66f4\u5168\u9762\u7684\u652f\u6301\u6bcf\u4e2amatchFo\u7684status\u66f4\u65b0 (\u53c2\u800322073-todo6);\n *      2021.10.17: \u652f\u6301IRT\u7684\u7406\u6027\u5931\u6548,\u573a\u666f\u66f4\u65b0\u65f6,\u72b6\u6001\u8bbe\u4e3aOutBackReason (\u53c2\u800324059&24061-\u65b9\u68482);\n *      2021.12.25: \u9488\u5bf9\u7406\u6027IRT\u53cd\u7701\u7684\u652f\u6301 (\u5224\u65ad\u975e\u672b\u4f4d\u4e3a\u7406\u6027\u9884\u6d4b\u4e2d) (\u53c2\u800325021-\u2461);\n *      2022.03.05: BUG_\u5c06\u4ec5\u672b\u4f4d\u624d\u53cd\u9988,\u6539\u6210\u975e\u672b\u4f4d\u624d\u53cd\u9988 (\u539f\u6765\u903b\u8f91\u5199\u53cd\u4e86);\n *      2022.05.02: \u7528matchAlgs+partAlgs\u66ff\u4ee3mIsC (\u53c2\u800325234-8);\n *      2022.09.05: \u5c06theTC.inModels\u6539\u6210roots.pFos (\u53c2\u800327096-\u65b9\u68482);\n *      2022.09.06: TC\u6d41\u7a0b\u8c03\u6574_\u76f4\u63a5\u8c03\u7528TCDemand,\u5c06\u611f\u7406\u6027\u53cd\u7701\u9884\u7f6e\u90fd\u540e\u7f6e\u5230Demand\u4e2d (\u53c2\u800327096-\u5b9e\u8df51);\n *      2022.09.18: \u53cd\u9988\u5339\u914d\u65f6,\u53ca\u65f6\u5904\u7406\u53cd\u7701\u548c\u4efb\u52a1\u63a8\u8fdb\u5e27 (\u53c2\u800327098-todo2&todo3);\n *      2023.02.09: \u53cd\u9988\u4e0d\u5339\u914d\u65f6(\u53ea\u8981\u6ca1\u8c03\u7528\u5230\u5339\u914d,\u5373\u8c03\u7528\u4e0d\u5339\u914d),\u4e5f\u8981\u8bb0\u5f55protoAlg\u5230pFo\u91cc\u7684\u5b9e\u9645\u53d1\u751f\u5e27 (\u53c2\u800328063-todo1);\n *  @status\n *      xxxx.xx.xx: \u975e\u542f\u52a8\u72b6\u6001,\u56e0\u4e3a\u65f6\u5e8f\u8bc6\u522b\u4e2d,\u672a\u6db5\u76d6HNGL\u7c7b\u578b,\u6240\u4ee5\u5e76\u672a\u5bf9HNGL\u8fdb\u884c\u9884\u6d4b;\n *      2021.10.17: \u542f\u52a8,\u652f\u6301\u5bf9IRT\u7684\u7406\u6027\u5931\u6548 (\u53c2\u800324059&24061-\u65b9\u68482);"
        },
        {
            "comment": "This code updates the operating count, logs input data, retrieves recognition algorithms, checks for eligible feedback roots, and performs rational feedback on non-wait status models.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":29-52",
            "content": " */\n+(void) feedbackTIR:(AIShortMatchModel*)model{\n    //1. \u53d6\u6240\u6709lastWait\u6a21\u578b,\u5e76\u4e0e\u65b0\u8f93\u5165\u7684\u6982\u5ff5\u505amIsC\u5224\u65ad;\n    [theTC updateOperCount:kFILENAME];\n    Debug();\n    IFTitleLog(@\"feedbackTIR\", @\"\\n\u8f93\u5165ProtoA:%@ (\u8bc6\u522bmatchAlgs\u6570:%ld)\",Alg2FStr(model.protoAlg),model.matchAlgs.count);\n    NSArray *recognitionAlgs = [TIUtils getMatchAndPartAlgPsByModel:model];\n    //1. fbTIR\u5bf9roots\u8fdb\u884c\u53cd\u9988\u5224\u65ad (\u53c2\u800327096-\u65b9\u68482);\n    NSArray *roots = [theTC.outModelManager.getAllDemand copy];\n    for (ReasonDemandModel *root in roots) {\n        //2. \u4ec5\u652f\u6301ReasonDemandModel\u7c7b\u578b\u7684\u53cd\u9988,\u56e0\u4e3aPerceptDemandModel\u5df2\u7ecf\u53d1\u751f\u5b8c\u6bd5,\u4e0d\u9700\u8981\u53cd\u9988;\n        if (!ISOK(root, ReasonDemandModel.class)) continue;\n        //3. \u5bf9pFos\u505a\u7406\u6027\u53cd\u9988;\n        for (AIMatchFoModel *waitModel in root.validPFos) {\n            //4. \u53d6\u51fa\u7b49\u5f85\u4e2d\u7684_\u975ewait\u72b6\u6001\u7684,\u4e0d\u5904\u7406;\n            NSInteger status = [waitModel getStatusForCutIndex:waitModel.cutIndex];\n            if (status != TIModelStatus_LastWait) {\n                //\u8c03\u75281: \u53ea\u8981\u6ca1\u8c03\u7528\u5230pushFrame,\u5c31\u8c03\u7528\u6b64\u65b9\u6cd5\u8bb0\u5f55protoA;\n                [waitModel feedbackOtherFrame:model.protoAlg.pointer];\n                continue;"
        },
        {
            "comment": "Code snippet handles the case when the matching position is at the end of the sequence, and it doesn't require feedback. It checks if the current cut index is greater than or equal to the maximum cut index of matchFo. If true, it calls feedbackOtherFrame method to record protoA, and continues with next iteration. Otherwise, it compares protoAlg and waitAlg for matching, and if matched, triggers a rational IRT reflection process.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":53-72",
            "content": "            }\n            AIFoNodeBase *matchFo = [SMGUtils searchNode:waitModel.matchFo];\n            if (Log4TIROPushM) NSLog(@\"==> checkTIModel=MatchFo: %@\",Fo2FStr(matchFo));\n            //5. \u672b\u4f4d\u8df3\u8fc7,\u4e0d\u9700\u8981\u53cd\u9988 (\u53c2\u800325031-2 & 25134-\u65b9\u68482);\n            NSInteger maxCutIndex = matchFo.count - 1;\n            if (waitModel.cutIndex >= maxCutIndex){\n                //\u8c03\u75282: \u53ea\u8981\u6ca1\u8c03\u7528\u5230pushFrame,\u5c31\u8c03\u7528\u6b64\u65b9\u6cd5\u8bb0\u5f55protoA;\n                [waitModel feedbackOtherFrame:model.protoAlg.pointer];\n                continue;\n            }\n            AIKVPointer *waitAlg_p = ARR_INDEX(matchFo.content_ps, waitModel.cutIndex + 1);\n            //6. \u5224\u65adprotoAlg\u4e0ewaitAlg\u4e4b\u95f4\u5339\u914d,\u6210\u7acb\u5219OutBackYes;\n            [AITest test11:model waitAlg_p:waitAlg_p];//\u6d4b\u4e0b2523c-\u6b64\u5904\u662f\u5426\u4f1a\u5bfc\u81f4\u5339\u914d\u4e0d\u5230;\n//            BOOL mIsC = [TOUtils mIsC_1:model.protoAlg.pointer c:waitAlg_p];\n            BOOL mIsC = [recognitionAlgs containsObject:waitAlg_p];\n            if (mIsC) {\n                //6. \u6709\u53cd\u9988\u65f6,\u8fdb\u884cP\u53cd\u7701: \u8fdb\u884c\u7406\u6027IRT\u53cd\u7701;\n                [TCRethink reasonInRethink:waitModel cutIndex:waitModel.cutIndex type:ATPlus];"
        },
        {
            "comment": "This code appears to be part of a larger system that involves tasks, feedback loops, and model updates. It seems to handle various scenarios where the input mv (motion vector) changes. If the task is completed successfully, it pushes a frame and updates the TV. If not, it calls another method to record protoA. The code also mentions other functions like \"forecastIRT,\" \"rDemand,\" and \"probRecog\" that may be called in different contexts or architectures. It also references various tickets and notes for further information or changes. Overall, this code seems to be involved in updating a model and making decisions based on input changes.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":74-100",
            "content": "                //7. pFo\u4efb\u52a1\u987a\u5229: \u63a8\u8fdb\u5e27;\n                [waitModel feedbackPushFrame:model.protoAlg.pointer];\n                dispatch_async(dispatch_get_main_queue(), ^{//30083\u56de\u540c\u6b65\n                    [theTV updateFrame];\n                });\n                NSLog(@\"tir_OPushM: waitFo\u573a\u666f\u66f4\u65b0,\u539fIRT\u7406\u6027\u5931\u6548\");\n            } else {\n                //\u8c03\u75283: \u53ea\u8981\u6ca1\u8c03\u7528\u5230pushFrame,\u5c31\u8c03\u7528\u6b64\u65b9\u6cd5\u8bb0\u5f55protoA;\n                [waitModel feedbackOtherFrame:model.protoAlg.pointer];\n            }\n        }\n    }\n    //7. \u4f20\u7ed9TOR,\u505a\u4e0b\u4e00\u6b65\u5904\u7406: R\u4efb\u52a1_\u9884\u6d4bmv\u4ef7\u503c\u53d8\u5316;\n    //2021.12.01: R\u4efb\u52a1(\u65b0\u67b6\u6784\u5e94\u5728forecastIRT\u4e4b\u540e,\u8c03\u7528rForecastBack.rDemand,\u4f46\u65e7\u67b6\u6784\u5728\u524d\u9762,\u5148\u4e0d\u52a8,\u7b49\u6d4b\u6ca1\u5f71\u54cd\u518d\u6539\u540e\u9762);\n    //2021.12.05: \u5c06tor\u79fb\u5230\u6982\u5ff5\u8bc6\u522b\u540e\u4e86,\u6b64\u5904front\u548cback\u5408\u5e76 (\u53c2\u800324171-9);\n    DebugE();\n}\n/**\n *  MARK:--------------------\"\u5916\u5c42\u8f93\u5165\" \u63a8\u8fdb \"\u4e2d\u5c42\u5faa\u73af\" \u8ba4\u77e5--------------------\n *  @title \u5916\u5c42\u8f93\u5165\u5bf9In\u77ed\u65f6\u8bb0\u5fc6\u7684\u5f71\u54cd\u5904\u7406 (\u53c2\u800322052-2);\n *  @param cmvNode : \u65b0\u8f93\u5165\u7684mv;\n *  @version\n *      2021.01.24: \u5bf9\u591a\u65f6\u5e8f\u8bc6\u522b\u7ed3\u679c\u652f\u6301,\u53ca\u65f6\u5168\u9762\u7684\u6539\u53d8status\u4e3aOutBackYes (\u53c2\u800322073-todo5);\n *      2021.02.04: In\u53cd\u7701\u652f\u6301\u865amv,\u6240\u4ee5\u6b64\u5904\u4e5f\u8981\u652f\u6301\u865amv\u7684OPush\u5224\u65ad (\u53c2\u800322108);\n *      2021.12.25: \u5e9f\u5f03\u865amv\u7684\u4ee3\u7801 (\u56e0\u4e3a\u865amv\u65e9\u5df2\u4e0d\u5728\u65f6\u5e8f\u8bc6\u522b\u7684\u7ed3\u679c\u4e2d,\u5e76\u4e14\u6574\u4e2adsFo\u90fd\u5df2\u5e9f\u5f03\u6389\u4e86) (\u53c2\u8003Note24);"
        },
        {
            "comment": "This code performs the following actions:\n1. Updates oper count and debugging.\n2. Judges if recent input matches with waiting pFo results (matches, confirms if action happened).\n3. Checks for ReasonDemandModel feedback type and provides rational feedback.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":101-124",
            "content": " *      2021.12.25: \u9488\u5bf9\u611f\u6027IRT\u53cd\u7701\u7684\u652f\u6301 (\u5224\u65ad\u672b\u4f4d\u4e3a\u611f\u6027\u9884\u6d4b\u4e2d) (\u53c2\u800325022-\u2461);\n *      2022.09.05: \u5c06theTC.inModels\u6539\u6210roots.pFos (\u53c2\u800327096-\u65b9\u68482);\n *      2022.09.18: \u6709\u53cd\u9988\u65f6,\u53ca\u65f6\u5904\u7406\u53cd\u7701\u548c\u4efb\u52a1\u5931\u6548 (\u53c2\u800327098-todo2);\n *      2023.04.19: \u6539\u5230TCTransfer\u8fc1\u79fb\u540e\u8c03\u7528canset\u8bc6\u522b\u7c7b\u6bd4 (\u53c2\u800329069-todo12);\n *      2023.09.01: \u6253\u5f00canset\u5931\u8d25\u65f6\u8c03\u7528canset\u8bc6\u522b\u7c7b\u6bd4,\u5e76eff-1 (\u53c2\u800330124-todo1&todo2);\n *  @bug\n *      2021.01.25: \u4fee\u590dwitMatchFo.cmvNode_p\u7a7a\u5224\u65ad\u903b\u8f91\u53cd\u4e86,\u5bfc\u81f4\u65e0\u6cd5\u6267\u884c\u4fee\u6539\u72b6\u6001\u4e3aOutBackYes,\u4ece\u800c\u53cd\u7701\u7c7b\u6bd4\u6c38\u8fdc\u4e3a\"\u9006\";\n */\n+(void) feedbackTIP:(AIFoNodeBase*)protoFo cmvNode:(AICMVNode*)cmvNode {\n    //1. \u6570\u636e\u68c0\u67e5\n    [theTC updateOperCount:kFILENAME];\n    Debug();\n    IFTitleLog(@\"feedbackTIP\", @\"\\n\u8f93\u5165MV:%@\",Mv2FStr(cmvNode));\n    //2. \u5224\u65ad\u6700\u8fd1\u4e00\u6b21input\u662f\u5426\u4e0e\u7b49\u5f85\u4e2dpFo\u611f\u6027\u7ed3\u679c\u76f8\u5339\u914d (\u5339\u914d,\u6bd4\u5982\u5403,\u786e\u5b9a\u81ea\u5df1\u662f\u5426\u771f\u5403\u4e86);\n    //2. fbTIP\u5bf9roots\u8fdb\u884c\u53cd\u9988\u5224\u65ad (\u53c2\u800327096-\u65b9\u68482);\n    NSArray *roots = [theTC.outModelManager.getAllDemand copy];\n    for (ReasonDemandModel *root in roots) {\n        //2. \u4ec5\u652f\u6301ReasonDemandModel\u7c7b\u578b\u7684\u53cd\u9988,\u56e0\u4e3aPerceptDemandModel\u5df2\u7ecf\u53d1\u751f\u5b8c\u6bd5,\u4e0d\u9700\u8981\u53cd\u9988;\n        if (!ISOK(root, ReasonDemandModel.class)) continue;\n        //3. \u5bf9pFos\u505a\u7406\u6027\u53cd\u9988;\n        for (AIMatchFoModel *waitModel in root.validPFos) {"
        },
        {
            "comment": "This code is part of a larger program. It prepares data and checks if the current model is in a waiting state for feedback. If it's not in a waiting state, the code skips to the next iteration. If it's in a waiting state, the code compares the \"hope\" (expected) feedback with the new \"real\" feedback to see if they match. If they do, the code updates the model status and stores the score of the feedback for further use. The code also seems to handle positive feedback as \"good\" (P) and negative feedback as \"bad\" (S).",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":126-146",
            "content": "            //3. \u6570\u636e\u51c6\u5907;\n            AIFoNodeBase *waitMatchFo = [SMGUtils searchNode:waitModel.matchFo];\n            NSInteger maxCutIndex = waitMatchFo.count - 1;\n            //4. \u975e\u7b49\u5f85\u4e2d\u7684\u8df3\u8fc7;\n            NSInteger status = [waitModel getStatusForCutIndex:waitModel.cutIndex];\n            if (Log4OPushM) NSLog(@\"==> checkTIModel=MatchFo: %@ (%@)\",Fo2FStr(waitMatchFo),TIStatus2Str(status));\n            if (status != TIModelStatus_LastWait) continue;\n            //5. \u975e\u672b\u4f4d\u8df3\u8fc7 (\u53c2\u800325031-2);\n            if (waitModel.cutIndex < maxCutIndex) continue;\n            //6. \u7b49\u5f85\u4e2d\u7684inModel_\u5224\u65adhope(wait)\u548creal(new)\u4e4b\u95f4\u662f\u5426\u76f8\u7b26 (\u4ec5\u6807\u8bb0\u540c\u533a\u540c\u5411\u53cd\u9988);\n            if ([AIScore sameIdenSameScore:waitMatchFo.cmvNode_p mv2:cmvNode.pointer]) {\n                [waitModel setStatus:TIModelStatus_OutBackSameDelta forCutIndex:waitModel.cutIndex];\n                AIFoNodeBase *waitMatchFo = [SMGUtils searchNode:waitModel.matchFo];\n                //10. \u6709\u53cd\u9988;\n                CGFloat score = [AIScore score4MV:waitMatchFo.cmvNode_p ratio:1.0f];\n                //b. \u6b63mv\u53cd\u9988\u4e3aP(\u597d) \u6216 \u8d1fmv\u53cd\u9988\u4e3aS(\u574f);"
        },
        {
            "comment": "If score is not zero, determine if the type is positive or negative analogy and perform heuristic IRT reflection. If there is mv feedback, perform Canset recognition (todo5 reference). Mark waitModel as expired and update frame on main queue. Log message for positive MV feedback.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":147-167",
            "content": "                if (score != 0) {\n                    AnalogyType type = score > 0 ? ATPlus : ATSub;\n                    //11. \u5219\u8fdb\u884c\u611f\u6027IRT\u53cd\u7701;\n                    [TCRethink perceptInRethink:waitModel type:type];\n                    NSLog(@\"---//IP\u53cd\u7701\u89e6\u53d1\u5668\u6267\u884c:%p F%ld \u72b6\u6001:%@\",waitMatchFo,waitMatchFo.pointer.pointerId,TIStatus2Str(TIModelStatus_OutBackSameDelta));\n                    //12. \u6709mv\u53cd\u9988\u65f6,\u505aCanset\u8bc6\u522b (\u53c2\u800328185-todo5);\n                    //[TCEffect rInEffect:waitMatchFo matchRFos:waitModel.baseFrameModel.matchRFos es:es];\n                    //EffectStatus es = score > 0 ? ES_HavEff : ES_NoEff;\n                    //[TIUtils recognitionCansetFo:protoFo.pointer sceneFo:waitMatchFo.pointer es:es];\n                }\n                //13. pFo\u4efb\u52a1\u5931\u6548 (\u53c2\u800327093-\u6761\u4ef61 & 27095-1);\n                waitModel.isExpired = true;\n                dispatch_async(dispatch_get_main_queue(), ^{//30083\u56de\u540c\u6b65\n                    [theTV updateFrame];\n                });\n                NSLog(@\"tip_OPushM: \u5b9eMV \u6b63\u5411\u53cd\u9988\");\n            }\n        }"
        },
        {
            "comment": "This code segment appears to be handling external inputs for the \"Out\" short-term memory in a loop decision-making process. It seems to involve a feedback mechanism where an initial input is compared against the previous round's data, and if there's a difference, it will update the memory structure accordingly. The code is used by various callers such as HNGL, Demand, and silent success scenarios.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":168-195",
            "content": "    }\n    DebugE();\n}\n//MARK:===============================================================\n//MARK:                     < TO\u90e8\u5206 >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\"\u5916\u5c42\u8f93\u5165\" \u63a8\u8fdb \"\u4e2d\u5c42\u5faa\u73af\" \u51b3\u7b56--------------------\n *  @title \u5916\u5c42\u8f93\u5165\u5bf9Out\u77ed\u65f6\u8bb0\u5fc6\u7684\u5f71\u54cd\u5904\u7406:\n *  @\u5b9e\u4f8b1: \u539f\u672c\u6211\u8981\u4e0a\u6218\u573a,\u9884\u6d4b\u5371\u9669\u4e0d\u53bb,\u7ed3\u679c\u7a81\u7136\u770b\u5230\u4e00\u8f86\u5766\u514b,\u4e3a\u4ec0\u4e48\u6211\u4f1a\u60f3\u5230\u9a7e\u9a76\u5766\u514b\u4e0a\u6218\u573a?\n *          a. \u53d1\u73b0\u5766\u514b\u524d: \u77ed\u65f6\u8bb0\u5fc6\u7684\u7236\u5b50\u679d\u7ed3\u6784\u4e3a: \u7269\u4f53\u53bb\u6218\u573a -> \u6211\u505a\u4e3a\u7269\u4f53\u53bb\u6218\u573a;\n *          b. \u53d1\u73b0\u5766\u514b\u540e: \u77ed\u65f6\u8bb0\u5fc6\u7684\u7236\u5b50\u679d\u7ed3\u6784\u4e3a: \u5766\u514b\u53bb\u6218\u573a -> \u6211\u5f00\u7740\u5766\u514b\u53bb\u6218\u573a (feedback\u540e\u91cd\u7ec4\u53cd\u601d_\u5766\u514b\u66ff\u4ee3\u7269\u4f53);\n *          \u8bf4\u660e: \u901a\u8fc7feedback,\u5df2\u7ecf\u91cd\u5237\u65b0\u4e86\u8bb0\u5fc6\u6811\u7684\u4e00\u5927\u90e8\u5206;\n *          \u95ee\u9898: \u6b64\u5904\u5982\u4f55\u628a\u5766\u514b\u66ff\u6362\u5230\u4eba\u7684?\u56e0\u4e3a\u7269\u4f53\u5728\u66f4\u62bd\u8c61\u7236\u4e2d,\u800c\u4e0a\u6218\u573a\u5728\u66f4\u5b50\u4e2d (\u7269\u4f53\u548c\u6218\u573a\u53ef\u80fd\u4e0d\u5728\u540c\u4e00\u65f6\u5e8f\u4e2d);\n *  @callers : \u6240\u6709\u7684ActYes\u90fd\u4f1a\u4f7f\u7528\u6b64\u5904\u6765\u6536\u96c6\u5916\u5faa\u73af\u53cd\u9988;\n *      1. HNGL\n *      2. Demand\n *      3. \u9759\u9ed8\u6210\u529f\u8bf4\u660e (\u4f8b:\u7a7f\u8d8a\u68ee\u6797,\u51fa\u95e8\u524d\u5907\u597d\u67aa,\u8001\u864e\u51b2\u51fa\u6765\u65f6,\u5f00\u67aa\u5413\u8dd1\u5b83):\n *          a. \u5907\u597d\u67aa\u540e,\u7b49\u5f85\u8001\u864e (\u8fdb\u5165\u6765\u7684\u53ca,actYes\u72b6\u6001);\n *          b. \u5f53\u9759\u9ed8\u6210\u529f\u8fd4\u56deoutBack\u65f6,\u4f1a\u5728isNormal\u4ee3\u7801\u5904\u5224\u65ad\u5230mIsC\u6210\u7acb (\u5982\u8001\u864e\u51b2\u51fa\u6765\u4e86);\n *          c. \u5e76\u5728\u6b64\u65b9\u6cd5\u6700\u540e\u63d0\u4ea4\u5230PM\u6d41\u7a0b\u4e2d (\u5224\u65ad\u8fd9\u53ea\u8001\u864e\u7684\u7279\u5f81\u662f\u5426\u7b26\u5408\u88ab\u5413\u8dd1\u7684\u53ef\u80fd);\n *          d. \u6d41\u7a0b\u63a7\u5236\u81ea\u884c\u7ee7\u7eed\u63a8\u8fdbdsFo,\u4f7f\u4e4b\u963b\u6b62R\u9884\u6d4b\u53d1\u751f (\u5982\u5728\u8001\u864e\u54ac\u4eba\u524d,\u6211\u4eec\u5f00\u67aa\u5413\u8dd1\u5b83);\n //\u56e0\u4e3adsFo\u7684\u7ee7\u7eed\u63a8\u8fdb,\u672a\u5fc5\u9700\u8981PM,\u800c\u6b64\u5904PM\u7684\u63a8\u8fdb,\u80fd\u5426\u6d41\u7a0b\u63a7\u5236\u81ea\u5df1\u9012\u5f52\u5230dsFo\u63a8\u8fdb?\u9700\u8981\u660e\u5929\u67e5\u4e0b\u6b64\u4ee3\u7801;\n *  @desc\n *      1. \u6700\u65b0\u4e00\u5e27,\u4e0e\u4e0a\u8f6e\u5faa\u73af\u505a\u5339\u914d (\u5bf9\u5355\u5e27\u5339\u914d\u5230\u4efb\u52a1Finish\u7684,\u8981\u63a8\u52a8\u51b3\u7b56\u8df3\u8f6c\u4e0b\u5e27);"
        },
        {
            "comment": "This code is a part of a larger program that deals with task recognition and execution. It handles various types of ActYes, including HNGL, which involves checking whether the input matches the expected change in sparse code. The code also collects real algorithms and stores them in the feedbackAlg section of waitTOAlgModel. The code has some todo items, such as supporting multiple tasks and handling trombone scenarios (T).",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":196-213",
            "content": " *      2. \u672a\u8f93\u51fa\u884c\u4e3a,\u7b49\u5f85\u4e2d\u7684,\u4e5f\u8981\u8fdb\u884c\u4e0b\u8f6e\u5339\u914d,\u6bd4\u5982\u7b49\u5f00\u996d,\u7b49\u6765\u5f00\u996d\u4e86; (\u7b49\u5f85\u7684status\u662fActNo\u8fd8\u662fRuning?)\n *      3. \u6d41\u7a0b\u8bf4\u660e: OPushM\u6210\u529f\u65f6,\u8c03\u7528PM\u7ee7\u7eed\u63a8\u8fdb\u6d41\u7a0b;\n *      4. \u6d41\u7a0b\u8bf4\u660e: OPushM\u5931\u8d25\u65f6,\u5f85\u751f\u7269\u949f\u89e6\u53d1\u5668\u89e6\u53d1\u53cd\u7701\u7c7b\u6bd4,\u518d\u63a8\u8fdb\u6d41\u7a0b;\n *  @desc \u5916\u5faa\u73af\u56de\u6765,\u628a\u5404\u81ea\u5b9e\u9645\u8f93\u5165\u7684\u6982\u5ff5,\u5b58\u5165\u5230TOAlgModel.realAlg\u4e2d;\n *      1. \u4e09\u79cdActYes\u65b9\u5f0f: (HNGL,isOut\u8f93\u51fa,demand\u5b8c\u6210);\n *      2. \u5176\u4e2d,\"isOut\u8f93\u51fa\"\u548c\"demand\u5b8c\u6210\"\u548c\"HNGL.H\"\u65f6\u7684ActYes\u76f4\u63a5\u6839\u636emIsC\u5224\u65ad\u5916\u5faa\u73af\u8f93\u5165\u662f\u5426\u7b26\u5408\u5373\u53ef;\n *      3. \u800cHNGL.GL\u9700\u8981\u6839\u636e\u8f93\u5165\u7684\u7a00\u758f\u7801\u53d8\u5316\u662f\u5426\u7b26\u5408GL\u6765\u5224\u65ad (base.base\u53ef\u627e\u5230\u671f\u671b\u7a00\u758f\u7801,\u53c2\u8003:20204);\n *  @todo\n *      1. \u6b64\u5904\u5728for\u5faa\u73af\u4e2d,\u6240\u4ee5\u6709\u53ef\u80fd\u63a8\u8fdb\u591a\u6761,\u6bd4\u5982\u6211\u6709\u4e86\u4e00\u53ea\u72d7,\u53ef\u4ee5\u62c9\u96ea\u64ac,\u6216\u8005\u9001\u7ed9\u7237\u7237\u966a\u7237\u7237 (\u6d89\u53ca\u591a\u4efb\u52a1\u95f4\u7684\u4ef7\u503c\u81ea\u7531\u7ade\u4e89),\u6682\u4ec5\u652f\u6301\u4e00\u6761,\u540e\u518d\u652f\u6301;\n *      2020.08.23: \u5728inputMv\u65f6,\u652f\u6301\u5f53\u524dactYes\u7684fo\u8fdb\u884c\u62b5\u6d88 (\u6216\u8bbe\u7f6e\u4e3aFinish) (T \u7531demandManager\u5b8c\u6210);\n *      2020.08.23: \u5728waitModel\u4e3aActYes\u4e14\u4e3aHNGL\u65f6,\u4ec5\u5224\u5b9a\u5176\u662f\u5426\u7b26\u5408HNGL\u53d8\u5316; T\n *      2020.08.23: \u5bf9realAlg\u8fdb\u884c\u6536\u96c6,\u6536\u96c6\u5230waitTOAlgModel.feedbackAlg\u4e0b; T\n *      2020.08.26: \u5728GL\u65f6,\u9700\u8981\u5224\u65ad\u5176\"\u671f\u671b\"\u4e0e\"\u771f\u5b9e\"\u6982\u5ff5\u95f4\u662f\u5426\u662f\u540c\u4e00\u7269\u4f53 (\u53c2\u800320204-\u793a\u4f8b);\n *  @version\n *      xxxx.xx.xx: \u8fd4\u56depushMiddle\u662f\u5426\u6210\u529f,\u5982\u679c\u63a8\u8fdb\u6210\u529f,\u5219\u4e0d\u518d\u6267\u884cTOP\u56db\u6a21\u5f0f;\n *      2020.08.05: waitModel.pm_Score\u7684\u8d4b\u503c\u6539\u4e3a\u53d6demand.score\u53d6\u8d1f (\u56e0\u4e3ademand\u4e00\u822c\u4e3a\u8d1f,\u800c\u89e3\u51b3\u4efb\u52a1\u4e3a\u6b63);\n *                  \u800c\u6b64\u5904,\u4ecewaitModel\u7684base\u4e2d\u627efo\u8f83\u9ebb\u70e6,\u6240\u4ee5\u7701\u4e8b\u513f,\u5c31\u76f4\u63a5\u53d6-demand.score\u5f97\u4e86;\n *      2020.08.24: \u4ecetor_OPushM\u4e2d\u72ec\u7acb\u51fa\u6765,\u72ec\u7acb\u8c03\u7528,\u5904\u7406realAlg\u548cHNGL\u7684\u53d8\u5316\u76f8\u7b26\u5224\u65ad;"
        },
        {
            "comment": "This code is annotated with comments in Chinese, detailing the changes made on various dates. It appears to be related to a system involving input, evaluation of models and feedback mechanisms. The changes seem to involve improvements in logic for matching algorithms and handling different types of inputs.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":214-227",
            "content": " *      2020.12.21: \u91cd\u65b0\u5c06commitFromOuterInputReason\u4e0eOuterPushMiddleLoop()\u5408\u5e76 (\u53c2\u800321185);\n *      2020.12.22: \u5728\u4ee5\u5f80isNormal\u4e4b\u5916,\u518d\u652f\u6301\u5bf9isH,isGL\u7684\u8282\u70b9\u8fdb\u884cPM\u7406\u6027\u8bc4\u4ef7;\n *      2020.12.22: \u5c06\u6240\u6709waitModel\u6709\u6548\u7684\u8fd4\u56de\u90fd\u8d4b\u503cOuterBack,\u800c\u4ec5\u5c06\u9996\u4e2afocusModel\u8fdb\u884cPM\u7406\u6027\u8bc4\u4ef7;\n *      2020.12.28: waitModels\u4ec5\u5bf9ActYes\u54cd\u5e94,\u5c06Runing\u53bb\u6389,\u56e0\u4e3aRunning\u5e94\u8be5\u5230\u4efb\u52a1\u63a8\u8fdb\u4e2d\u81ea\u884c\u8fdb\u884cPM\u5339\u914dmModel,\u800c\u975e\u6b64\u5904 (\u53c2\u800321208);\n *      2021.01.02: \u65e0\u8bbaGL\u53d8\u5316type\u662f\u5426\u4e0ewaitType\u7b26\u5408,\u90fd\u5bf9\u65b0\u7684\u53d8\u5316\u8fdb\u884c\u4fdd\u7559\u5230feedbackAlg (\u53c2\u80032120B-BUG1);\n *      2021.01.02: GL\u4e2dmIsC\u5bf9matchAlgs\u7684\u5168\u9762\u652f\u6301,\u56e0\u4e3a\u6709\u65f6\u6d3d\u9022C\u4e0d\u662fmatchAlgs\u9996\u4e2a,\u800c\u81f4mIsC\u5931\u8d25;\n *      2021.03.17: \u5c06latestAlg\u548cwaitAlg\u4e4b\u95f4\u7684mIsC\u5224\u65ad\u75311\u5c42\u6539\u4e3a2\u5c42 (\u56e0\u4e3a\u572822173BUG\u65f6,\u53d1\u73b0\u6b64\u5904\u8f93\u5165\u4e86\u9694\u5c42mIsC);\n *      2021.05.09: \u5bf9OPushM\u53cd\u9988\u7684GL\u89e6\u53d1ORT\u53cd\u7701 (\u53c2\u800323071-\u65b9\u68482);\n *      2021.05.12: \u6574\u7406tor_OPushM\u7684\u4ee3\u7801\u6613\u8bfb\u6027;\n *      2021.05.12: GL\u8fd4\u56de\u65f6,\u76f4\u63a5\u8c03\u7528focus.base(\u5373C).begin() (\u53c2\u800323075-\u65b9\u6848);\n *      2021.05.14: \u5c06reModel.content\u7531matchA\u6539\u6210protoA\u540e,\u6b64\u5904GL\u65f6mIsC\u5224\u65ad\u4ec5\u5224\u65adpIsM\u5373\u53ef (\u53c2\u800323076);\n *      2021.05.18: \u5c06GL\u8fd4\u56de\u65f6,\u66f4\u65b0baseGLFo\u548cbasebaseValue\u7684status,\u4ee5\u4f7fORT\u4e2d\u53ef\u4ee5\u5224\u65ad\u5176finish\u72b6\u6001 (\u53c2\u800323065-474\u793a\u56fe);\n *      2021.05.20: \u5728waitModels\u6536\u96c6\u4e2d,\u5c06\u4efb\u4f55\u5c42\u7684actNo\u4e4b\u4e0b\u90fd\u5207\u65ad\u6536\u96c6,\u907f\u514d\u8ddd21\u98de\u9519\u53c8\u98de\u56de\u6765,\u91cd\u590d\u76f8\u7b26\u5224\u65ad (\u53c2\u800323073-\u5047\u60f32);\n *      2021.05.20: \u5f53GL\u76f8\u7b26\u5224\u65ad\u6709\u7ed3\u679c\u540e,targetModel(replaceAlg)\u4e5f\u8bbe\u4e3afinish\u6216actNo,\u4ee5\u4fbf_GL()\u4e2d\u505a\u4e0d\u5e94\u671f\u5224\u65ad (\u53c2\u800323079);"
        },
        {
            "comment": "This code contains various updates and changes made over time to improve the functionality of the TCFeedback class in the AIThinkingControl module. It includes modifications for feedback handling, improvements in recognition algorithms, and adjustments in task completion behavior.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":228-244",
            "content": " *      2021.12.05: \u5c06feedbackTOR\u524d\u7f6e\u5230\u6982\u5ff5\u8bc6\u522b\u540e,\u6240\u4ee5\u63a8\u8fdb\u6210\u529f,\u624d\u6267\u884cTOP\u56db\u6a21\u5f0f\u7684\u903b\u8f91\u4f5c\u5e9f (\u53c2\u800324171-9);\n *      2021.12.23: feedback\u65f6,\u5c06root\u8bbe\u56deruning\u72b6\u6001 (\u53c2\u800324212-8);\n *      2021.12.26: \u5e9f\u5f03HN\u540e,\u7c7b\u578b\u5224\u65ad\u5904\u7406 & \u517c\u5bb9hActYes\u8f93\u51fa (\u53c2\u800325032-6);\n *      2021.12.26: waitModels\u7531currentDemand\u6539\u4e3a\u652f\u6301\u6240\u6709rootDemands (\u65b0\u87ba\u65cb\u67b6\u6784\u8fed\u4ee3\u4e86\u77ed\u65f6\u8bb0\u5fc6\u6811,\u5168\u6811\u66f4\u65b0);\n *      2021.12.27: \u5f53H\u53cd\u9988\u6210\u529f\u65f6,\u628ahDemand\u8bbe\u4e3afinish;\n *      2022.01.08: HDemand\u65f6,\u975eactYes\u72b6\u6001\u4e5f\u5904\u7406\u53cd\u9988 (\u53c2\u800325054);\n *      2022.03.13: \u5c06mIsC\u6539\u6210proto\u6216matchAlgs\u4e2d\u4efb\u4e00\u6761mIsC\u6210\u7acb\u5373\u53ef (\u53c2\u800325146-\u8f6c\u75913-\u65b9\u6848);\n *      2022.05.02: \u7528matchAlgs+partAlgs\u66ff\u4ee3mIsC (\u53c2\u800325234-8);\n *      2022.05.22: H\u4efb\u52a1\u6709\u6548\u6027\u53cd\u9988\u72b6\u6001\u66f4\u65b0 (\u53c2\u800326095-6);\n *      2022.06.01: \u6709\u53cd\u9988\u65f6,\u4e0d\u6539root\u7684runing\u72b6\u6001 (\u53c2\u800326185-TODO1);\n *      2022.06.01: H\u53cd\u9988\u4e2d\u6bb5\u548c\u672b\u5e27\u6539\u7684\u72b6\u6001\u4e0d\u540c\u5904\u7406;\n *      2022.06.01: \u6709\u53cd\u9988\u65f6,\u7ee7\u7eed\u8c03\u7528TCScore (\u53c2\u800326185-TODO2);\n *      2022.06.01: HDemand.targetAlg\u63d0\u524d\u53cd\u9988\u65f6,HDemand\u8bbe\u4e3afinish\u72b6\u6001 (\u53c2\u800326185-TODO6);\n *      2022.11.27: H\u4efb\u52a1\u5b8c\u6210\u65f6,H\u5f53\u524d\u6b63\u6267\u884c\u7684S\u63d0\u524d\u5b8c\u6210,\u5e76\u8fdb\u884c\u5916\u7c7b\u6bd4 (\u53c2\u800327206c-H\u4efb\u52a1);\n *      2022.11.27: H\u89e3\u51b3\u65b9\u6848\u518d\u7c7b\u6bd4\u65f6,\u4e3a\u5176\u751f\u6210indexDic (\u53c2\u800327206d-\u65b9\u68482);\n *      2023.10.27: \u7528\u5171\u540c\u62bd\u8c61\u5224\u65adcansetAlg\u53cd\u9988: \u53d6\u51fatargetAlg\u7684abs\u5c42,\u5e76\u4e0e\u8bc6\u522b\u7684matchAlgs\u5224\u65ad\u4ea4\u96c6 (\u53c2\u80033014c-todo1);\n *      2023.12.09: \u9884\u60f3\u4e0e\u5b9e\u9645\u7c7b\u6bd4\u6784\u5efaabsCanset\u4ee5\u573a\u666f\u5185\u9632\u91cd (\u53c2\u80033101b-todo6);"
        },
        {
            "comment": "This code updates the TOR with a new frame and performs short-term memory update. It also initializes waitModels array and gets recognition algorithms for a given model, iterates through deep out models of roots and adds them to waitModels.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":245-262",
            "content": " *      2024.01.10: \u6539\u4e3a\u5728feedbackTOR\u6709\u53cd\u9988\"RCansetA\u6709\u6548\"\u65f6,\u76f4\u63a5\u751f\u6210newHCanset,\u907f\u514d\u539f\u672c\u5728OR\u53cd\u7701\u65f6\u540e\u9762\u4f1a\u6709\u65e0\u5173\u5e27\u6392\u5230\u540e\u6bb5\u7684\u95ee\u9898 (\u53c2\u800331061-todo1);\n *      2024.01.11: H\u652f\u6301\u6301\u7eed\u53cd\u9988 (\u53c2\u800331063-todo1);\n *  @bug\n *      2020.09.22: \u52a0\u4e0acutStopStatus,\u907f\u514d\u540c\u4e00waitModel\u88ab\u591a\u6b21\u89e6\u53d1,\u5bfc\u81f4BUG (\u53c2\u800321042);\n *      2020.12.26: GL\u65f6,waitType\u7684\u5224\u65ad\u6539\u4e3abFo,\u56e0\u4e3a\u53ea\u6709bFo\u624d\u643a\u5e26\u4e86waitTypeDS (\u53c2\u800321204);\n *      2020.12.26: GL\u65f6,\u572821204BUG\u4fee\u590d\u540e\u8bad\u7ec3\u65f6,\u53d1\u73b0mIsC\u6709\u65f6\u662fcIsM,\u6240\u4ee5\u90fd\u5224\u65ad\u4e0b;\n *      2020.12.26: \u5728OPushM\u7ee7\u7eedPM\u524d,replaceAlg\u65f6,\u91cd\u65b0\u8d4b\u503cJustPValues=P-C (\u53c2\u800321206);\n *      2023.11.07: \u9884\u60f3\u4e0e\u5b9e\u9645\u7c7b\u6bd4,\u5b9e\u9645hCanset\u91c7\u7528pFo.maskRealFo\u6765\u751f\u6210 (\u53c2\u800330154-todo2);\n */\n+(void) feedbackTOR:(AIShortMatchModel*)model{\n    //1. \u5c06\u65b0\u4e00\u5e27\u6570\u636e\u62a5\u544a\u7ed9TOR,\u4ee5\u8fdb\u884c\u77ed\u65f6\u8bb0\u5fc6\u7684\u66f4\u65b0,\u6bd4\u5982\u6211\u8f93\u51fa\u884c\u4e3a\"\u6253\",\u77ed\u65f6\u8bb0\u5fc6\u7531\u6b64\u77e5\u9053\u8f93\u51fa\"\u6253\"\u6210\u529f (\u5916\u5faa\u73af\u5165->\u63a8\u8fdb->\u4e2d\u5faa\u73af\u51fa);\n    [theTC updateOperCount:kFILENAME];\n    Debug();\n    NSMutableArray *waitModels = [[NSMutableArray alloc] init];\n    NSArray *recognitionAlgs = [TIUtils getMatchAndPartAlgPsByModel:model];\n    NSArray *roots = [theTC.outModelManager.getAllDemand copy];\n    for (ReasonDemandModel *root in roots) {\n        [waitModels addObjectsFromArray:[TOUtils getSubOutModels_AllDeep:root validStatus:nil]];"
        },
        {
            "comment": "The code checks the validity of waitModels, continues if it is not valid, and processes feedback for valid models. It also handles HDemandModel and retrieves targetAlg and targetFo from it.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":263-280",
            "content": "    }\n    IFTitleLog(@\"feedbackTOR\", @\"\\n\u8f93\u5165ProtoA:%@ (\u8bc6\u522bmatchAlgs\u6570:%ld)\\n\u7b49\u5f85\u4e2d\u4efb\u52a1\u6570:%lu\",Alg2FStr(model.protoAlg),recognitionAlgs.count,(long)waitModels.count);\n    //2. \u4fdd\u7559/\u66f4\u65b0\u5b9e\u9645\u53d1\u751f\u5230outModel (\u901a\u8fc7\u4e86\u6709\u6548\u5224\u65ad\u7684,\u5c06\u5b9e\u9645\u6982\u5ff5\u76f4\u63a5\u5b58\u7559\u5230waitModel);\n    for (TOAlgModel *waitModel in waitModels) {\n        //3. waitModel\u6709\u6548\u68c0\u67e5;\n        if (!ISOK(waitModel, TOAlgModel.class) || !ISOK(waitModel.baseOrGroup, TOFoModel.class)) continue;\n        //if (Log4OPushM) NSLog(@\"==> checkTOModel: %@\",Pit2FStr(waitModel.content_p));\n        //4. ============= H\u8fd4\u56de\u7684\u6709\u6548\u5224\u65ad =============\n        if (ISOK(waitModel.baseOrGroup.baseOrGroup, HDemandModel.class)) {\n            //5. HDemand\u5373\u4f7fwaitModel\u4e0d\u662factYes\u72b6\u6001\u4e5f\u5904\u7406\u53cd\u9988;\n            TOFoModel *solutionModel = (TOFoModel*)waitModel.baseOrGroup;    //h\u89e3\u51b3\u65b9\u6848;\n            HDemandModel *hDemand = (HDemandModel*)solutionModel.baseOrGroup;//h\u9700\u6c42\u6a21\u578b\n            TOAlgModel *targetAlg = (TOAlgModel*)hDemand.baseOrGroup;   //hDemand\u7684\u76ee\u6807alg;\n            TOFoModel *targetFo = (TOFoModel*)targetAlg.baseOrGroup;    //hDemand\u7684\u76ee\u6807alg\u6240\u5728\u7684fo;"
        },
        {
            "comment": "This code is checking if the input matches the algorithm (hAlg). It tests the model using a specific waitAlg and then determines if the recognitionAlgs match the targetAlg. If they do, it sets the feedbackAlg and status to OuterBack for the next frame in case of a continuing action or Finish if it's the last frame.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":282-298",
            "content": "            //6. \u5224\u65adinput\u662f\u5426\u4e0ehAlg\u76f8\u5339\u914d (\u5339\u914d,\u6bd4\u5982\u627e\u9524\u5b50,\u770b\u5230\u9524\u5b50\u4e86);\n            [AITest test11:model waitAlg_p:targetAlg.content_p];//\u6d4b\u4e0b2523c-\u6b64\u5904\u662f\u5426\u4f1a\u5bfc\u81f4\u5339\u914d\u4e0d\u5230;\n            BOOL mcIsBro = [TOUtils mcIsBro:recognitionAlgs cansetA:targetAlg.content_p]; //\u7528\u5171\u540c\u62bd\u8c61\u5224\u65adcansetAlg\u53cd\u9988 (\u53c2\u80033014c-todo1);\n            if (Log4OPushM) NSLog(@\"HCansetA\u6709\u6548:M(A%ld) C:%@ \u7ed3\u679c:%d\",model.protoAlg.pId,Pit2FStr(targetAlg.content_p),mcIsBro);\n            if (mcIsBro) {\n                //6. \u8bb0\u5f55feedbackAlg (\u53c2\u800327204-1);\n                waitModel.feedbackAlg = model.protoAlg.pointer;\n                waitModel.status = TOModelStatus_OuterBack;\n                BOOL isEndFrame = solutionModel.actionIndex == solutionModel.targetSPIndex;\n                //a. H\u53cd\u9988\u4e2d\u6bb5: \u6807\u8bb0OuterBack,solutionFo\u7ee7\u7eed;\n                if (!isEndFrame) {\n                    solutionModel.status = TOModelStatus_Runing;\n                    hDemand.status = TOModelStatus_Runing;\n                }else{\n                    //b. H\u53cd\u9988\u672b\u5e27:\n                    solutionModel.status = TOModelStatus_Finish;"
        },
        {
            "comment": "Updates the frame, triggers feedback regrouping and scoring if necessary, handles two types of frameAlgs (behavior output, and hDemand's ActYes state), checks for successful silence judgments.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":299-321",
            "content": "                    hDemand.status = TOModelStatus_Finish;\n                    targetAlg.status = TOModelStatus_OuterBack;\n                    targetAlg.feedbackAlg = model.protoAlg.pointer;\n                    targetFo.status = TOModelStatus_Runing;\n                }\n                //c. \u6700\u7ec8\u53cd\u9988\u4e86feedbackAlg\u65f6,\u91cd\u7ec4 & \u53cd\u601d;\n                dispatch_async(dispatch_get_main_queue(), ^{//30083\u56de\u540c\u6b65\n                    [theTV updateFrame];\n                });\n                if (isEndFrame) [TCRegroup feedbackRegroup:targetFo feedbackFrameOfMatchAlgs:model.matchAlgs];\n                DebugE();\n                [TCScore scoreFromIfTCNeed];\n            }\n        }\n        //7. ============= \"\u884c\u4e3a\u8f93\u51fa\" \u548c \"demand.ActYes\" \u548c \"\u9759\u9ed8\u6210\u529f \u7684\u6709\u6548\u5224\u65ad =============\n        //\u6b64\u5904\u6709\u4e24\u79cdframeAlg,\u7b2c1\u79cd\u662fisOut\u4e3atrue\u7684\u884c\u4e3a\u53cd\u9988,\u7b2c2\u79cd\u662fhDemand.baseAlg;\n        if (ISOK(waitModel.baseOrGroup.baseOrGroup, ReasonDemandModel.class)) {\n            //8. RDemand\u53ea\u5904\u7406ActYes\u72b6\u6001\u7684;\n            //2024.01.11: H\u652f\u6301\u6301\u7eed\u53cd\u9988 (\u53c2\u800331063-todo1);\n            if (waitModel.status != TOModelStatus_ActYes && waitModel.status != TOModelStatus_OuterBack) continue;"
        },
        {
            "comment": "This code block is checking if the input matches with the waitModel (frameAlg). It also tests whether the recognitionAlgs are valid and then uses the common abstract (cansetA) to determine the feedback. If the feedback is true, it will compare it with previous feedbacks and calculate the matching degree between them.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":322-335",
            "content": "            TOAlgModel *frameAlg = waitModel;                          //\u7b49\u5f85\u4e2d\u7684\u76ee\u6807alg;\n            TOFoModel *solutionModel = (TOFoModel*)frameAlg.baseOrGroup;    //\u76ee\u6807alg\u6240\u5728\u7684fo;\n            HDemandModel *subHDemand = [SMGUtils filterSingleFromArr:frameAlg.subDemands checkValid:^BOOL(id item) {\n                return ISOK(item, HDemandModel.class);\n            }];\n            //9. \u5224\u65adinput\u662f\u5426\u4e0e\u7b49\u5f85\u4e2dwaitModel\u76f8\u5339\u914d (\u5339\u914d,\u6bd4\u5982\u5403,\u786e\u5b9a\u81ea\u5df1\u662f\u5426\u771f\u5403\u4e86);\n            [AITest test11:model waitAlg_p:frameAlg.content_p];//\u6d4b\u4e0b2523c-\u6b64\u5904\u662f\u5426\u4f1a\u5bfc\u81f4\u5339\u914d\u4e0d\u5230;\n            BOOL mcIsBro = [TOUtils mcIsBro:recognitionAlgs cansetA:frameAlg.content_p]; //\u7528\u5171\u540c\u62bd\u8c61\u5224\u65adcansetAlg\u53cd\u9988 (\u53c2\u80033014c-todo1);\n            if (Log4OPushM) NSLog(@\"RCansetA\u6709\u6548:M(A%ld) C(A%ld) \u7ed3\u679c:%d CAtFo:%@\",model.protoAlg.pointer.pointerId,frameAlg.content_p.pointerId,mcIsBro,Pit2FStr(solutionModel.content_p));\n            if (mcIsBro) {\n                //TODOTOMORROW20240111:\n                //a. \u5224\u65ad\u672c\u6b21\u53cd\u9988\u662f\u5426\u6bd4\u65e7\u6709\u53cd\u9988\u66f4\u5339\u914d (\u53c2\u800331063-todo2);\n                //  \u73b0\u7ed3\u6784. protoAlg\u548ccansetA\u5728abs\u6709\u4ea4\u96c6: \u4ea4\u96c6\u4e0eprotoA\u7684\u5339\u914d\u5ea6\u53ef\u8ba1\u7b97 & \u4ea4\u96c6\u4e0ecansetA\u7684\u5339\u914d\u5ea6\u53ef\u8ba1\u7b97;"
        },
        {
            "comment": "This code sets the frameAlg's status to OuterBack, assigns the protoAlg pointer to feedbackAlg, sets solutionModel's status to Runing. If subHDemand is present, it changes its status to Finish. It collects realMaskFo and generates a new hCanset when mcIsBro equals true. This code also searches for a specific node within solutionModel's content and retrieves the convertOrders4NewCansetV2 from basePFo.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":336-354",
            "content": "                //  \u65b9\u68481. protoA\u548ccansetA,\u5206\u522b\u4e0e\u4ea4\u96c6,\u8ba1\u7b97\u5e73\u5747\u5339\u914d\u5ea6,\u4e8c\u8005\u76f8\u4e58\u5f97\u5230\u7efc\u5408\u5339\u914d\u5ea6;\n                //  \u65b9\u68482. protoA\u548ccansetA,\u5206\u522b\u4e0e\u4ea4\u96c6\u4e2d\u7684\u6bcf\u4e00\u6761\u8ba1\u7b97\u4e24\u4e2a\u5339\u914d\u5ea6,\u5e76\u5c06\u4e24\u4e2a\u5339\u914d\u5ea6\u76f8\u4e58,\u627e\u51fa\u76f8\u4e58\u503c\u6700\u5927\u7684,\u505a\u4e3a\u6700\u7ec8\u5339\u914d\u5ea6;\n                //a. \u8d4b\u503c\n                frameAlg.status = TOModelStatus_OuterBack;\n                frameAlg.feedbackAlg = model.protoAlg.pointer;\n                solutionModel.status = TOModelStatus_Runing;\n                //b. \u5f53waitModel\u4e3ahDemand.targetAlg\u65f6,\u6b64\u5904\u63d0\u524d\u53cd\u9988\u4e86,hDemand\u6539\u4e3afinish\u72b6\u6001 (\u53c2\u800326185-TODO6);\n                if (subHDemand) subHDemand.status = TOModelStatus_Finish;\n                //c. \u6536\u96c6\u771f\u5b9e\u53d1\u751frealMaskFo,\u6536\u96c6\u6210hCanset (\u53c2\u800330131-todo1 & 30132-\u65b9\u6848);\n                //2023.12.29: mcIsBro=true\u65f6,\u751f\u6210\u65b0hCanset (\u505a31026-\u7b2c2\u6b65\u65f6\u4e34\u65f6\u8d77\u610f\u6539\u7684);\n                if (ISOK(solutionModel.basePFoOrTargetFoModel, AIMatchFoModel.class)) {\n                    AIFoNodeBase *rCanset = [SMGUtils searchNode:solutionModel.content_p];\n                    AIMatchFoModel *basePFo = (AIMatchFoModel*)solutionModel.basePFoOrTargetFoModel;\n                    NSArray *order = [basePFo convertOrders4NewCansetV2];"
        },
        {
            "comment": "The code block checks if an order is successful and updates the current scene feedback set with a new one. It then logs relevant information and proceeds to reassemble and update the TV frame, score, and perform regrouping based on the solution model's match algorithms.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":355-373",
            "content": "                    if (ARRISOK(order) && solutionModel.actionIndex < rCanset.count) {\n                        AIFoNodeBase *hCanset = [theNet createConFoForCanset:order sceneFo:rCanset sceneTargetIndex:solutionModel.actionIndex];\n                        [rCanset updateConCanset:hCanset.pointer targetIndex:solutionModel.actionIndex];\n                        NSLog(@\"1.feedbackTOR\u4e3arScene:%@\\n2.rCanset:%@... \u7684\u7b2c%ld\u5e27:%@\\n3.\u6302\u8f7dNewHCanset:%@\",Pit2FStr(basePFo.matchFo),SUBSTR2INDEX(Fo2FStr(rCanset), 50),solutionModel.actionIndex+1,Pit2FStr(ARR_INDEX(rCanset.content_ps, solutionModel.actionIndex)),Fo2FStr(hCanset));\n                    }\n                }\n                //c. \u91cd\u7ec4\n                dispatch_async(dispatch_get_main_queue(), ^{//30083\u56de\u540c\u6b65\n                    [theTV updateFrame];\n                });\n                DebugE();\n                [TCRegroup feedbackRegroup:solutionModel feedbackFrameOfMatchAlgs:model.matchAlgs];\n                [TCScore scoreFromIfTCNeed];\n            }\n        }\n    }\n    //2. ============== \u5bf9HDemand\u53cd\u9988\u5224\u65ad =============="
        },
        {
            "comment": "Collecting all working memory H tasks:\nThis code retrieves all HDemand models from the working memory tree and stores them in a mutable array. It also filters out any non-HDemand model items.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":374-396",
            "content": "    //a. \u6536\u96c6\u6240\u6709\u5de5\u4f5c\u8bb0\u5fc6\u6811\u7684H\u4efb\u52a1;\n    NSMutableArray *allHDemands = [[NSMutableArray alloc] init];\n    for (DemandModel *root in roots) {\n        NSArray *singleHDemands = [SMGUtils filterArr:[TOUtils getSubOutModels_AllDeep:root validStatus:nil] checkValid:^BOOL(TOModelBase *item) {\n            return ISOK(item, HDemandModel.class);\n        }];\n        [allHDemands addObjectsFromArray:singleHDemands];\n    }\n    //b. \u53cd\u9988\u5339\u914d (\u6bd4\u5982\u627e\u9524\u5b50,\u770b\u5230\u9524\u5b50\u4e86);\n    for (HDemandModel *hDemand in allHDemands) {\n        TOAlgModel *targetAlg = (TOAlgModel*)hDemand.baseOrGroup;   //hDemand\u7684\u76ee\u6807alg;\n        BOOL mcIsBro = [TOUtils mcIsBro:recognitionAlgs cansetA:targetAlg.content_p]; //\u7528\u5171\u540c\u62bd\u8c61\u5224\u65adcansetAlg\u53cd\u9988 (\u53c2\u80033014c-todo1);\n        if (mcIsBro) {\n            //c. \u660e\u786e\u6709\u6548;\n            targetAlg.feedbackAlg = model.protoAlg.pointer;\n            hDemand.effectStatus = ES_HavEff;\n            hDemand.status = TOModelStatus_Finish;\n            //8. H\u4efb\u52a1\u5b8c\u6210\u65f6,H\u5f53\u524d\u6b63\u6267\u884c\u7684S\u63d0\u524d\u5b8c\u6210,\u5e76\u8fdb\u884c\u5916\u7c7b\u6bd4 (\u53c2\u800327206c-H\u4efb\u52a1);\n            //2023.11.03: \u5373\u4f7f\u5931\u8d25\u4e5f\u53ef\u4ee5\u89e6\u53d1\"\u9884\u60f3\u4e0e\u5b9e\u9645\"\u7684\u7c7b\u6bd4\u62bd\u8c61;\n            for (TOFoModel *solutionModel in hDemand.actionFoModels) {"
        },
        {
            "comment": "This code snippet appears to be part of a machine learning or AI model, specifically for feedback and evaluation. It prepares the necessary data, generates a protoFo using realMaskFo & realDeltaTimes, converts orders based on a pFo, creates a newHCanset, checks its count, and then compares the HCanset with the actual state and logs it. This seems to be part of a larger process involving targetFoModel, TOModelStatus, SMGUtils, and TOUtils.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":397-411",
            "content": "                [AITest test17];\n                if (solutionModel.status == TOModelStatus_ActYes || solutionModel.status == TOModelStatus_Runing || solutionModel.status == TOModelStatus_ActNo) {\n                    //a. \u6570\u636e\u51c6\u5907;\n                    AIFoNodeBase *solutionFo = [SMGUtils searchNode:solutionModel.content_p];\n                    TOFoModel *targetFoModel = (TOFoModel*)hDemand.baseOrGroup;\n                    AIFoNodeBase *targetFo = [SMGUtils searchNode:targetFoModel.content_p];\n                    AIMatchFoModel *pFo = [TOUtils getBasePFoWithSubOutModel:solutionModel];\n                    //b. \u7528realMaskFo & realDeltaTimes\u751f\u6210protoFo (\u53c2\u800330154-todo2);\n                    NSArray *orders = [pFo convertOrders4NewCansetV2];\n                    AIFoNodeBase *newHCanset = [theNet createConFo:orders];\n                    if (newHCanset.count <= 1) continue;\n                    //h. \u5916\u7c7b\u6bd4 & \u5e76\u5c06\u7ed3\u679c\u6301\u4e45\u5316 (\u6302\u5230\u5f53\u524d\u76ee\u6807\u5e27\u4e0b\u6807targetFoModel.actionIndex\u4e0b) (\u53c2\u800327204-4&8);\n                    NSLog(@\"HCanset\u9884\u60f3\u4e0e\u5b9e\u9645\u7c7b\u6bd4: (\u72b6\u6001:%@"
        },
        {
            "comment": "Updates the content-pointer and converts the old index dictionary to a new one for a specific action index, then updates the index dictionary of the resultant content.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":411-421",
            "content": " fromTargetFo:F%ld) \\n\\t\u5f53\u524dCanset:%@\",TOStatus2Str(solutionModel.status),targetFoModel.content_p.pointerId,Pit2FStr(solutionModel.content_p));\n                    NSArray *noRepeatArea_ps = [targetFo getConCansets:targetFoModel.actionIndex];\n                    AIFoNodeBase *absCansetFo = [AIAnalogy analogyOutside:newHCanset assFo:solutionFo type:ATDefault noRepeatArea_ps:noRepeatArea_ps];\n                    BOOL updateCansetSuccess = [targetFo updateConCanset:absCansetFo.pointer targetIndex:targetFoModel.actionIndex];\n                    [AITest test101:absCansetFo proto:newHCanset conCanset:solutionFo];\n                    if (updateCansetSuccess) {\n                        //j. \u8ba1\u7b97\u51faabsCansetFo\u7684indexDic & \u5e76\u5c06\u7ed3\u679c\u6301\u4e45\u5316 (\u53c2\u800327207-7\u81f311);\n                        NSDictionary *newIndexDic = [solutionModel convertOldIndexDic2NewIndexDic:targetFoModel.content_p];\n                        [absCansetFo updateIndexDic:targetFo indexDic:newIndexDic];\n                        [AITest test18:newIndexDic newCanset:absCansetFo absFo:targetFo];"
        },
        {
            "comment": "This code appears to be part of a larger program that involves decision-making and feedback processing. It seems to involve updating an `absCansetFo` object with a new SPDIC, testing it, and performing some decision-making based on the status of a `solutionModel`. The comments also mention multiple updates and bug fixes, suggesting ongoing development and maintenance of this code.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":423-446",
            "content": "                        //k. \u7b97\u51faspDic (\u53c2\u800327213-5);\n                        [absCansetFo updateSPDic:[solutionModel convertOldSPDic2NewSPDic]];\n                        [AITest test20:absCansetFo newSPDic:absCansetFo.spDic];\n                    }\n                } else {\n                    NSLog(@\"HCanset\u9884\u60f3\u4e0e\u5b9e\u9645\u7c7b\u6bd4\u672a\u6267\u884c,F%ld \u72b6\u6001:%ld\",solutionModel.content_p.pointerId,solutionModel.status);\n                }\n            }\n        }\n    }\n    DebugE();\n}\n/**\n *  MARK:--------------------\"\u5916\u5c42\u8f93\u5165\" \u63a8\u8fdb \"\u4e2d\u5c42\u5faa\u73af\" \u51b3\u7b56--------------------\n *  @title \u5916\u5c42\u8f93\u5165\u5bf9Out\u77ed\u65f6\u8bb0\u5fc6\u7684ReasonDemandModel\u5f71\u54cd\u5904\u7406 (\u53c2\u800322061-8);\n *  @version\n *      2021.02.04: \u5c06R\u540c\u533a\u540c\u5411(\u4f1a\u5bfc\u81f4\u6c38\u8fdc\u4e3afalse\u56e0\u4e3a\u865amv\u5f97\u5206\u4e3a0)\u5224\u65ad,\u6539\u4e3a\u540c\u533a\u53cd\u5411\u5224\u65ad (\u53c2\u800322115BUG & 22108\u865amv\u53cd\u9988\u5224\u65ad\u65b9\u6cd5);\n *      2021.12.23: feedback\u65f6,\u5c06root\u8bbe\u56deruning\u72b6\u6001 (\u53c2\u800324212-8);\n *      2021.12.24: \u5e94\u5bf9\u6574\u4e2a\u5de5\u4f5c\u8bb0\u5fc6\u6811\u8fdb\u884c\u652f\u6301,\u800c\u4e0d\u662f\u4ec5rootDemands (\u53c2\u800325032-6);\n *      2021.12.26: \u9488\u5bf9rSolution\u7684\u611f\u6027\u53cd\u9988 (\u53c2\u800325031-11 & 25032-6);\n *      2022.05.22: R\u4efb\u52a1\u6709\u6548\u6027\u53cd\u9988\u72b6\u6001\u66f4\u65b0 (\u53c2\u800326095-3);\n *      2022.05.29: \u53cd\u9988\u4e0edemand.mv\u5bf9\u6bd4\u5339\u914d,\u800c\u4e0d\u662fsolutionFo (\u53c2\u800326141-BUG1);\n *      2022.06.03: \u5c06roots\u6d45\u590d\u5236,\u907f\u514d\u5f3a\u8bad\u8fc7\u7a0b\u4e2d\u56e0loopCache\u53d8\u5316\u800c\u95ea\u9000;"
        },
        {
            "comment": "This code performs the following actions:\n1. Checks for valid input data (delta).\n2. Updates the operating count of the Task Controller.\n3. Logs feedbackTOP with the MV information.\n4. Tries to process all waiting tasks (Reason and Percept demands).\n5. Skips non-FO solutions, non-R, and non-P tasks.\n6. Skips tasks not in ActYes status.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":447-471",
            "content": " *      2022.09.06: TC\u6d41\u7a0b\u8c03\u6574_\u76f4\u63a5\u8c03\u7528TCDemand (\u53c2\u800327096-\u5b9e\u8df51);\n *      2022.11.23: \u8bb0\u5f55feedbackMv (\u53c2\u800327204-2);\n */\n+(void) feedbackTOP:(AICMVNode*)cmvNode{\n    //1. \u6570\u636e\u68c0\u67e5\n    NSInteger delta = [NUMTOOK([AINetIndex getData:cmvNode.delta_p]) integerValue];\n    if (delta == 0) return;\n    [theTC updateOperCount:kFILENAME];\n    Debug();\n    IFTitleLog(@\"feedbackTOP\", @\"\\n\u8f93\u5165MV:%@\",Mv2FStr(cmvNode));\n    //2. ============== \u5bf9\u6240\u6709\u7b49\u5f85\u4e2d\u7684\u4efb\u52a1\u5c1d\u8bd5\u5904\u7406 (R-\u4efb\u52a1); ==============\n    NSArray *roots = [theTC.outModelManager.getAllDemand copy];\n    for (ReasonDemandModel *root in roots) {\n        NSArray *waitModels = [TOUtils getSubOutModels_AllDeep:root validStatus:@[@(TOModelStatus_ActYes)]];\n        for (TOFoModel *waitModel in waitModels) {\n            //3. wait\u4e0d\u4e3afo\u89e3\u51b3\u65b9\u6848\u65f6\u4e0d\u5904\u7406;\n            if (!ISOK(waitModel, TOFoModel.class)) continue;\n            //4. \u975eR\u4e5f\u975eP\u4efb\u52a1\u65f6,\u4e0d\u5904\u7406;\n            if (!ISOK(waitModel.baseOrGroup, ReasonDemandModel.class) && !ISOK(waitModel.baseOrGroup, PerceptDemandModel.class)) continue;\n            //5. \u975eactYes\u72b6\u6001\u4e0d\u5904\u7406;\n            if (waitModel.status != TOModelStatus_ActYes) continue;"
        },
        {
            "comment": "This code is part of a larger system that appears to be involved in task management and feedback processing. The code seems to be checking if the current wait model (a specific task) has reached its end, and if not, it continues without processing. It then compares the hope (wait) with the new feedback and checks if they are the same or different. If they are the same, it records the feedbackMv and proceeds to check if there is a match. If the match fails, the status of the task model is set to OuterBack, indicating a failed attempt. The root status is also reset back to running.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":473-495",
            "content": "            //6. \u672a\u5230\u672b\u5c3e,\u4e0d\u5904\u7406;\n            AIFoNodeBase *waitFo = [SMGUtils searchNode:waitModel.content_p];\n            if (waitModel.actionIndex < waitFo.count) continue;\n            //7. waitFo\u662f\u4e3a\u4e86\u89e3\u51b3\u4efb\u52a1,\u6240\u4ee5\u8981\u53d6\u51fa\u539f\u4efb\u52a1\u7684mv\u6807\u8bc6\u6765\u6bd4\u8f83;\n            //7. \u5224\u65adhope(wait)\u548creal(new)\u4e4b\u95f4\u662f\u5426\u76f8\u7b26 (\u5f53\u53cd\u9988\u4e86\"\u540c\u533a\u53cd\u5411\"\u65f6,\u5373\u8868\u660e\u4efb\u52a1\u5931\u8d25,\u4e3aS);\n            DemandModel *demand = (DemandModel*)waitModel.baseOrGroup;\n            BOOL sameIden = [cmvNode.pointer.algsType isEqualToString:demand.algsType];\n            if (sameIden) {\n                //7. \u8bb0\u5f55feedbackMv (\u53c2\u800327204-2);\n                waitModel.feedbackMv = cmvNode.pointer;\n                //7. \u540c\u5411\u5339\u914d (\u6bd4\u5982\u649e\u75bc,\u786e\u5b9a\u75bc\u4e86);\n                CGFloat score = [AIScore score4MV:cmvNode.pointer ratio:1.0f];\n                if (score < 0) {\n                    waitModel.status = TOModelStatus_OuterBack;\n                    NSLog(@\"top_OPushM: \u65b9\u6848\u5931\u8d25\u53cd\u9988OutBack\");\n                    //7. root\u8bbe\u56deruning\n                    demand.status = TOModelStatus_Runing;\n                    root.status = TOModelStatus_Runing;\n                }else{"
        },
        {
            "comment": "This code section is responsible for updating the feedback status in a model based on various conditions. It collects all work memory tasks of type R, compares their matching status, and updates the corresponding model's status accordingly. If the feedback score is high enough, it triggers synchronization to update the UI on the main queue.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":496-519",
            "content": "                    //8. solutionFo\u53cd\u9988\u597d\u65f6,baseDemand\u4e3a\u5b8c\u6210\u72b6\u6001;\n                    waitModel.baseOrGroup.status = TOModelStatus_Finish;\n                }\n                dispatch_async(dispatch_get_main_queue(), ^{//30083\u56de\u540c\u6b65\n                    [theTV updateFrame];\n                });\n            }\n        }\n    }\n    //2. ============== \u5bf9Demand\u53cd\u9988\u5224\u65ad ==============\n    //a. \u6536\u96c6\u6240\u6709\u5de5\u4f5c\u8bb0\u5fc6\u6811\u7684R\u4efb\u52a1;\n    NSMutableArray *allRDemands = [[NSMutableArray alloc] init];\n    for (ReasonDemandModel *root in roots) {\n        NSArray *singleRDemands = [SMGUtils filterArr:[TOUtils getSubOutModels_AllDeep:root validStatus:nil] checkValid:^BOOL(TOModelBase *item) {\n            return ISOK(item, ReasonDemandModel.class);\n        }];\n        [allRDemands addObjectsFromArray:singleRDemands];\n    }\n    //b. \u53cd\u9988\u5339\u914d => \u540c\u533a\u5224\u65ad \u4e14 \u90fd\u4e3a\u8d1f\u4ef7\u503c (\u6bd4\u5982\u649e\u75bc,\u786e\u5b9a\u75bc\u4e86);\n    for (ReasonDemandModel *rDemand in allRDemands) {\n        if ([rDemand.algsType isEqualToString:cmvNode.pointer.algsType]) {\n            CGFloat newMvScore = [AIScore score4MV:cmvNode.pointer ratio:1.0f];"
        },
        {
            "comment": "The code checks if the new movement score (newMvScore) is less than 0. If it is, then it sets the effect status of rDemand to ES_NoEff and its status to TOModelStatus_ActNo. This indicates that the demand is clearly ineffective. Additionally, this section of code is associated with task p and includes a DebugE() function call and pDemand method for cmvNode.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCFeedback/TCFeedback.m\":520-533",
            "content": "            if (newMvScore < 0) {\n                //c. \u660e\u786e\u65e0\u6548;\n                rDemand.effectStatus = ES_NoEff;\n                rDemand.status = TOModelStatus_ActNo;\n            }\n        }\n    }\n    //3. p\u4efb\u52a1;\n    DebugE();\n    [TCDemand pDemand:cmvNode];\n}\n@end"
        }
    ]
}