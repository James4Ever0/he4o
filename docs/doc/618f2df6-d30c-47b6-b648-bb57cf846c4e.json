{
    "summary": "This code implements a TOMVision2 class for managing view size adjustments, focus animations, and long tap/double tap events in panel views. It sets zoom scale for scroll views and auto adjusts content size while handling zooming functionality through UIScrollView delegate method.",
    "details": [
        {
            "comment": "This code imports various headers and declares properties for a TOMVision2 class which conforms to TVPanelViewDelegate and UIScrollViewDelegate protocols. The class has outlets for containerView, scrollView, contentView, panelView, timeLine, changeIndex, and tipLab variables.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":0-34",
            "content": "//\n//  TOMVision2.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2022/3/13.\n//  Copyright \u00a9 2022\u5e74 XiaoGang. All rights reserved.\n//\n#import \"TOMVision2.h\"\n#import \"MASConstraint.h\"\n#import \"View+MASAdditions.h\"\n#import \"AIKVPointer.h\"\n#import \"TOMVisionItemModel.h\"\n#import \"UIView+Extension.h\"\n#import \"TOMVisionFoView.h\"\n#import \"TOMVisionDemandView.h\"\n#import \"TOMVisionFoView.h\"\n#import \"TOMVisionAlgView.h\"\n#import \"TOModelVisionUtil.h\"\n#import \"UnorderItemModel.h\"\n#import \"TVPanelView.h\"\n#import \"TVLineView.h\"\n#import \"TVTimeLine.h\"\n#import \"TVUtil.h\"\n#import \"TVSettingWindow.h\"\n@interface TOMVision2 () <TVPanelViewDelegate,UIScrollViewDelegate>\n@property (strong,nonatomic) IBOutlet UIView *containerView;\n@property (strong, nonatomic) UIScrollView *scrollView;\n@property (strong, nonatomic) UIView *contentView;\n@property (strong, nonatomic) TVPanelView *panelView;\n@property (strong, nonatomic) TVTimeLine *timeLine;\n@property (assign, nonatomic) NSInteger changeIndex; //\u5f53\u524d\u663e\u793a\u7684index;\n@property (weak, nonatomic) IBOutlet UILabel *tipLab;"
        },
        {
            "comment": "Initializing the view, loading nib, adding subviews and setting constraints for TOMVision2 instance.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":35-70",
            "content": "@property (strong,nonatomic) UITapGestureRecognizer *doubleTap;\n@property (strong,nonatomic) UITapGestureRecognizer *singleTap;\n@property (strong,nonatomic) UILongPressGestureRecognizer *longTap;\n@end\n@implementation TOMVision2\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initView];\n        [self initData];\n        [self initDisplay];\n    }\n    return self;\n}\n-(void) initView{\n    //self\n    [self setFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];\n    //containerView\n    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self.class) owner:self options:nil];\n    [self addSubview:self.containerView];\n    [self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.leading.mas_equalTo(self);\n        make.trailing.mas_equalTo(self);\n        make.top.mas_equalTo(self);\n        make.bottom.mas_equalTo(self);\n    }];\n    //scrollView\n    self.scrollView = [[UIScrollView alloc] init];\n    [self.containerView addSubview:self.scrollView];\n    [self.scrollView setFrame:CGRectMake(0, 20, ScreenWidth, ScreenHeight - 20 - 40)];"
        },
        {
            "comment": "Sets scroll view properties and adds a content view, panel view, and time line view to the container view. Enables scroll indicators and sets their style to white. Adds a double tap gesture recognizer for interactivity.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":71-96",
            "content": "    [self.scrollView setShowsVerticalScrollIndicator:NO];\n    [self.scrollView setShowsHorizontalScrollIndicator:NO];\n    self.scrollView.delegate = self;\n    self.scrollView.minimumZoomScale = CGFLOAT_MIN;\n    self.scrollView.maximumZoomScale = CGFLOAT_MAX;\n    self.scrollView.showsHorizontalScrollIndicator = true;\n    self.scrollView.showsVerticalScrollIndicator = true;\n    self.scrollView.indicatorStyle = UIScrollViewIndicatorStyleWhite;\n    //contentView\n    self.contentView = [[UIView alloc] init];\n    [self.scrollView addSubview:self.contentView];\n    [self.contentView setBackgroundColor:[UIColor clearColor]];\n    [self.contentView setFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight - 60)];\n    //panelView\n    self.panelView = [[TVPanelView alloc] init];\n    self.panelView.delegate = self;\n    [self.containerView addSubview:self.panelView];\n    //timeLine\n    self.timeLine = [[TVTimeLine alloc] init];\n    self.timeLine.backgroundColor = UIColorWithRGBHexA(0xFFFFFF, 0);\n    //doubleTap\n    self.doubleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(doubleTap:)];"
        },
        {
            "comment": "This code initializes three gesture recognizers: double tap, single tap, and long tap. The double tap recognizer requires two taps and one touch, and is added to the scroll view. The single tap recognizer requires one tap and one touch, fails if the double tap recognizer is satisfied, and is also added to the scroll view. The long tap recognizer has a minimum press duration of 0.2 seconds and is also added to the scroll view. Additionally, there are methods for initializing data, display, updating the frame of panelView, and refreshing the display.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":97-129",
            "content": "    self.doubleTap.numberOfTapsRequired = 2;\n    self.doubleTap.numberOfTouchesRequired = 1;\n    [self.scrollView addGestureRecognizer:self.doubleTap];\n    //singleTap\n    self.singleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(singleTap:)];\n    self.singleTap.numberOfTapsRequired = 1;\n    self.singleTap.numberOfTouchesRequired = 1;\n    [self.singleTap requireGestureRecognizerToFail:self.doubleTap];\n    [self.scrollView addGestureRecognizer:self.singleTap];\n    //longTap\n    self.longTap = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(longTap:)];\n    self.longTap.minimumPressDuration = 0.2;\n    [self.scrollView addGestureRecognizer:self.longTap];\n}\n-(void) initData{\n}\n-(void) initDisplay{\n    [self close];\n}\n//MARK:===============================================================\n//MARK:                     < method >\n//MARK:===============================================================\n-(void) updateFrame{\n    [self.panelView updateFrame];\n}\n/**\n *  MARK:--------------------refreshDisplay--------------------"
        },
        {
            "comment": "1. Refresh display method, optional focus mode parameter\n2. Prepares data and retrieves model from panelView\n3. Clears all subviews in contentView\n4. Filters valid roots from frameModel using SMGUtils filterArr\n5. Calculates root group width considering space and node size",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":130-156",
            "content": " *  @version\n *      2022.03.19: \u5b50\u8282\u70b9\u4e0e\u6839\u8282\u70b9\u540c\u5c3a\u5bf8,\u53ea\u662f\u7f29\u653e\u4e86\u800c\u5df2 (\u5982\u679c\u8c03\u5c0f\u5c3a\u5bf8,\u7f29\u653e\u5c31\u6ca1\u610f\u4e49\u4e86);\n *      2022.03.22: \u6bcf\u5c42hSpace\u95f4\u9694\u4e3a\u5f53\u524d\u5c42\u76841.8\u500d (\u907f\u514d\u672b\u679d\u5f88\u5c0f\u5374\u95f4\u8ddd\u597d\u8fdc);\n *      2022.10.12: \u6539\u4e3a\u5148\u8fc7\u6ee4\u51fa\u6709\u6548roots,\u907f\u514d\u6392\u7248\u8fd8\u662f\u6309\u6240\u6709roots\u7b97,\u800c\u5bfc\u81f4\u6392\u7248\u9519\u8befBUG;\n */\n-(void) refreshDisplay{\n    [self refreshDisplay:false];\n}\n-(void) refreshDisplay:(BOOL)focusMode{\n    //1. \u6570\u636e\u51c6\u5907;\n    if (self.isHidden) return;\n    __block TOMVisionItemModel *frameModel = nil;\n    __block TOModelBase *changeModel = nil;\n    [self.panelView getModel:self.changeIndex complete:^(TOMVisionItemModel *_frameModel, TOModelBase *_changeModel) {\n        frameModel = _frameModel;\n        changeModel = _changeModel;\n    }];\n    //2. \u53d6\u51fa\u65e7\u6709\u8282\u70b9\u7f13\u5b58 & \u5e76\u6e05\u7a7a\u753b\u677f;\n    NSArray *oldSubViews = [self.contentView subViews_AllDeepWithClass:TOMVisionNodeBase.class];\n    [self.contentView removeAllSubviews];\n    //2. \u5237\u65b0\u663e\u793a_\u8ba1\u7b97\u6839\u8282\u70b9\u5bbd\u5ea6 (\u53c2\u800325182-4);\n    //\u6ce8: \u6392\u7248\u4e3a[-NNN--NNN-],\u5176\u4e2d-\u4e3a\u8282\u70b9\u95f4\u8ddd,NNN\u4e3a\u8282\u70b9\u5bbd\u5ea6,\u536060%;\n    //\u6ce8: rootGroupW\u6700\u5927\u5bbd\u5ea6\u4e3a250;\n    if (!frameModel) return;\n    NSArray *validRoots = [SMGUtils filterArr:frameModel.roots checkValid:^BOOL(DemandModel *demand) {"
        },
        {
            "comment": "This code handles setting switch processing. It checks if a specific demand should be displayed based on different settings switches, such as finish, expired, without, and action yes switch. If any of the switches are not enabled for the current demand, it returns false. Otherwise, it calculates the root group width and root node width and prepares to generate branches from the demand's root node using TOModelVisionUtil.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":157-180",
            "content": "        //3. \u663e\u793a\u8bbe\u7f6e\u5f00\u5173\u5904\u7406;\n        if (!self.panelView.settingWindow.finishSwitch) {\n            if (demand.status == TOModelStatus_Finish) return false;\n        }\n        if (!self.panelView.settingWindow.expiredSwitch) {\n            if (ISOK(demand, ReasonDemandModel.class) && ((ReasonDemandModel*)demand).isExpired) return false;\n        }\n        if (!self.panelView.settingWindow.withOutSwitch) {\n            if (demand.status == TOModelStatus_WithOut) return false;\n        }\n        if (!self.panelView.settingWindow.actYesSwitch) {\n            if ([TOUtils endHavActYes:demand]) return false;\n        }\n        return true;\n    }];\n    CGFloat rootGroupW = MIN(ScreenWidth / validRoots.count, 420);\n    CGFloat rootNodeW = rootGroupW * 0.6f;\n    for (DemandModel *demand in validRoots) {\n        //NSLog(@\"----------> root\u4e0b\u6811\u4e3a:\\n%@\",[TOModelVision cur2Sub:demand]);\n        //3. \u4ecedemand\u6839\u8282\u70b9\u9012\u5f52\u751f\u957f\u51fa\u5b83\u7684\u5206\u679d,\n        NSMutableArray *unorderModels = [TOModelVisionUtil convertCur2Sub2UnorderModels:demand];\n        //3. \u8f6c\u4e3anodeView"
        },
        {
            "comment": "1. Loops through unorderModels array.\n2. Creates new node for each unorderModel and stores it in nodeView variable.\n3. Adds the newly created node to contentView.\n4. If node is not a base or group, calculates x-coordinate based on index and root group width.\n5. Sets frame of root nodes with calculated x, tab number height, and fixed width/height.\n6. Scales container (root) nodes to 1x size.\n7. For each group node, retrieves sub models and creates base view if it exists and there are sub models.\n8. Calculates x-coordinate for subgroup nodes based on parent group's x - left space/node width ratio.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":181-205",
            "content": "        for (UnorderItemModel *unorder in unorderModels) {\n            //4. \u65b0\u5efa\u6839\u8282\u70b9;\n            TOMVisionNodeBase *nodeView = [self getOrCreateNode:unorder.data oldSubViews:oldSubViews];\n            [self.contentView addSubview:nodeView];\n            if (!nodeView.data.baseOrGroup) {\n                //4. nodeX = (\u5de6\u4fa7\u7a7a\u767d0.2 + \u4e0b\u6807) x \u7ec4\u5bbd;\n                NSInteger index = [validRoots indexOfObject:nodeView.data];\n                CGFloat nodeX = rootGroupW * (index + 0.2f);\n                //5. root\u8282\u70b9\u7684frame\u6307\u5b9a;\n                [nodeView setFrame:CGRectMake(nodeX, unorder.tabNum * 60, rootNodeW, rootNodeW / 5)];\n                //6. \u7f29\u653e\u6bd4\u4f8b\n                [nodeView scaleContainer:1.0f];\n            }else {\n                //6. \u5b50\u8282\u70b9\u7684frame\u6307\u5b9a;\n                TOMVisionNodeBase *baseView = [self getOrCreateNode:nodeView.data.baseOrGroup oldSubViews:oldSubViews];\n                NSMutableArray *subModels = [TOUtils getSubOutModels:nodeView.data.baseOrGroup];\n                if (baseView && ARRISOK(subModels)) {\n                    //7. \u5b50\u7ec4\u6700\u5de6X = \u7236\u7ec4X - \u5de6\u4fa7\u7a7a\u767d\u5904(\u4e3a\u8282\u70b9\u5bbd\u76841/3);"
        },
        {
            "comment": "This code calculates the position and scale of a sub-view (nodeView) within a base view. It uses variables such as baseView's width, x-coordinate, and its maximum y-coordinate to determine the nodeView's frame. The sub-views are positioned by considering the space needed for each one and adjusting the x-coordinate accordingly. Additionally, the code calculates the scale of the sub-view relative to the base view's width and applies this scale to the sub-view using the `scaleContainer` method.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":206-227",
            "content": "                    CGFloat subGroupMinX = baseView.x - baseView.width / 3.0f;\n                    //7. \u5b50\u5143\u7d20\u5bbd\u5ea6 = base\u5bbd\u5ea6 / \u5b50\u5143\u7d20\u6570;\n                    CGFloat subGroupW = baseView.width / 0.6f / subModels.count;\n                    CGFloat subNodeW = subGroupW * 0.6f;// (\u4e0d\u9700\u8981\u4e86,\u6839\u636esub/root\u7ec4\u5bbd\u5c31\u80fd\u7b97\u51fa\u7f29\u653e\u6bd4\u4f8b);\n                    //7. nodeX = (\u5de6\u4fa7\u7a7a\u767d0.2 + \u4e0b\u6807) x \u7ec4\u5bbd + groupMinX;\n                    NSInteger index = [subModels indexOfObject:nodeView.data];\n                    CGFloat nodeX = subGroupW * (0.2f + index) + subGroupMinX;\n                    //8. \u7b97\u51faY\u5750\u6807 (baseView\u4e0b\u65b9,\u81ea\u8eab\u9ad8\u5ea6\u76841.8\u500d);\n                    CGFloat nodeY = CGRectGetMaxY(baseView.frame) + subNodeW / 5 * 1.8f;\n                    //8. sub\u8282\u70b9\u7684frame\u6307\u5b9a;\n                    [nodeView setFrame:CGRectMake(nodeX, nodeY, subNodeW, subNodeW / 5)];\n                    //9. \u5bf9nodeView\u8fdb\u884c\u7f29\u653e (\u7f29\u653e\u6bd4\u4f8b = \u5b50\u5143\u7d20\u5bbd\u5ea6 / rootWidth);\n                    CGFloat scale = subGroupW / rootGroupW;\n                    [nodeView scaleContainer:scale];\n                    //10. \u8fde\u63a5\u7ebf\n                    TVLineView *line = [[TVLineView alloc] init];"
        },
        {
            "comment": "This code appears to be implementing various methods for managing and manipulating a view. It includes methods for opening, closing, clearing, and adjusting the content size of the view. There is also a private method for focus animation that involves changing the anchor point and adjusting subview positions. The comments describe different parts of the code and their functionality in detail.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":228-277",
            "content": "                    [self.contentView insertSubview:line atIndex:0];\n                    [line refreshDisplayWithDataA:nodeView nodeB:baseView];\n                }\n            }\n        }\n    }\n    //11. \u66f4\u65b0\u753b\u677f;\n    [self autoAdjustContentSize];\n    //12. \u66f4\u65b0contentView\u7684\u53d8\u5316\u6d41\u6570\u636e;\n    [self updateContentViewBezier];\n    //13. \u6e32\u67d3\u5b8c\u6210_\u6267\u884c\u805a\u7126\u52a8\u753b;\n    if (focusMode) {\n        [self focusAnimation:changeModel];\n    }\n}\n-(void) clear{\n}\n-(void) setStop:(BOOL)stop{\n    self.panelView.stop = stop;\n}\n-(void) open{\n    [self setHidden:false];\n    [self refreshDisplay];\n}\n-(void) close{\n    [self setHidden:true];\n}\n//MARK:===============================================================\n//MARK:                     < privateMethod >\n//MARK:===============================================================\n-(BOOL) isOpen{\n    return !self.isHidden;\n}\n/**\n *  MARK:--------------------\u805a\u7126\u52a8\u753b--------------------\n *  @version\n *      2022.03.27: \u6539\u53d8anchor0\u4f1a\u5bfc\u81f4\u6574\u4e2acontentView\u5750\u6807\u7cfb\u53d8\u6210\u4e2d\u95f40\u70b9,subView\u7684xy\u90fd\u5f97\u8ddf\u7740\u6539,\u6240\u4ee5\u53d6\u6d88\u5b83\u5e76\u91cd\u8c03\u52a8\u753b;\n */\n-(void) focusAnimation:(TOModelBase*)focusModel{\n    //1. \u53d6\u5355\u5e27\u5c55\u793a\u65f6\u957f;"
        },
        {
            "comment": "This code segment sets the focus view, scales it to at least 100 width and animates the scroll view's zoom scale and content offset to show the focus view at the center of the screen. It also updates the time line data and creates a new node.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":278-310",
            "content": "    CGFloat time = self.panelView.getFrameShowTime;\n    if (time == 0) return;\n    //2. \u53d6focusView\n    NSArray *subs = [self.contentView subViews_AllDeepWithClass:TOMVisionNodeBase.class];\n    TOMVisionNodeBase *focusView = nil;\n    for (TOMVisionNodeBase *view in subs) {\n        if ([view.data isEqual:focusModel]) {\n            focusView = view;\n            break;\n        }\n    }\n    if (!focusView) return;\n    self.tipLab.text = STRFORMAT(@\"\u805a\u7126: %@\",focusView.getNodeDesc);\n    //3. scale\u53ea\u653e\u5927(\u81f3\u5c11100\u5bbd),\u4e0d\u7f29\u5c0f;\n    CGFloat scale = MAX(100.0f / focusView.width, 1.0f);\n    //4. \u7b2c1\u52a8\u753b: \u91cd\u7f6e\u5927\u5c0f,\u4f4d\u7f6e;\n    [UIView animateWithDuration:time / 4.0f animations:^{\n        self.scrollView.zoomScale = 1.0f;\n        self.scrollView.contentOffset = CGPointZero;\n    } completion:^(BOOL finished) {\n        //4. \u6d41\u7a0b\u7ebf\u7c97;\n        [self.timeLine setData:self.scrollView.zoomScale];\n        //5. \u7b2c2\u52a8\u753b: \u7126\u70b9view\u663e\u793a\u5728\u5c4f\u5e55\u4e2d\u5fc3;\n        [self animation4Scale:scale focusPoint:focusView.center time:time / 2.0f];\n    }];\n}\n/**\n *  MARK:--------------------\u521b\u5efa\u65b0\u8282\u70b9--------------------"
        },
        {
            "comment": "This method gets or creates a TOMVisionNodeBase object using the given data. It first prepares the old and new subviews for reuse. Then, it prioritizes finding a matching subview for reuse among the collected subviews. If no match is found, it creates a new node based on the provided data type (DemandModel, TOFoModel, or TOAlgModel).",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":311-336",
            "content": " *  @version\n *      2022.03.19: \u5c06newSubViews\u548coldSubViews\u90fd\u53c2\u4e0e\u590d\u7528 (\u672c\u5e27\u751f\u6210\u7684node\u4e5f\u9700\u8981\u590d\u7528,\u5426\u5219\u4f1a\u627e\u4e0d\u5230\u521a\u751f\u6210\u7684\u7236\u679d);\n *  @result notnull\n */\n-(TOMVisionNodeBase*) getOrCreateNode:(id)data oldSubViews:(NSArray*)oldSubViews{\n    //1. \u6570\u636e\u51c6\u5907 (\u539f\u6709\u548c\u73b0\u6709\u5b50views\u5168\u7528\u4e8e\u590d\u7528);\n    NSArray *newSubViews = [self.contentView subViews_AllDeepWithClass:TOMVisionNodeBase.class];\n    NSMutableArray *allSubViews = [SMGUtils collectArrA:oldSubViews arrB:newSubViews];\n    //2. \u4f18\u5148\u627e\u590d\u7528;\n    TOMVisionNodeBase *result = ARR_INDEX([SMGUtils filterArr:allSubViews checkValid:^BOOL(TOMVisionNodeBase *subView) {\n        return [subView isEqualByData:data];\n    } limit:1], 0);\n    //3. \u6ca1\u590d\u7528\u5219\u65b0\u5efa;\n    if (!result) {\n        //4. demand\u8282\u70b9;\n        if (ISOK(data, DemandModel.class)) {\n            result = [[TOMVisionDemandView alloc] init];\n        }else if(ISOK(data, TOFoModel.class)){\n            result = [[TOMVisionFoView alloc] init];\n        }else if(ISOK(data, TOAlgModel.class)){\n            result = [[TOMVisionAlgView alloc] init];\n        }else{\n            //\u8fd8\u6ca1\u652f\u6301\u7684\u7c7b\u578b,\u5c31\u5148\u8fd4\u56debaseView;"
        },
        {
            "comment": "Code block 1 creates an instance of TOMVisionNodeBase and sets its background color. Then, it updates the data for the result object and returns it.\n\nCode block 2 adjusts the content size of a scroll view to avoid off-screen dragging issues. It takes the minimum dimensions, then iterates through subviews to update the maximum x and y coordinates. Finally, it sets the new content size.\n\nCode block 3 prepares data for updating the content view's timeline. It creates an array of points and retrieves all instances of TOMVisionNodeBase from the content view.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":337-369",
            "content": "            result = [[TOMVisionNodeBase alloc] init];\n            [result setBackgroundColor:UIColor.redColor];\n        }\n    }\n    //4. \u65e0\u8bba\u662f\u590d\u7528,\u8fd8\u662f\u65b0\u5efa,\u90fd\u66f4\u65b0data (\u590d\u7528\u65f6,\u6bcf\u5e27\u540c\u4e00\u4e2adata\u4e5f\u5728\u66f4\u65b0);\n    [result setData:data];\n    return result;\n}\n//\u66f4\u65b0\u753b\u677f\u5927\u5c0f (\u907f\u514d\u51fa\u5c4f\u7684\u62d6\u4e0d\u5230\u7b49\u95ee\u9898);\n-(void) autoAdjustContentSize{\n    //1. \u53d6\u6700\u5c0f\u5c3a\u5bf8;\n    CGFloat contentW = ScreenWidth,contentH = ScreenHeight - 60;\n    //2. \u6839\u636esubView\u81ea\u52a8\u8ba1\u7b97\u5c3a\u5bf8;\n    for (UIView *subV in self.contentView.subviews) {\n        contentW = MAX(contentW, CGRectGetMaxX(subV.frame) + 10.0f);\n        contentH = MAX(contentH, CGRectGetMaxY(subV.frame) + 10.0f);\n    }\n    //3. \u66f4\u65b0contentSize;\n    [self.contentView setSize:CGSizeMake(contentW, contentH)];\n    [self.scrollView setContentSize:CGSizeMake(contentW * self.scrollView.zoomScale, contentH * self.scrollView.zoomScale)];\n}\n//\u66f4\u65b0\u6811\u751f\u957f\u65f6\u95f4\u7ebf;\n-(void) updateContentViewBezier {\n    //1. \u6570\u636e\u51c6\u5907;\n    __block NSMutableArray *points = [[NSMutableArray alloc] init];\n    //2. \u53d6\u51fanodes\n    NSArray *subViews = [self.contentView subViews_AllDeepWithClass:TOMVisionNodeBase.class];"
        },
        {
            "comment": "1. Loops through changeIndex and collects coordinates related to each change point.\n2. Checks if current changeIndex has a variation point, collects its center coordinate if true.\n3. Updates contentView with the collected coordinates.\n4. Updates timeLine with new data based on scrollView zoomScale.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":371-402",
            "content": "    //3. \u5bf9\u53d8\u5316\u8fc7\u7a0b,\u5206\u522b\u6536\u96c6\u5750\u6807;\n    for (NSInteger i = 0; i <= self.changeIndex; i++) {\n        //4. \u5224\u65ad\u5f53\u524dchangeIndex\u6709\u6ca1\u6709\u53d8\u5316\u70b9;\n        [self.panelView getModel:i complete:^(TOMVisionItemModel *_frameModel, TOModelBase *_changeModel) {\n            if (_changeModel) {\n                //5. \u6709\u7684\u8bdd,\u6536\u96c6\u5b83\u7684\u4e2d\u5fc3\u5750\u6807;\n                for (TOMVisionNodeBase *view in subViews) {\n                    if ([view.data isEqual:_changeModel]) {\n                        [points addObject:[NSValue valueWithCGPoint:view.center]];\n                        break;\n                    }\n                }\n            }\n        }];\n    }\n    //6. \u5c06\u5750\u6807\u6d41\u66f4\u65b0\u5230contentView;\n    self.timeLine.bezierPoints = points;\n    //7. \u66f4\u65b0\u6811\u751f\u957f\u65f6\u95f4\u7ebf;\n    [self.contentView insertSubview:self.timeLine atIndex:0];\n    [self.timeLine setFrame:self.contentView.frame];\n    [self.timeLine setData:self.scrollView.zoomScale];\n}\n/**\n *  MARK:--------------------\u7f29\u653e\u52a8\u753b--------------------\n *  @param focusPoint : contentView\u4e0a\u7684\u70b9,\u6b64\u52a8\u753b\u53ef\u5c06\u6b64\u70b9\u79fb\u5230\u5c4f\u5e55\u4e2d\u5fc3\u663e\u793a;\n */\n-(void) animation4Scale:(CGFloat)newScale focusPoint:(CGPoint)focusPoint time:(CGFloat)time{"
        },
        {
            "comment": "Code is calculating coordinates for centering and scaling a selected node in a scroll view, with the possibility of keeping the node's original position if not zoomed. It also sets the time line data and executes an animation to center and scale the node, using UIView animateWithDuration method.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":403-434",
            "content": "    //6. \u5750\u6807\u8ba1\u7b97;\n    CGFloat offsetX = newScale * focusPoint.x;\n    CGFloat offsetY = newScale * focusPoint.y;\n    //7. \u5750\u6807\u8ba1\u7b972: \u51cf\u534a\u5c4f,\u4f7f\u4e4b\u4ece\u5de6\u4e0a\u89d2\u79fb\u5230\u5c4f\u6b63\u4e2d (\u65e0\u8bba\u7f29\u653e\u6bd4\u4f8b\u591a\u5c11,\u5de6\u4e0a\u89d2\u4e2d\u5fc3\u5230\u5c4f\u5e55\u4e2d\u5fc3,\u90fd\u662f\u534a\u5c4f\u8ddd\u79bb);\n    CGFloat svW = self.scrollView.width;\n    CGFloat svH = self.scrollView.height;\n    offsetX -= svW / 2;\n    offsetY -= svH / 2;\n    //8. \u5750\u6807\u8ba1\u7b973: \u5f53\u4e0d\u7f29\u653e \u4e14 offsetXY\u5728\u5de6\u4e0a\u533a\u95f4\u65f6,\u5219\u4fdd\u6301\u539f\u4f4d\u4e0d\u5c45\u4e2d;\n    if (newScale <= 1.0f) {\n        if (focusPoint.x < svW / 2) offsetX = 0;\n        if (focusPoint.y < svH / 2) offsetY = 0;\n    }\n    //9. \u6d41\u7a0b\u7ebf\u7c97\n    [self.timeLine setData:newScale];\n    //9. \u52a8\u753b_\u6267\u884c\u52a8\u753b (\u5c45\u4e2d & \u7f29\u653e);\n    [UIView animateWithDuration:time animations:^{\n        self.scrollView.zoomScale = newScale;\n        self.scrollView.contentOffset = CGPointMake(offsetX, offsetY);\n    }];\n}\n//\u8fd4\u56de\u624b\u52bf\u9009\u4e2d\u7684\u8282\u70b9;\n-(TOMVisionNodeBase*) tapedNode:(CGPoint)contentPoint{\n    NSArray *nodes = [self.contentView subViews_AllDeepWithClass:TOMVisionNodeBase.class];\n    for (TOMVisionNodeBase *node in nodes) {\n        if ([TVUtil inRect:node.frame point:contentPoint]) {\n            return node;"
        },
        {
            "comment": "This code is implementing a gesture recognizer for a UIScrollView, allowing long tap and double tap interactions. The long tap event zooms out the view by 1.5 times the default scale, while the double tap event zooms in by the same factor. Both events execute an animation after calculating the appropriate new scale and focus point from the tap coordinate.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":435-463",
            "content": "        }\n    }\n    return nil;\n}\n//MARK:===============================================================\n//MARK:                     < onclick >\n//MARK:===============================================================\n- (void)longTap:(UILongPressGestureRecognizer*)sender{\n    //1. \u9632\u6b62\u91cd\u590d\u89e6\u53d1\n    if (sender.state != UIGestureRecognizerStateBegan) return;\n    //2. \u53d6\u70b9\u51fb\u5750\u6807\u548c\u9ed8\u8ba4\u7f29\u653e\u503c;\n    CGPoint scrollPoint = [sender locationInView:sender.view];\n    CGPoint contentPoint = [sender.view convertPoint:scrollPoint toView:self.contentView];\n    CGFloat newScale = self.scrollView.zoomScale / 1.5f;\n    //3. \u6267\u884c\u52a8\u753b;\n    [self animation4Scale:newScale focusPoint:contentPoint time:0.5f];\n}\n- (void)doubleTap:(UITapGestureRecognizer *)sender{\n    //1. \u53d6\u70b9\u51fb\u5750\u6807\u548c\u9ed8\u8ba4\u7f29\u653e\u503c;\n    CGPoint scrollPoint = [sender locationInView:sender.view];\n    CGPoint contentPoint = [sender.view convertPoint:scrollPoint toView:self.contentView];\n    CGFloat newScale = self.scrollView.zoomScale * 1.5f;\n    //2. \u70b9\u4e2d\u8282\u70b9\u65f6,\u5f3a\u884c: \u7f29\u653e200\u5bbd & \u5750\u6807\u5c45\u4e2d;\n    UIView *tapedNode = [self tapedNode:contentPoint];"
        },
        {
            "comment": "Code snippet is a part of a larger codebase for a gesture recognizer implementation. It handles tap gestures, animation scaling on tap, and interactions with a panel view. The `singleTap` method processes tap events by getting the click coordinates and checking if they hit a node in the view, then displaying a description if so. `panelPlay`, `panelCloseBtnClicked`, and `panelScaleChanged` are methods related to interacting with a panel view, allowing the user to control the focus mode, close the panel, and change the panel's scale respectively.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":464-498",
            "content": "    if (tapedNode) {\n        newScale = 200 / tapedNode.width;\n        contentPoint = tapedNode.center;\n    }\n    //3. \u6267\u884c\u52a8\u753b;\n    [self animation4Scale:newScale focusPoint:contentPoint time:0.5f];\n}\n- (void)singleTap:(UITapGestureRecognizer *)sender{\n    //1. \u53d6\u70b9\u51fb\u5750\u6807;\n    CGPoint scrollPoint = [sender locationInView:sender.view];\n    CGPoint contentPoint = [sender.view convertPoint:scrollPoint toView:self.contentView];\n    //2. \u70b9\u4e2d\u8282\u70b9;\n    TOMVisionNodeBase *tapedNode = [self tapedNode:contentPoint];\n    if (tapedNode) {\n        [self.tipLab setText:tapedNode.getNodeDesc];\n    }\n}\n//MARK:===============================================================\n//MARK:                     < TVPanelViewDelegate >\n//MARK:===============================================================\n-(void) panelPlay:(NSInteger)changeIndex{\n    BOOL focusMode = changeIndex - self.changeIndex == 1;\n    self.changeIndex = changeIndex;\n    [self refreshDisplay:focusMode];\n}\n-(void) panelCloseBtnClicked{\n    [self close];\n}\n-(void) panelScaleChanged:(CGFloat)scale{"
        },
        {
            "comment": "This code sets the zoom scale of a scroll view and auto adjusts its content size. It also handles zooming functionality for a UIScrollView delegate method.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/TOMVision2.m\":499-513",
            "content": "    self.scrollView.zoomScale = scale;\n    [self autoAdjustContentSize];\n    //\u6d41\u7a0b\u7ebf\u7c97\n    [self.timeLine setData:self.scrollView.zoomScale];\n}\n//MARK:===============================================================\n//MARK:                     < UIScrollViewDelegate >\n//MARK:===============================================================\n-(UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView{\n    return self.contentView;\n}\n@end"
        }
    ]
}