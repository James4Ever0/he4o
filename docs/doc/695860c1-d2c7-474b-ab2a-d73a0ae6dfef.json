{
    "summary": "The code initializes a singleton XGRedis class with internal data structures and defines methods for setting/getting objects with expiration, clearing cache, and getting size. It deletes expired keys from a dictionary by iterating through gcMarks, removing keys whose timestamps are less than the current time.",
    "details": [
        {
            "comment": "This code is initializing a singleton instance of the XGRedis class and setting up its internal data structures. It creates an async mutable dictionary for storing data, initializes a timer to trigger a notification every second, and sets up a gcMarks dictionary to record garbage collection times in ascending order.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGRedis/XGRedis.m\":0-44",
            "content": "//\n//  XGRedis.m\n//  SMG_NothingIsAll\n//\n//  Created by iMac on 2018/5/23.\n//  Copyright \u00a9 2018\u5e74 XiaoGang. All rights reserved.\n//\n#import \"XGRedis.h\"\n#import \"XGRedisUtil.h\"\n#import \"XGRedisDictionary.h\"\n#import \"AIKVPointer.h\"\n@interface XGRedis ()\n@property (strong, nonatomic) AsyncMutableDictionary *dic;   //\u6838\u5fc3\u5b57\u5178\n@property (strong, nonatomic) AsyncMutableDictionary *gcMarks;  //\u56de\u6536\u65f6\u95f4\u8bb0\u5f55;(\u65f6\u95f4\u4ece\u5148\u5230\u540e_\u6709\u5e8f)\n@property (strong,nonatomic) NSTimer *timer;            //\u8ba1\u65f6\u5668\n@end\n@implementation XGRedis\nstatic XGRedis *_instance;\n+(XGRedis*) sharedInstance{\n    if (_instance == nil) {\n        _instance = [[XGRedis alloc] init];\n    }\n    return _instance;\n}\n-(id) init{\n    self = [super init];\n    if (self) {\n        [self initData];\n    }\n    return self;\n}\n-(void) initData{\n    self.dic = [[AsyncMutableDictionary alloc] init];\n    dispatch_async(dispatch_get_main_queue(), ^{\n        self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0f target:self selector:@selector(notificationTimer) userInfo:nil repeats:YES];\n    });\n    self.gcMarks = [[AsyncMutableDictionary alloc] init];"
        },
        {
            "comment": "This code defines a class that implements a cache system. It has public and private methods for setting and getting objects with optional time expiration, as well as clearing the cache and getting its size. The private method handles a timer notification.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGRedis/XGRedis.m\":45-78",
            "content": "}\n//MARK:===============================================================\n//MARK:                     < publicMethod >\n//MARK:===============================================================\n-(void) setObject:(NSObject*)obj forKey:(NSString*)key {\n    [self setObject:obj forKey:key time:NSNotFound];\n}\n-(void) setObject:(NSObject*)obj forKey:(NSString*)key time:(double)time{\n    long long gcTime = (long long)([[NSDate date] timeIntervalSince1970] + MAX(0, time));\n    [self.dic setObject:obj forKey:key];\n    [self.gcMarks setObject:@(gcTime) forKey:key];\n}\n-(id) objectForKey:(NSString*)key{\n    return [self.dic objectForKey:key];\n}\n-(void) clear{\n    [self.dic removeAllObjects];\n    [self.gcMarks removeAllObjects];\n}\n-(NSInteger) count{\n    return self.dic.count;\n}\n//MARK:===============================================================\n//MARK:                     < privateMethod >\n//MARK:===============================================================\n- (void)notificationTimer{\n    //1. \u8ba1\u65f6\u5668\u6267\u884c\n    double now = [[NSDate date] timeIntervalSince1970];"
        },
        {
            "comment": "This code is deleting expired keys from a dictionary. It first copies all the keys in the gcMarks dictionary, then loops through them and checks if their corresponding timestamps are less than the current time (now). If they are, it removes the key from the dictionary and also removes its timestamp from the gcMarks dictionary.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGRedis/XGRedis.m\":80-91",
            "content": "    //2. \u627e\u5230\u9700\u8981\u9500\u6bc1\u7684\u5e76\u9500\u6bc1;\n    NSArray *gcMarkKeys = [self.gcMarks.allKeys copy];\n    for (NSString *key in gcMarkKeys) {\n        long long gcTime = NUMTOOK([self.gcMarks objectForKey:key]).longLongValue;\n        if (gcTime < now) {\n            [self.dic removeObjectForKey:key];\n            [self.gcMarks removeObjectForKey:key];\n        }\n    }\n}\n@end"
        }
    ]
}