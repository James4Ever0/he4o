{
    "summary": "SMGUtils is an Objective-C class offering utility functions for string manipulation, array handling, date formatting, and input class checking. It improves NSLog messages' formatting, tracks TestCase names, ensures main thread printing, and suggests improvements to string formatting.",
    "details": [
        {
            "comment": "This code appears to be part of an Objective-C class named SMGUtils, with a section named General. It contains several methods for string manipulation and logging functionality. The strIsOk method checks if a string is not nil, not an instance of NSNull, and not an empty string. The strToOk method returns the non-nil version of a string, either as an NSString or an empty string. The strToArr method takes a string and a separator, and returns an array of substrings separated by the given separator. Lastly, the inTitle:log:fileName: method seems to be used for logging with optional title and file name parameters.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils+General.m\":0-32",
            "content": "//\n//  SMGUtil+General.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2019/7/9.\n//  Copyright \u00a9 2019\u5e74 XiaoGang. All rights reserved.\n//\n#import \"SMGUtils+General.h\"\n@implementation SMGUtils (General)\n//string\n+(BOOL) strIsOk:(NSString*)s{\n    return (s && ![s isKindOfClass:[NSNull class]] && [s isKindOfClass:[NSString class]] && ![s isEqualToString:@\"\"]);\n}\n+(NSString*) strToOk:(NSString*)s{\n    return (s && ![s isKindOfClass:[NSNull class]]) ? ([s isKindOfClass:[NSString class]] ? s : [NSString stringWithFormat:@\"%@\", s]) : @\"\";\n}\n+(NSArray*) strToArr:(NSString*)str sep:(NSString*)sep{\n    str = STRTOOK(str);\n    return [str componentsSeparatedByString:sep];\n}\n//log\n/**\n *  MARK:--------------------titleLog--------------------\n *  @version\n *      xxxx.xx.xx: \u521d\u7248#def IFTitleLog(t,fmt, ...) NSLog((@\"\\n\\n------ \" t @\" ------\"fmt), ##__VA_ARGS__);\n *      2022.05.31: v2\u7248,\u5c01\u88c5\u6210\u65b9\u6cd5,\u5e76\u652f\u6301loopId;\n *      2022.09.28: \u628a---\u6539\u6210===,\u56e0\u4e3a\u4e0d\u9760\u8fd9\u4e2a\u5206IO,\u6539\u6210===\u53cd\u800c\u66f4\u52a0\u76f4\u89c2\u4e9b;\n */\n+(void) inTitle:(NSString*)title log:(NSString*)log fileName:(NSString*)fileName{"
        },
        {
            "comment": "This code defines a class method `outTitle:log:fileName:` that logs the title, loop ID, and log with a divider line. It also provides another class method `codeLocateFormat:line:` to get the formatted string of file name and line number. The first method uses these format strings in logging, while the second method prepares data for locating code by trimming file names if they exceed 19 characters.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils+General.m\":33-54",
            "content": "    NSString *side = @\"===============================\";\n    NSLog_CustomFileName(fileName, @\"\\n\\n%@ %lld %@ %@%@\",side,theTC.getLoopId,title,side,log);\n}\n+(void) outTitle:(NSString*)title log:(NSString*)log fileName:(NSString*)fileName{\n    NSString *side = @\"===============================\";\n    NSLog_CustomFileName(fileName, @\"\\n\\n%@ %lld %@ %@%@\",side,theTC.getLoopId,title,side,log);\n}\n+(NSString*) codeLocateFormat:(NSString*)fileName line:(NSInteger)line{\n    //1. \u6570\u636e \u51c6\u5907\n    fileName = STRTOOK(fileName);\n    //2. \u62fclineStr\n    NSString *lineStr = STRFORMAT(@\"%@%ld\",(line > 999 ? @\"\" : ((line > 99 ? @\" \" : ((line > 9 ? @\"  \" : @\"   \"))))),(long)line);\n    //3. \u62fcfileNameStr\u5b57\u7b26\u4e32\n    NSString *fileNameStr = @\"\";\n    NSInteger fileNameMax = 19;\n    if (fileName.length > fileNameMax) {\n        fileNameStr = STRFORMAT(@\"%@..\",[fileName substringToIndex:fileNameMax - 2]);\n    }else{\n        NSMutableString *prefix = [[NSMutableString alloc] init];\n        for (NSInteger i = 0; i < fileNameMax - fileName.length; i++) {"
        },
        {
            "comment": "This code appears to be a part of an NSLog formatting utility, specifically handling line number formatting and checking conditions for printing. It also keeps track of the last TestCase (TC) name and checks if it should be printed based on certain conditions. The code then prints the log only when allowed by the specified conditions and when running on the main thread.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils+General.m\":55-82",
            "content": "            [prefix appendString:@\" \"];\n        }\n        fileNameStr = STRFORMAT(@\"%@%@\",prefix,fileName);\n    }\n    return STRFORMAT(@\"%@%@\",fileNameStr,lineStr);\n}\n+(NSString*) logLineNumFormat{\n    //1. \u8f6clineStr\u591f5\u4f4d (\u4e0d\u591f\u7684\u524d\u9762\u52a0\u7a7a\u683c);\n    NSString *lineStr = STRFORMAT(@\"%d\",++logLineNum);\n    for (NSInteger i = lineStr.length; i < 5; i++) {\n        lineStr = STRFORMAT(@\" %@\",lineStr);\n    }\n    return lineStr;\n}\n+(void) checkPrintNSLog:(NSString*)fileName line:(NSInteger)line protoLog:(NSString*)protoLog headerMode:(LogHeaderMode)headerMode{\n    //1. \u8bb0\u5f55\u4e0b\u6700\u540e\u4e00\u6761TC;\n    if ([@\"TC\" isEqualToString:SUBSTR2INDEX(fileName, 2)]) {\n        lastTCName = fileName;\n    }\n    //2. \u5f53TC\u6709\u6548\u65f6,\u6253\u5370\u5b83;\n    BOOL tcsCanPrint = LogPrintAllTCs || !STRISOK(lastTCName) || [LogJustPrintTCs containsObject:SUBSTR2INDEX(lastTCName, lastTCName.length - 2)];\n    BOOL logSwitch = cNSLogSwitch && [cNSLogSwitchIsOpenTypes containsObject:[self getQueueStr]];\n    //3. \u6253\u5370\n    //2023.07.20: \u56e0\u4e3a\u6539\u5230\u4e3b\u7ebf\u7a0b\u5bfc\u81f4\u5f53\u524d\u7ebf\u7a0b\u63d0\u524d\u9500\u6bc1\u62a5\u9519,\u76f4\u63a5\u53d6\u6d88\u5207\u5230\u4e3b\u7ebf\u7a0b;\n    if (logSwitch && tcsCanPrint) {\n"
        },
        {
            "comment": "This code is responsible for logging system messages with specific formatting and information. It prepares the data by converting strings, adding time and file information, and then formats the log message based on the header mode provided. The resultant log message includes line numbers, timestamp, queue details, and the formatted log text itself.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils+General.m\":82-103",
            "content": "        NSString *log = [self nsLogFormat:fileName line:line protoLog:protoLog headerMode:headerMode];\n        PrintLog(log);\n    }\n}\n+(NSString*) nsLogFormat:(NSString*)fileName line:(NSInteger)line protoLog:(NSString*)protoLog headerMode:(LogHeaderMode)headerMode{\n    //1. \u6570\u636e\u51c6\u5907\n    protoLog = STRTOOK(protoLog);\n    NSString *timeStr = [SMGUtils date2HHMMSSSSS];\n    NSString *codeStr = [SMGUtils codeLocateFormat:fileName line:line];\n    NSMutableString *result = [[NSMutableString alloc] init];\n    NSString *queueStr = [self getQueueStr];\n    //2. \u62fc\u63a5\u7ed3\u679c\n    if (headerMode == LogHeaderMode_All) {\n        NSString *sep = @\"\\n\";\n        NSArray *logLines = ARRTOOK(STRTOARR(protoLog, sep));\n        for (NSString *logLine in logLines) {\n            [result appendFormat:@\"%@ [%@ %@ %@] %@\\n\",[SMGUtils logLineNumFormat],timeStr,queueStr,codeStr,logLine];\n        }\n    }else if(headerMode == LogHeaderMode_First){\n        [result appendFormat:@\"%@ [%@ %@ %@] %@\\n\",[SMGUtils logLineNumFormat],timeStr,queueStr,codeStr,protoLog];"
        },
        {
            "comment": "This code contains a function that appends formatted text to a result string, and another function that returns a thread's queue name. It also includes comments explaining the macro definition for string formatting, which is currently not used, as well as suggestions for improving the string formatting functionality.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils+General.m\":104-133",
            "content": "    }else{\n        [result appendFormat:@\"%@\\n\",protoLog];\n    }\n    return result;\n}\n//\u7ebf\u7a0b\u7b80\u5199\u540d\u79f0\n+(NSString*) getQueueStr {\n    NSString *curQueueLab = STRFORMAT(@\"%s\",dispatch_queue_get_label(dispatch_get_current_queue()));\n    if ([tiQueueLab isEqualToString:curQueueLab]) {\n        return @\"TI\";\n    } else if ([toQueueLab isEqualToString:curQueueLab]) {\n        return @\"TO\";\n    } else if ([@\"com.apple.main-thread\" containsString:curQueueLab]) {\n        return @\"MA\";\n    }\n    return @\"OT\";\n}\n//\u6ce8: STRFORMAT\u76ee\u524d\u7684\u5b8f\u5b9a\u4e49\u4e2d,\u5e76\u6ca1\u6709\u591a\u4f59\u8c03\u7528,\u6240\u4ee5\u4e0d\u9700\u8981\u5355\u72ec\u5c01\u88c5\u51fa\u6765;\n//\u6ce82: \u5982\u679c\u6709\u4e00\u5929\u8981\u4f7f\u7528\u6b64\u4ee3\u7801,\u53ef\u4ee5\u5c1d\u8bd51: SMGArrayMake()\u6765\u8f6c\u6362array, \u5c1d\u8bd52:\u76f4\u63a5\u4f20\u9012format,...\u5230stringWithFormat:\n//#define STRFORMAT(s, ...) [SMGUtils strFormat:s, ##__VA_ARGS__]\n//+(NSString*) strFormat:(NSString*)format, ...{\n//    va_list paramList;\n//    va_start(paramList,format);\n//    NSString *result = [[NSString alloc]initWithFormat:format arguments:paramList];\n//    result = [result stringByAppendingString:@\"\\n\"];\n//    va_end(paramList);\n//    //return [NSString stringWithFormat:s...];\n//    //return [NSString stringWithFormat:a, ##__VA_ARGS__];"
        },
        {
            "comment": "This code snippet contains various utility methods for string manipulation and array handling. It includes functions to get a substring based on an index, clean a given string by removing special characters, check if an array is valid, return a valid array, retrieve elements from the array using index, and reverse index.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils+General.m\":134-164",
            "content": "//    return result;\n//}\n//notnull\n+(NSString*) subStr:(NSString*)s toIndex:(NSInteger)index{\n    return (STRISOK(s) ? [s substringToIndex:MIN(s.length, MAX(0, index))] : @\"\");\n}\n+(NSString*) cleanStr:(id)str{\n    NSString *validStr = STRTOOK(str);\n    validStr = [validStr stringByReplacingOccurrencesOfString:@\"\\n\" withString:@\"\"];\n    validStr = [validStr stringByReplacingOccurrencesOfString:@\"\\t\" withString:@\"\"];\n    //validStr = [validStr stringByReplacingOccurrencesOfString:@\" \" withString:@\"\"];\n    return validStr;\n}\n//array\n+(BOOL) arrIsOk:(NSArray*)a{\n    return a && [a isKindOfClass:[NSArray class]] && a.count;\n}\n+(NSArray*) arrToOk:(NSArray*)a{\n    return (a && [a isKindOfClass:[NSArray class]]) ? a : [NSArray new];\n}\n+(id) arrIndex:(NSArray*)a index:(NSInteger)i{\n    return [self arrIndexIsOk:a index:i] ? a[i] : nil;\n}\n+(id) arrTransIndex:(NSArray*)a index:(NSInteger)i{\n    NSInteger index = ARRTOOK(a).count - 1 - i;\n    return [self arrIndex:a index:index];\n}\n+(BOOL) arrIndexIsOk:(NSArray*)a index:(NSInteger)i{"
        },
        {
            "comment": "This code defines utility methods for working with arrays and numbers in Objective-C. It includes a method to validate an array, subarray extraction, converting an array to a string, and validating a number. The methods use common practices like range validation, error handling, and format strings for concatenation.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils+General.m\":165-193",
            "content": "    return (a && [a isKindOfClass:[NSArray class]] && a.count > i && i >= 0);\n}\n/**\n *  MARK:--------------------\u5206\u9694\u6570\u7ec4--------------------\n *  @version\n *      2020.08.19: \u5c06a.count\u63d0\u53d6\u4e3aNSInteger\u7c7b\u578b,\u518d\u53c2\u4e0eMAX\u548cMIN\u8fd0\u7b97 (\u56e0\u4e3aa.count\u9ed8\u8ba4\u4e3aNSUInteger\u7c7b\u578b,\u5bfc\u81f4s\u548cl\u4e0d\u652f\u6301\u8d1f\u6570)\n *  @result notnull (\u6ce8\u610f: subarrayWithRange\u662f\u5426\u53ef\u80fd\u8fd4\u56denull\u5584\u672a\u9a8c\u8bc1);\n */\n+(NSArray*) arrSub:(NSArray*)a start:(NSInteger)s length:(NSInteger)l{\n    NSInteger count = ARRISOK(a) ? a.count : 1;\n    s = MAX(0, MIN(s,count));\n    l = MAX(0, MIN(count - s, l));\n    return (ARRISOK(a) ? [a subarrayWithRange:NSMakeRange(s, l)] : [NSArray new]);\n}\n+(NSString*) arrToStr:(NSArray*)arr prefix:(NSString*)prefix sep:(NSString*)sep {\n    arr = ARRTOOK(arr);\n    NSMutableString *result = [[NSMutableString alloc] init];\n    for (NSInteger i = 0; i < arr.count; i++) {\n        id item = ARR_INDEX(arr, i);\n        [result appendFormat:@\"%@%@%@\",prefix,item,(i == arr.count - 1) ? @\"\" : sep];\n    }\n    return result;\n}\n//number\n+(BOOL) numIsOk:(NSNumber*)n{\n    return (n && [n isKindOfClass:[NSNumber class]]);"
        },
        {
            "comment": "This code contains various utility methods for handling numbers, dictionaries, pointers, and objects. It also includes functions for formatting dates into different formats. The code ensures that inputs are of the correct class before returning or processing them.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils+General.m\":194-231",
            "content": "}\n+(NSNumber*) numToOk:(NSNumber*)n{\n    return [self numToOk:n defaultValue:0];\n}\n+(NSNumber*) numToOk:(NSNumber*)n defaultValue:(double)defaultValue{\n    return (n && [n isKindOfClass:[NSNumber class]]) ? n : @(defaultValue);\n}\n//dictionary\n+(BOOL) dicIsOk:(NSDictionary*)d{\n    return (d && [d isKindOfClass:[NSDictionary class]] && d.count);\n}\n+(NSDictionary*) dicToOk:(NSDictionary*)d{\n    return (d && [d isKindOfClass:[NSDictionary class]]) ? d : [NSDictionary new];\n}\n//pointer (pointerId\u4ece0\u5f00\u59cb)\n+(BOOL) pointerIsOk:(AIPointer*)p{\n    return (p && [p isKindOfClass:[AIPointer class]] && p.pointerId >= 0);\n}\n//object\n+(BOOL) isOk:(NSObject*)o class:(Class)c{\n    return (o && [o isKindOfClass:c]);\n}\n//date2Str\n+(NSString*) date2HHMMSS{\n    return [SMGUtils date2Str:kHHmmss date:nil];\n}\n+(NSString*) date2HHMMSSSSS{\n    return [SMGUtils date2Str:kHHmmssSSS date:nil];\n}\n+(NSString*) date2yyyyMMddHHmmss{\n    return [SMGUtils date2Str:kyyyyMMddHHmmss date:nil];\n}\n+(NSString*) date2yyyyMMddHHmmssSSS:(NSDate*)date{\n    return [SMGUtils date2Str:kyyyyMMddHHmmssSSS date:date];"
        },
        {
            "comment": "This code provides a series of methods for converting dates and timestamps between different formats. The date2Str method returns a string representation of a given timeInterval or date. The dateFromTimeStr method parses a timeString using the specified format. Lastly, timestampFromStr parses a timeString into a long long integer representing Unix timestamp with a default result in case of failure.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils+General.m\":232-257",
            "content": "}\n+(NSString*) date2Str:(NSString*)format timeInterval:(long long)timeInterval{\n    return [self date2Str:format date:[NSDate dateWithTimeIntervalSince1970:timeInterval]];\n}\n+(NSString*) date2Str:(NSString*)format date:(NSDate*)date{\n    if (!date) date = [NSDate new];\n    NSDateFormatter *fmt = [[NSDateFormatter alloc] init];\n    fmt.dateFormat = format;\n    return [fmt stringFromDate:date];\n}\n//dateFromStr\n+(NSDate*) dateFromTimeStr_yyyyMMddHHmmssSSS:(NSString*)timeStr{\n    return [SMGUtils dateFromTimeStr:timeStr format:kyyyyMMddHHmmssSSS_Simple];\n}\n+(NSDate*) dateFromTimeStr:(NSString*)timeStr format:(NSString*)format{\n    NSDateFormatter *fmt = [[NSDateFormatter alloc] init];\n    fmt.dateFormat = STRTOOK(format);\n    return [fmt dateFromString:timeStr];\n}\n//timestampFromStr\n+(long long)timestampFromStr_yyyyMMddHHmmssSSS:(NSString*)timeStr defaultResult:(long long)defaultResult{\n    long long result = defaultResult;\n    if (STRISOK(timeStr)) {\n        NSDate *date = [SMGUtils dateFromTimeStr_yyyyMMddHHmmssSSS:timeStr];"
        },
        {
            "comment": "This code defines a class with three methods: \n1. A method that converts a date to milliseconds since January 1, 1970 (in the GMT timezone).\n2. A method that takes an array of data and returns an array of objects after converting each data into an object.\n3. A method that logs a given message using NSLog, adds it to the heLogView object, and sets it as the tip log for the app.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils+General.m\":258-282",
            "content": "        if (date) {\n            result = [date timeIntervalSince1970] * 1000.0f;\n        }\n    }\n    return result;\n}\n//nsdata\n+(NSArray*)datas2Objs:(NSArray*)datas{\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    datas = ARRTOOK(datas);\n    for (NSData *data in datas) {\n        [result addObject:DATA2OBJ(data)];\n    }\n    return result;\n}\n//log\n+(void)allLog:(NSString *)log{\n    NSLog(@\"%@\",log);\n    [theApp.heLogView addLog:log];\n    [theApp setTipLog:log];\n}\n@end"
        }
    ]
}