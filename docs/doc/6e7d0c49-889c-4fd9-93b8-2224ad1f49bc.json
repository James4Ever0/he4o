{
    "summary": "The code enhances AIVisionAlgs by adding a commit method, preparing data, creating vision algorithm models, measuring speed and distance for Redis collision detection. It also defines methods to calculate UIView distances, border widths, and positions.",
    "details": [
        {
            "comment": "This code implements a method in the AIVisionAlgs class to commit a new view with its target view and rect. It prepares data by checking if selfView and targetView are valid, and filters views under targetView using the SMGUtils filterArr function.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/CortexAlgorithms/Vision/AIVisionAlgs.m\":0-33",
            "content": "//\n//  AIVisionAlgs.m\n//  SMG_NothingIsAll\n//\n//  Created by jiaxiaogang on 2018/11/15.\n//  Copyright \u00a9 2018\u5e74 XiaoGang. All rights reserved.\n//\n#import \"AIVisionAlgs.h\"\n#import \"AIVisionAlgsModel.h\"\n#import \"XGRedis.h\"\n#import \"UIView+Extension.h\"\n#import \"NSObject+Extension.h\"\n@implementation AIVisionAlgs\n/**\n *  MARK:--------------------\u65b0\u89c6\u89c9\u5e27--------------------\n *  @version\n *      2021.09.07: \u53d6\u6d88rect\u9650\u5236 (\u56e0\u4e3a\u6728\u68d2\u6216\u9e1f\u90fd\u6709\u53ef\u80fd\u98de\u51fa\u5c4f\u5e55);\n *      2021.09.14: \u5e9f\u5f03\u901f\u5ea6,\u56e0\u4e3aHE\u89c6\u89c9\u662f\u79bb\u6563\u7684,\u901f\u5ea6\u4e0d\u91cd\u8981 (\u53c2\u800324017-\u95ee\u98981);\n *      2022.06.04: \u5e9f\u5f03X\u503c\u548c\u65b9\u5411,\u65b0\u589eX\u8ddd (\u53c2\u800326196);\n *      2022.06.05: \u56de\u900026196-\u65b9\u68483 (\u53c2\u800326196-\u5c1d\u8bd51);\n *      2023.03.08: \u5e9f\u9664\u5ba2\u89c2\u7279\u5f81posXY (\u53c2\u800328161-\u65b9\u68485);\n *      2023.03.13: \u7528\u8ddd\u79bb\u548c\u65b9\u5411\u66ff\u4ee3XY\u8ddd (\u53c2\u800328173-\u65b9\u68483);\n */\n+(void) commitView:(UIView*)selfView targetView:(UIView*)targetView rect:(CGRect)rect{\n    //1. \u6570\u636e\u51c6\u5907;\n    if (!selfView || !targetView) {\n        return;\n    }\n    NSMutableArray *dics = [[NSMutableArray alloc] init];\n    NSMutableArray *views = [targetView subViews_AllDeep];//subViews_AllDeepWithRect:rect];\n    views = [SMGUtils filterArr:views checkValid:^BOOL(UIView *item) {"
        },
        {
            "comment": "Code generates a model for each visible view with the specified tag and alpha greater than 0. It initializes an AIVisionAlgsModel instance and sets its properties such as sizeHeight, colorRed, colorGreen, colorBlue, radius, speed, direction, distance based on the current view (curView).",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/CortexAlgorithms/Vision/AIVisionAlgs.m\":34-53",
            "content": "        return item.tag == visibleTag && item.alpha > 0;\n    }];\n    if (ARRISOK(views)) ISTitleLog(@\"\u611f\u5b98\u7b97\u6cd5\");\n    //2. \u751f\u6210model\n    for (HEView *curView in views) {\n        BOOL curViewIsShow = curView.alpha > 0 && !curView.hidden;\n        if (curView.tag == visibleTag && curViewIsShow) {\n            AIVisionAlgsModel *model = [[AIVisionAlgsModel alloc] init];\n            //model.sizeWidth = [self sizeWidth:curView];\n            model.sizeHeight = [self sizeHeight:curView];\n            //model.colorRed = [self colorRed:curView];\n            //model.colorGreen = [self colorGreen:curView];\n            //model.colorBlue = [self colorBlue:curView];\n            //model.radius = [self radius:curView];\n            //model.speed = [self speed:curView];\n            model.direction = [self direction:selfView target:curView];\n            model.distance = [self distance:selfView target:curView];\n            //model.distanceX = [self distanceX:selfView target:curView];\n            //model.distanceY = [self distanceY:selfView target:curView];"
        },
        {
            "comment": "This code is part of a vision algorithm and it seems to be creating a model with properties like border, position, and distance. It then logs the model's direction, distance, height, and border information. The model dictionary is added to an array and passed as input to thinkingControl using commitInputWithModelsAsync method. The code also has comments for removing zero-valued keys from the model dictionary, but they are not being used in this version of the code.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/CortexAlgorithms/Vision/AIVisionAlgs.m\":54-75",
            "content": "            model.border = [self border:curView];\n            //model.posX = [self posX:curView];\n            //model.posY = [self posY:curView];\n            //NSLog(@\"\u89c6\u89c9\u76ee\u6807 [\u8ddd\u79bb:%ld \u89d2\u5ea6:%f \u5bbd:%f \u9ad8:%f \u76ae:%f \u5706\u89d2:%f]\",(long)model.distance,model.direction,model.sizeWidth,model.sizeHeight,model.border,model.radius);\n            NSLog(@\"\u89c6\u89c9\u76ee\u6807 [\u65b9\u5411:%ld \u8ddd\u79bb:%ld \u9ad8:%ld \u76ae:%ld]\",model.direction,model.distance,model.sizeHeight,model.border);\n            NSMutableDictionary *modelDic = [NSObject getDic:model containParent:true];\n            //for (NSString *key in modelDic.allKeys) {\n            //    if ([NUMTOOK([modelDic objectForKey:key]) isEqualToNumber:@(0)]) {\n            //        [modelDic removeObjectForKey:key];\n            //    }\n            //}\n            [dics addObject:modelDic];\n        }\n    }\n    //3. \u4f20\u7ed9thinkingControl\n    [theTC commitInputWithModelsAsync:dics algsType:NSStringFromClass(self)];\n}\n//MARK:===============================================================\n//MARK:                     < \u89c6\u89c9\u7b97\u6cd5 >\n//MARK:==============================================================="
        },
        {
            "comment": "This code defines methods for obtaining the width, height, red, green, blue color values, and corner radius of a UIView. The speed computation has been deprecated as it is not necessary for HE vision, which is discrete in nature.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/CortexAlgorithms/Vision/AIVisionAlgs.m\":77-115",
            "content": "//size\n+(NSInteger) sizeWidth:(UIView*)target{\n    if (target) return (int)target.showW;\n    return 0;\n}\n+(NSInteger) sizeHeight:(UIView*)target{\n    if (target) return (int)target.showH;\n    return 0;\n}\n//color\n+(NSInteger) colorRed:(UIView*)target{\n    if (target) return target.backgroundColor.red * 255.0f;\n    return 0;\n}\n+(NSInteger) colorGreen:(UIView*)target{\n    if (target){\n        return target.backgroundColor.green * 255.0f;\n    }\n    return 0;\n}\n+(NSInteger) colorBlue:(UIView*)target{\n    if (target) return target.backgroundColor.blue * 255.0f;\n    return 0;\n}\n//radius\n+(NSInteger) radius:(UIView*)target{\n    if (target) return (int)(target.layer.cornerRadius * 100);//\u7cbe\u5ea6100\n    return 0;\n}\n/**\n *  MARK:--------------------\u901f\u5ea6--------------------\n *  @desc \u76ee\u524d\u7b80\u5355\u7c97\u66b4\u4e24\u6862\u5dee\u503c (\u968f\u540e\u6709\u9700\u8981\u6539\u7528\u5fae\u79ef\u5206)\n *  @version\n *      2020.07.07: \u5c06\u4e3b\u89c2\u901f\u5ea6,\u6539\u4e3a\u5ba2\u89c2\u901f\u5ea6 (\u56e0\u4e3a\u4e3b\u89c2\u901f\u5ea6\u5bf9\u8bc6\u522b\u7565\u6709\u5f71\u54cd,\u867d\u53ef\u514b\u670d,\u4f46\u61d2\u5f97\u8bbe\u8ba1\u8bad\u7ec3\u6b65\u9aa4,\u6b63\u597d\u6539\u6210\u5ba2\u89c2\u901f\u5ea6\u66f4\u7b26\u5408\u4eca\u540e\u7684\u8bbe\u8ba1);\n *      2020.08.06: \u5c06lastXY\u4f4d\u7f6e\u8bb0\u5f55,\u52a0\u4e0ainitTime,\u56e0\u4e3aios\u7684\u590d\u7528\u673a\u5236,\u4f1a\u5bfc\u81f4\u590d\u7528\u5df2\u9500\u6bc1\u540c\u5185\u5b58\u5730\u5740\u7684view (\u53c2\u800320151-BUG11);\n *      2021.09.14: \u5e9f\u5f03\u901f\u5ea6,\u56e0\u4e3aHE\u89c6\u89c9\u662f\u79bb\u6563\u7684,\u901f\u5ea6\u4e0d\u91cd\u8981 (\u53c2\u800324017-\u95ee\u98981);"
        },
        {
            "comment": "This function calculates the speed of a target view relative to the current view. It first converts both views' coordinates and then measures the distance between them. The last recorded distance is stored in Redis with the views as keys, and the new distance is subtracted from it to get the speed. Finally, the speed is returned.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/CortexAlgorithms/Vision/AIVisionAlgs.m\":116-138",
            "content": " */\n//+(NSInteger) speed:(HEView*)target{\n//    //>> \u4e3b\u89c2\u901f\u5ea6\u4ee3\u7801;\n//    //CGFloat speed = 0;\n//    //CGPoint targetPoint = [UIView convertWorldPoint:target];\n//    //CGPoint selfPoint = [UIView convertWorldPoint:selfView];\n//    //CGFloat distanceX = (targetPoint.x - selfPoint.x);\n//    //CGFloat distanceY = (targetPoint.y - selfPoint.y);\n//    //CGFloat distance = sqrt(powf(distanceX, 2) + powf(distanceY, 2));\n//    //\n//    //NSString *key = STRFORMAT(@\"lastDistanceOf_%p_%p\",selfView,target);\n//    //NSObject *lastDistanceNum = [[XGRedis sharedInstance] objectForKey:key];\n//    //if (ISOK(lastDistanceNum, NSNumber.class)) {\n//    //    CGFloat lastDistance = [((NSNumber*)lastDistanceNum) floatValue];\n//    //    speed = distance - lastDistance;\n//    //}\n//    //[[XGRedis sharedInstance] setObject:[NSNumber numberWithFloat:distance] forKey:key time:cRTDefault];\n//    //return (NSInteger)speed;\n//\n//    //1. \u5f53\u524d\u4f4d\u7f6e\n//    CGFloat speed = 0;\n//    CGPoint targetPoint = [UIView convertWorldPoint:target];\n//    //2. \u4e0a\u5e27\u4f4d\u7f6e"
        },
        {
            "comment": "Calculates the distance between current and previous target points, stores the current point for future reference, and returns speed as an integer.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/CortexAlgorithms/Vision/AIVisionAlgs.m\":139-158",
            "content": "//    NSString *lastXKey = STRFORMAT(@\"lastX_%p_%lld\",target,target.initTime);\n//    NSString *lastYKey = STRFORMAT(@\"lastY_%p_%lld\",target,target.initTime);\n//    NSObject *lastXObj = [[XGRedis sharedInstance] objectForKey:lastXKey];\n//    NSObject *lastYObj = [[XGRedis sharedInstance] objectForKey:lastYKey];\n//    if (ISOK(lastXObj, NSNumber.class) && ISOK(lastYObj, NSNumber.class)) {\n//        CGFloat lastX = [((NSNumber*)lastXObj) floatValue];\n//        CGFloat lastY = [((NSNumber*)lastYObj) floatValue];\n//\n//        //3. \u8ba1\u7b97\u4f4d\u7f6e\u5dee\n//        CGFloat distanceX = (targetPoint.x - lastX);\n//        CGFloat distanceY = (targetPoint.y - lastY);\n//        speed = sqrt(powf(distanceX, 2) + powf(distanceY, 2));\n//    }\n//\n//    //4. \u5b58\u4f4d\u7f6e\u4e0b\u5e27\u7528\n//    [[XGRedis sharedInstance] setObject:[NSNumber numberWithFloat:targetPoint.x] forKey:lastXKey time:cRTDefault];\n//    [[XGRedis sharedInstance] setObject:[NSNumber numberWithFloat:targetPoint.y] forKey:lastYKey time:cRTDefault];\n//\n//    //5. \u8fd4\u56de\u7ed3\u679c (\u4fdd\u7559\u6574\u6570\u4f4d)\n//    return (NSInteger)speed;"
        },
        {
            "comment": "This code calculates the angle and distance between two UIView objects. The direction function takes in two views, calculates the angle in radians, converts it to a value between 0 and 1, and then returns an 8-directional angle (0-1) representing the angle from right to left or top to bottom. The distance function calculates the Euclidean distance between the two views and returns it as an NSInteger.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/CortexAlgorithms/Vision/AIVisionAlgs.m\":159-194",
            "content": "//}\n/**\n *  MARK:--------------------direction--------------------\n *  @version\n *      2023.03.13: \u6253\u5f00\u65b9\u5411\u7801 (\u53c2\u800328174-todo1);\n */\n+(NSInteger) direction:(UIView*)selfView target:(UIView*)target{\n    //1. \u53d6\u8ddd\u79bb\n    CGPoint distanceP = [UIView distancePoint:selfView target:target];\n    //2. \u5c06\u8ddd\u79bb\u8f6c\u6210\u89d2\u5ea6-PI -> PI (\u4ece\u53f3\u81f3\u5de6,\u4e0a\u9762\u4e3a-0 -> -3.14 / \u4ece\u53f3\u81f3\u5de6,\u4e0b\u9762\u4e3a0 -> 3.14)\n    CGFloat rads = atan2f(distanceP.y,distanceP.x);\n    //3. \u5c06(-PI\u5230PI) \u8f6c\u6362\u6210 (0\u52301)\n    float protoParam = (rads / M_PI + 1) / 2;\n    //4. 8\u5411(0-1)\u7248\u672c: \u8fd4\u56de8\u5411:\n    ////4. \u5c06(0\u52301)\u8f6c\u6210\u56db\u820d\u4e94\u5165\u6574\u6570(0-8);\n    //int paramInt = (int)roundf(protoParam * 8.0f);\n    //\n    ////5. \u5982\u679c\u662f8,\u4e5f\u662f0;\n    //return (paramInt % 8) / 8.0f;\n    //4. 360\u5411(0-360)\u7248\u672c: \u8fd4\u56de360\u5411;\n    NSInteger result = (NSInteger)roundf(protoParam * 360.0f);\n    if (Log4CortexAlgs) NSLog(@\"\u89c6\u89c9\u76ee\u6807 \u65b9\u5411\u89d2\u5ea6:%.2f (%.2f) \u8fd4\u56de:%ld\",rads / M_PI * 180,protoParam,result);\n    return result;\n}\n/**\n *  MARK:--------------------distance--------------------\n *  @version\n *      2021.05.07: \u6709\u65f6\u8ddd\u79bb\u660e\u660e\u662f0,\u4f46\u5374\u5403\u4e0d\u5230 (\u5c0f\u9e1f\u662f\u65b9\u7684\u4e0d\u662f\u5706\u7684,\u6240\u4ee5\u5728\u8ddd\u79bb\u5224\u65ad\u4e0a,\u4e0eeat\u65b9\u6cd5\u4fdd\u6301\u4e00\u81f4) (\u65e0\u7b14\u8bb0,\u6000\u7591\u662f\u6b64\u5904\u5bfc\u81f4\u5c31\u6539\u4e86);\n */\n+(NSInteger) distance:(UIView*)selfView target:(UIView*)target{"
        },
        {
            "comment": "This method calculates the distance between two UIViews and returns a real distance for collision detection. The previous implementation was changed several times, with comments explaining the changes in each version.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/CortexAlgorithms/Vision/AIVisionAlgs.m\":195-221",
            "content": "    CGPoint disPoint = [UIView distancePoint:selfView target:target];\n    CGFloat disFloat = sqrt(powf(disPoint.x, 2) + powf(disPoint.y, 2));\n    NSInteger distance = (NSInteger)(disFloat / 3.0f);\n    //\u4e0e\u8eab\u4f53\u91cd\u53e0,\u5219\u8ddd\u79bb\u4e3a0;\n    if (fabs(disPoint.x) <= 15.0f && fabs(disPoint.y) <= 15.0f) {\n        distance = 0;\n    }\n    return distance;\n}\n/**\n *  MARK:--------------------distanceY--------------------\n *  @version\n *      2021.01.23: \u6539\u4e3a\u8fd4\u56de\u771f\u5b9e\u8ddd\u79bb (\u4ec0\u4e48\u8ddd\u79bb\u53ef\u4ee5\u88ab\u649e\u5230,\u7531\u53cd\u7701\u7c7b\u6bd4\u81ea\u884c\u5b66\u4e60);\n *      2021.01.24: \u771f\u5b9e\u8ddd\u79bb\u5bfc\u81f4DisY\u5728\u591a\u5411\u98de\u884c\u7684VRS\u8bc4\u4ef7\u5bb9\u6613\u4e3a\u5426,\u6240\u4ee5\u5148\u505c\u6389 (\u968f\u65f6\u9632\u649e\u8bad\u7ec3\u65f6,\u9700\u8981\u518d\u6253\u5f00,\u56e0\u4e3a\u591a\u5411\u98de\u884c\u5411\u4e0a\u4e0b\u98de,\u5e94\u8be5\u53ef\u4ee5\u4e0d\u6015\u6b64\u95ee\u9898);\n *      2021.01.24: \u7ecf\u5206\u6790\u8bc4\u4ef7\u4e3a\u5426\u662f\u56e0\u4e3a\u5f88\u5c11\u7ecf\u5386\u591a\u53d8\u7684DisY,\u6240\u4ee5\u5c06\u76f4\u6295\u5230\u4e4c\u9e26\u8eab\u4e0a\u7684\u4f4d\u7f6e\u66f4\u968f\u673a\u4e9b,\u6b64\u5904\u53c8\u6539\u4e3a\u771f\u5b9e\u8ddd\u79bb\u4e86 (\u7ecf\u8bad\u7ec3\u591a\u5411\u98de\u884cok);\n */\n+(NSInteger) distanceY:(UIView*)selfView target:(UIView*)target{\n    return selfView.showY - target.showY;\n    //1. \u6570\u636e\u51c6\u5907;\n    //CGFloat selfY = [UIView convertWorldRect:selfView].origin.y;\n    //CGFloat selfMaxY = selfY + selfView.height;\n    //CGFloat targetY = [UIView convertWorldRect:target].origin.y;\n    //CGFloat targetMaxY = targetY + target.height;\n    //\n    ////2. self\u5728\u4e0b\u65b9\u65f6;\n    //if (selfY > targetMaxY) {"
        },
        {
            "comment": "This code defines several methods to calculate the distance between two UIViews, border width, and position X and Y. The distance calculation takes into account the positions of the views relative to each other, while the other methods directly retrieve the border width or position values from a single view.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/CortexAlgorithms/Vision/AIVisionAlgs.m\":222-252",
            "content": "    //    return selfY - targetMaxY;\n    //}else if(targetY > selfMaxY){\n    //    //3. self\u5728\u4e0a\u65b9\u65f6;\n    //    return targetY - selfMaxY;\n    //}\n    ////4. \u6709\u91cd\u53e0\u65f6,\u76f4\u63a5\u8fd4\u56de0;\n    //return 0;\n}\n+(NSInteger) distanceX:(UIView*)selfView target:(UIView*)target{\n    return selfView.showX - target.showX;\n}\n//border\n+(NSInteger) border:(UIView*)target{\n    if (target) return (int)(target.layer.borderWidth * 100);//\u7cbe\u5ea6100\n    return 0;\n}\n//posX\n+(NSInteger) posX:(UIView*)target{\n    if (target) return (NSInteger)[UIView convertWorldPoint:target].x;\n    return 0;\n}\n//posY\n+(NSInteger) posY:(UIView*)target{\n    if (target) return (NSInteger)[UIView convertWorldPoint:target].y;\n    return 0;\n}\n@end"
        }
    ]
}