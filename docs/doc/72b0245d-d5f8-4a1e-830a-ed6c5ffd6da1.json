{
    "summary": "This code defines methods in a category on `NVViewUtil` class to check for line data presence, calculate Euclidean distance and angle conversion for 4/8-direction grids.",
    "details": [
        {
            "comment": "This code is a part of the NVViewUtil.m file from the SMG_NothingIsAll codebase, created by jia in 2019. It defines two methods: `containsLineData` and `distancePoint`. The former checks if an array of two items exists within another array of line data, while the latter calculates the Euclidean distance between two points on a plane.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/NVViewUtil.m\":0-33",
            "content": "//\n//  NVViewUtil.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2019/6/17.\n//  Copyright \u00a9 2019\u5e74 XiaoGang. All rights reserved.\n//\n#import \"NVViewUtil.h\"\n@implementation NVViewUtil\n+(BOOL) containsLineData:(NSArray*)checkLineData fromLineDatas:(NSArray*)lineDatas{\n    if (ARRISOK(checkLineData) && checkLineData.count == 2 && ARRISOK(lineDatas)) {\n        for (NSArray *parentItem in lineDatas) {\n            id checkA = ARR_INDEX(checkLineData, 0);\n            id checkB = ARR_INDEX(checkLineData, 1);\n            if ([parentItem containsObject:checkA] && [parentItem containsObject:checkB]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n+(CGFloat) distancePoint:(CGPoint)first second:(CGPoint)second {\n    CGFloat deltaX = fabs(second.x - first.x);\n    CGFloat deltaY = fabs(second.y - first.y);\n    return sqrtf(deltaX * deltaX + deltaY * deltaY);\n}\n+(CGFloat) angleZero2OnePoint:(CGPoint)first second:(CGPoint)second {\n    //1. \u53d6PI\u89d2\u5ea6;\n    CGPoint distance = CGPointMake(second.x - first.x, second.y - first.y);"
        },
        {
            "comment": "1. Function calculates angle in radians and converts it to a direction value ranging from 0 to 1, considering both 4-direction and 8-direction cases.\n2. Uses trigonometry to calculate the angle between two points, then converts angle to a direction.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/NVViewUtil.m\":34-69",
            "content": "    CGFloat anglePI = atan2f(distance.y,distance.x);\n    //2. \u5c06(-PI\u5230PI) \u8f6c\u6362\u6210 (0\u52301)\n    float result = (anglePI / M_PI + 1) / 2;\n    return result;\n}\n+(CGFloat) anglePIPoint:(CGPoint)first second:(CGPoint)second {\n    CGFloat height = second.y - first.y;\n    CGFloat width = first.x - second.x;\n    CGFloat rads = atan(height/width);\n    return -rads;\n}\n/**\n *  MARK:--------------------\u5c06angle\u8f6c\u4e3a\u65b9\u5411\u503c--------------------\n *  @param angle : angle\u4e3a\u5de6\u5411\u987a\u65f6\u94880-1 (\u542b0,\u4e0d\u542b1);\n *  @param directionCount : \u65b9\u5411\u6570 (\u4e00\u822c\u4e3a4\u62168\u5411);\n */\n+(CGFloat) convertAngle2Direction:(CGFloat)angle directionCount:(int)directionCount{\n    //1. \u5f538\u5411\u65f6,x8x2=(0,1,2...15);\n    int intAngle = (int)(angle * directionCount * 2);\n    //2. \u518d+1=(15,0,1,2...14),\u6b64\u65f60-1\u4e3a\u5de6\u4e0a,2-3\u4e3a\u4e0a...14-15\u4e3a\u5de6;\n    intAngle += 1;\n    //3. \u518d/2=(0,1...7),\u6b64\u65f60\u4e3a\u5de6\u4e0a,1\u4e3a\u4e0a...7\u4e3a\u5de6;\n    intAngle /= 2;\n    //4. \u5c06(0-7)\u9664\u4ee58.0f,\u8f6c\u6362\u62100-1;\n    CGFloat result = intAngle / (float)directionCount;\n    result = result == 1.0f ? 0 : result;\n    return result;\n}\n+(CGFloat) convertAngle2Direction_4:(CGFloat)angle{\n    return [self convertAngle2Direction:angle directionCount:4];"
        },
        {
            "comment": "This code snippet defines a category on `NVViewUtil` class that adds a method to convert an angle into a direction for a 8-direction grid. The method takes in an angle and returns a CGFloat representing the corresponding direction index.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/NVViewUtil.m\":70-75",
            "content": "}\n+(CGFloat) convertAngle2Direction_8:(CGFloat)angle{\n    return [self convertAngle2Direction:angle directionCount:8];\n}\n@end"
        }
    ]
}