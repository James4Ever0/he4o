{
    "summary": "This code manages pointer IDs, provides database operations and utility functions for searching, inserting, and containment checks on objects, as well as array conversion and sorting. It also filters arrays or dictionaries, validates properties, and offers non-repeating array collection in various methods.",
    "details": [
        {
            "comment": "This code declares a class SMGUtils and contains methods for creating, retrieving, and updating pointer IDs associated with AIPointer objects. It also includes methods for setting net node pointer IDs, likely related to network nodes in an AI application.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.h\":0-25",
            "content": "//\n//  SMGUtils.h\n//  SMG_NothingIsAll\n//\n//  Created by \u8d3e  on 2017/4/19.\n//  Copyright \u00a9 2017\u5e74 XiaoGang. All rights reserved.\n//\n#import <Foundation/Foundation.h>\n@class AIPointer,AIKVPointer,AIObject,AIArray,ThinkModel,AIPort,AINodeBase,AIAlgNodeBase;\n@interface SMGUtils : NSObject\n//MARK:===============================================================\n//MARK:                     < PointerId >\n//MARK:===============================================================\n+(NSInteger) createPointerId:(NSString*)algsType dataSource:(NSString*)dataSource;\n+(NSInteger) createPointerId:(BOOL)updateLastId algsType:(NSString*)algsType dataSource:(NSString*)dataSource;\n+(NSInteger) getLastNetNodePointerId:(NSString*)algsType dataSource:(NSString*)dataSource;\n+(void) setNetNodePointerId:(NSInteger)count algsType:(NSString*)algsType dataSource:(NSString*)dataSource;\n//MARK:===============================================================\n//MARK:                     < AIPointer >\n//MARK:==============================================================="
        },
        {
            "comment": "This code contains multiple methods for creating different types of pointers in the AIKVPointer class. These include general pointers, directional pointers, cerebellum CanOut pointers, index pointers, and data pointers. The pointers are created based on various parameters such as folder name, algorithm type, data source, and whether it's an output or input pointer.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.h\":26-50",
            "content": "//General\u6307\u9488\n+(AIKVPointer*) createPointer:(NSString*)folderName algsType:(NSString*)algsType dataSource:(NSString*)dataSource isOut:(BOOL)isOut type:(AnalogyType)type;\n//Direction\u7684mv\u5206\u533apointer;(\u5b58\u5f15\u7528\u5e8f\u5217)\n+(AIKVPointer*) createPointerForDirection:(NSString*)mvAlgsType direction:(MVDirection)direction;\n//\u751f\u6210\u5c0f\u8111CanOut\u6307\u9488;\n+(AIKVPointer*) createPointerForCerebelCanOut;\n//\u751f\u6210indexValue\u7684\u6307\u9488;\n+(AIKVPointer*) createPointerForValue:(NSString*)algsType dataSource:(NSString*)dataSource isOut:(BOOL)isOut;\n+(AIKVPointer*) createPointerForValue:(NSInteger)pointerId algsType:(NSString*)algsType dataSource:(NSString*)dataSource isOut:(BOOL)isOut;\n//\u7d22\u5f15\u6307\u9488\n+(AIKVPointer*) createPointerForIndex;\n//\u5fae\u4fe1\u606f\u503c\u6307\u9488\n+(AIKVPointer*) createPointerForData:(NSString*)algsType dataSource:(NSString*)dataSource isOut:(BOOL)isOut;\n/**\n *  MARK:--------------------\u6982\u5ff5\u8282\u70b9\u6307\u9488--------------------\n *  @param dataSource : \u6709\u4e09\u79cd\u60c5\u51b5;\n *      1. input\u8f93\u5165TIR\u65b0\u6982\u5ff5\u65f6,\u6982\u5ff5\u7684ds\u5c31\u662f\u7b97\u6cd5\u7684at,\u6bd4\u5982:AIVersionAgls;\n *      2. \u7c7b\u6bd4\u6784\u5efa\u5668\u65f6,\u6982\u5ff5\u7684ds\u5c31\u662f\u7c7b\u6bd4\u6e90,\u6bd4\u5982:\u6709\u65e0\u5927\u5c0f\u540c\u5f02;\n *      3. \u9ed8\u8ba4(\u5176\u5b83)\u65f6,\u6982\u5ff5\u8282\u70b9\u7684ds\u662f\u5176content_ps\u4e2d\u7a00\u758f\u7801\u5171\u540c\u7684at;"
        },
        {
            "comment": "This code defines methods for creating pointers and comparing items. The createPointerForFo method creates a pointer for folders, taking into account different scenarios. The comparePointerA:pointerB method compares two pointers (1-level pId, 2-level identifier) to determine which is larger.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.h\":51-77",
            "content": " */\n+(AIKVPointer*) createPointerForAlg:(NSString*)folderName at:(NSString*)at dataSource:(NSString*)dataSource isOut:(BOOL)isOut type:(AnalogyType)type;\n/**\n *  MARK:--------------------\u65f6\u5e8f\u8282\u70b9\u6307\u9488--------------------\n *  @param ds : \u6709\u4e24\u79cd\u60c5\u51b5;\n *      1. \u7c7b\u6bd4\u6784\u5efa\u5668\u65f6,\u65f6\u5e8f\u7684ds\u5c31\u662f\u7c7b\u6bd4\u6e90,\u6bd4\u5982:\u6709\u65e0\u5927\u5c0f\u540c\u5f02;\n *      2. \u9ed8\u8ba4(\u5176\u5b83)\u65f6,\u65f6\u5e8f\u8282\u70b9\u7684ds=DefaultDataSource;\n */\n+(AIKVPointer*) createPointerForFo:(NSString*)folderName at:(NSString*)at ds:(NSString*)ds type:(AnalogyType)type;\n@end\n//MARK:===============================================================\n//MARK:                     < SMGUtils (Compare) >\n//MARK:===============================================================\n@interface SMGUtils (Compare)\n//+(BOOL) compareItemA:(id)itemA itemB:(id)itemB;\n//+(BOOL) compareArrayA:(NSArray*)arrA arrayB:(NSArray*)arrB;\n//+(BOOL) compareItemA:(id)itemA containsItemB:(id)itemB;\n//+(NSComparisonResult) compareRefsA_p:(NSArray*)refsA_p refsB_p:(NSArray*)refsB_p;//\u6bd4\u8f83refsA\u662f\u5426\u6bd4refsB\u5927\n//\u6bd4\u8f83pA\u662f\u5426\u6bd4pB\u5927 (1\u7ea7pId,2\u7ea7identifier)\n+(NSComparisonResult) comparePointerA:(AIPointer*)pA pointerB:(AIPointer*)pB;"
        },
        {
            "comment": "This code contains several comparison methods and utility functions for a database operation. The comparison methods compare port, integer, float, and double values. The SQLWhere_RowId method creates an SQL statement based on the provided row id. The searchObjectForPointer methods find objects for a given pointer in a file and optionally cache them in Redis with a specified timeout time.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.h\":79-104",
            "content": "//\u7c7b\u6bd4port (1\u7ea7\u5f3a\u5ea6,2\u7ea7pointer)\n+(NSComparisonResult) comparePortA:(AIPort*)pA portB:(AIPort*)pB;\n+(NSComparisonResult) compareIntA:(NSInteger)intA intB:(NSInteger)intB;\n+(NSComparisonResult) compareFloatA:(CGFloat)floatA floatB:(CGFloat)floatB;\n+(NSComparisonResult) compareDoubleA:(CGFloat)doubleA doubleB:(CGFloat)doubleB;\n@end\n//MARK:===============================================================\n//MARK:                     < @SMGUtils (DB) >\n//MARK:===============================================================\n@interface SMGUtils (DB)\n/**\n *  MARK:--------------------SQL\u8bed\u53e5\u4e4browId--------------------\n */\n+(NSString*) sqlWhere_RowId:(NSInteger)rowid;\n//+(NSString*) sqlWhere_K:(id)columnName V:(id)value;\n//+(NSDictionary*) sqlWhereDic_K:(id)columnName V:(id)value;\n/**\n *  MARK:--------------------searchObj--------------------\n */\n+(id) searchObjectForPointer:(AIPointer*)pointer fileName:(NSString*)fileName;\n+(id) searchObjectForPointer:(AIPointer*)pointer fileName:(NSString*)fileName time:(double)time;//\u627e\u5230\u540e,\u7f13\u5b58\u5230redis,time\u79d2;"
        },
        {
            "comment": "This code defines methods for searching and inserting objects, nodes, and performing containment checks. The `searchObjectForFilePath:` method searches for an object by file path and fileName. The `insertObject:pointer:fileName:time:` method inserts an object with a given pointer into the database with the specified fileName and time. The `containsSub_ps:parent_ps:` method checks if parent_ps contains sub_ps.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.h\":105-132",
            "content": "+(id) searchObjectForFilePath:(NSString*)filePath fileName:(NSString*)fileName time:(double)time;\n/**\n *  MARK:--------------------insertObj--------------------\n */\n//+(void) insertObject:(NSObject*)obj rootPath:(NSString*)rootPath fileName:(NSString*)fileName;\n+(void) insertObject:(NSObject*)obj pointer:(AIPointer*)pointer fileName:(NSString*)fileName time:(double)time;\n+(void) insertObject:(NSObject*)obj rootPath:(NSString*)rootPath fileName:(NSString*)fileName time:(double)time saveDB:(BOOL)saveDB;//\u540c\u65f6\u63d2\u5165\u5230redis,time\u79d2\n/**\n *  MARK:--------------------Node--------------------\n */\n+(id) searchNode:(AIKVPointer*)pointer;\n+(NSArray*) searchNodes:(NSArray*)ps;\n+(void) insertNode:(AINodeBase*)node;\n@end\n//MARK:===============================================================\n//MARK:                     < SMGUtils (Contains) >\n//MARK:===============================================================\n@interface SMGUtils (Contains)\n//\u5224\u65adparent_ps\u662f\u5426\u5305\u542bsub_ps;\n+(BOOL) containsSub_ps:(NSArray*)sub_ps parent_ps:(NSArray*)parent_ps;"
        },
        {
            "comment": "This code snippet contains methods to convert arrays of various types, including converting ports to pointers, converting nodes to pointers, and converting values to micro value arrays. Some methods have been deprecated such as converting nested values.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.h\":133-162",
            "content": "+(BOOL) containsSub_p:(AIPointer*)sub_p parent_ps:(NSArray*)parent_ps;\n+(BOOL) containsSub_p:(AIPointer*)sub_p parentPorts:(NSArray*)parentPorts;\n@end\n//MARK:===============================================================\n//MARK:                     < SMGUtils (convert) >\n//MARK:===============================================================\n@interface SMGUtils (Convert)\n/**\n *  MARK:--------------------\u5c06ports\u7aef\u53e3\u4e2d\u6307\u5411\u8f6c\u6362\u4e3a\u6307\u9488\u6570\u7ec4\u8fd4\u56de--------------------\n *  @result notnull\n */\n+(NSMutableArray*) convertPointersFromPorts:(NSArray*)ports;\n//nodes\u8f6cpointers\n+(NSMutableArray*) convertPointersFromNodes:(NSArray*)nodes;\n//\u5c06pointers\u8f6c\u5b57\u7b26\u4e32;\n+(NSString*) convertPointers2String:(NSArray*)pointers;\n//\u5c06\u6982\u5ff5\u4e2d\u7684value_ps(\u542b\u5d4c\u5957)\u5c55\u5f00\u6210\u7eaf\u5fae\u4fe1\u606f\u7684\u7ec4; @result : notnull\n//2021.02.05: \u6982\u5ff5\u5d4c\u5957\u65e9\u5df2\u5e9f\u5f03\n//+(NSMutableArray*) convertValuePs2MicroValuePs:(NSArray*)value_ps;\n//\u4efb\u610farr\u5143\u7d20\u7c7b\u578b\u8f6c\u6362 notnull\n+(NSMutableArray*) convertArr:(NSArray*)arr convertBlock:(id(^)(id obj))convertBlock;\n+(NSMutableArray*) convertArr:(NSArray*)arr convertItemArrBlock:(NSArray*(^)(id obj))convertItemArrBlock;"
        },
        {
            "comment": "This code defines a class SMGUtils and provides several methods for sorting arrays in descending or ascending order, with optional comparison blocks for customized sorting logic. The interface also includes a method to convert an array to a dictionary using a specified key-value block.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.h\":163-187",
            "content": "//\u5c06arr\u8f6c\u6210dic\n+(NSDictionary*) convertArr2Dic:(NSArray*)objs kvBlock:(NSArray*(^)(id obj))kvBlock;\n/**\n *  MARK:--------------------\u4ecefoPorts\u4e2d\u627e\u51fa\u542bvalueIden\u7684\u5143\u7d20\u5e76\u8fd4\u56de--------------------\n *  @desc \u6bcf\u4e2afo,\u4ec5\u5224\u65ad\u9996\u6761\u7b26\u5408\u7684alg;\n */\n+(NSMutableArray*) convertAlgPsFromFoPorts:(NSArray*)foPorts valueIden:(NSString*)valueIden;\n@end\n//MARK:===============================================================\n//MARK:                     < SMGUtils (Sort) >\n//MARK:===============================================================\n@interface SMGUtils (Sort)\n//\u5bf9ps\u8fdb\u884c\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\n+(NSArray*) sortPointers:(NSArray*)ps;\n//\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n+(NSArray*) sortBig2Small:(NSArray*)arr compareBlock:(double(^)(id obj))compareBlock;\n+(NSArray*) sortBig2Small:(NSArray*)arr compareBlock1:(double(^)(id obj))compareBlock1 compareBlock2:(double(^)(id obj))compareBlock2;\n+(NSArray*) sortBig2Small:(NSArray*)arr compareBlock1:(double(^)(id obj))compareBlock1 compareBlock2:(double(^)(id obj))compareBlock2 compareBlock3:(double(^)(id obj))compareBlock3;\n+(NSArray*) sortSmall2Big:(NSArray*)arr compareBlock:(double(^)(id obj))compareBlock;"
        },
        {
            "comment": "This code defines a class extension called SMGUtils with methods to remove subsets, prevent duplicates, and filter intersections. The removeSub methods take in an array of sub-elements and parent elements, returning a mutable array containing only the removed sub-elements. The removeRepeat methods remove duplicate items from an input array using optional convertBlock for data type conversion if needed. The filterSameIdentifier method filters out elements with the same identifier from two input arrays.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.h\":189-219",
            "content": "@end\n//MARK:===============================================================\n//MARK:                     < SMGUtils (Remove) >\n//MARK:===============================================================\n@interface SMGUtils (Remove)\n/**\n *  MARK:--------------------\u53d6\u5dee\u96c6--------------------\n *  @result notnull\n */\n+(NSMutableArray*) removeSub_ps:(NSArray*)sub_ps parent_ps:(NSArray*)parent_ps;\n+(NSMutableArray*) removeSub_p:(AIPointer*)sub_p parent_ps:(NSArray*)parent_ps;\n+(NSMutableArray*) removeArr:(NSArray *)arr checkValid:(BOOL(^)(id item))checkValid;\n/**\n *  MARK:--------------------\u9632\u91cd--------------------\n *  _param convertBlock : \u7528\u4e8e\u8f6c\u6362\"\u5224\u65ad\u9632\u91cd\u7684\u6570\u636e\u7c7b\u578b\";\n *  @result notnull\n */\n+(NSMutableArray*) removeRepeat:(NSArray*)protoArr;\n+(NSMutableArray*) removeRepeat:(NSArray*)protoArr convertBlock:(id(^)(id obj))convertBlock;\n/**\n *  MARK:--------------------\u53d6\u4ea4\u96c6--------------------\n *  @result notnull\n */\n//\u4ecebps\u4e2d,\u627e\u5230\u4e0eap\u540c\u533a\u7684bItem\u8fd4\u56de;\n+(AIKVPointer*) filterSameIdentifier_p:(AIKVPointer*)a_p b_ps:(NSArray*)b_ps;\n//\u4ecebps\u4e2d,\u627e\u5230\u4e0eaps\u540c\u533a\u7684 \u6240\u6709\u6620\u5c04\u7ed3\u679c \u8fd4\u56de (\u6839\u636ekey\u53bb\u91cd);"
        },
        {
            "comment": "This code contains several class methods that filter arrays based on specific conditions. The methods include:\n1. `filterSameIdentifier_Dic`, which finds all items with the same identifier from two input arrays (not shown in the provided code).\n2. `filterSameIdentifier_Arr` and `filterPointers`, which find elements within a single array that meet certain validity conditions.\n3. `filterSameIdentifier_DiffId_p` and `filterSameIdentifier_DiffId_ps`, which find elements with the same identifier but different values in two input arrays.\n4. Finally, `filterArrA` filters two input arrays for specific conditions (not shown in the provided code).",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.h\":220-244",
            "content": "+(NSMutableDictionary*) filterSameIdentifier_Dic:(NSArray*)a_ps b_ps:(NSArray*)b_ps;\n//\u4ecefrom\u4e2d,\u627e\u51favalid\u540c\u533a\u7684 \u6240\u6709\u7ed3\u679c\u8fd4\u56de (\u4e0d\u53bb\u91cd);\n//+(NSArray*) filterSameIdentifier_Arr:(NSArray*)from_ps valid_ps:(NSArray*)valid_ps;\n//\u4eceb_ps\u4e2d,\u627e\u51fa\u4e0ea_p\u540c\u533a\u4e0d\u540c\u503c\u7684\u6307\u9488;\n+(AIKVPointer*) filterSameIdentifier_DiffId_p:(AIKVPointer*)a_p b_ps:(NSArray*)b_ps;\n//\u540c\u533a\u4e0d\u540c\u503c\n+(NSMutableDictionary*) filterSameIdentifier_DiffId_ps:(NSArray*)a_ps b_ps:(NSArray*)b_ps;\n/**\n *  MARK:--------------------\u4ecefrom_ps\u4e2d,\u7b5b\u9009\u51fa\u6709\u6548\u7684\u5143\u7d20\u8fd4\u56de--------------------\n *  @result notnull\n */\n+(NSArray*) filterPointers:(NSArray *)from_ps checkValid:(BOOL(^)(AIKVPointer *item_p))checkValid;\n/**\n *  MARK:--------------------\u4ecea_ps\u548cb_ps\u4e2d,\u7b5b\u9009\u51fa\u6709\u6548\u7684\u5143\u7d20\u6620\u5c04\u8fd4\u56de--------------------\n *  @result notnull (\u8fd4\u56de\u7684\u5b57\u5178\u4e2dkey,\u4e3aNSData\u7c7b\u578b)\n */\n+(NSMutableDictionary*) filterPointers:(NSArray *)a_ps b_ps:(NSArray*)b_ps checkItemValid:(BOOL(^)(AIKVPointer *a_p,AIKVPointer *b_p))checkItemValid;\n/**\n *  MARK:--------------------\u7b5b\u9009\u6570\u7ec4--------------------\n *  @result notnull\n */\n+(NSArray*) filterArrA:(NSArray*)arrA arrB:(NSArray*)arrB;"
        },
        {
            "comment": "The code contains multiple utility functions for filtering and checking arrays, dictionaries, ports, and algorithms based on specified conditions. These functions can be used to filter single items or entire lists by validating properties, specific types, or using custom filters.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.h\":245-272",
            "content": "+(NSMutableArray*) filterArr:(NSArray *)arr checkValid:(BOOL(^)(id item))checkValid;\n+(NSMutableArray*) filterArr:(NSArray *)arr checkValid:(BOOL(^)(id item))checkValid limit:(NSInteger)limit;\n/**\n *  MARK:--------------------\u7b5b\u9009\u5b57\u5178--------------------\n *  @result notnull\n */\n+(NSMutableDictionary*) filterDic:(NSDictionary *)dic checkValid:(BOOL(^)(id key,id value))checkValid;\n/**\n *  MARK:--------------------\u7528analogyType\u6765\u7b5b\u9009ports--------------------\n *  @result notnull\n */\n+(NSArray*) filterPorts_Normal:(NSArray*)ports;\n+(NSArray*) filterPorts:(NSArray*)ports havTypes:(NSArray*)havTypes noTypes:(NSArray*)noTypes;\n/**\n *  MARK:--------------------\u67e5\u627e\u5355\u6761--------------------\n */\n+(id) filterSingleFromArr:(NSArray *)arr checkValid:(BOOL(^)(id item))checkValid;\n/**\n *  MARK:--------------------\u7b5b\u9009alg by \u6307\u5b9a\u6807\u8bc6--------------------\n */\n+(NSArray*) filterAlg_Ps:(NSArray*)alg_ps valueIdentifier:(NSString*)valueIdentifier itemValid:(void(^)(AIAlgNodeBase *alg,AIKVPointer *value_p))itemValid;\n/**\n *  MARK:--------------------\u7b5b\u9009\u6307\u9488 by isOut--------------------"
        },
        {
            "comment": "This code contains various methods for filtering and collecting data arrays based on specific identifiers or values. It includes functions to filter pointers, algorithm ports, FO ports, and FOS, as well as a method to collect two arrays into a new mutable array (union).",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.h\":273-304",
            "content": " *  @param proto_ps : \u4ece\u4e2d\u7b5b\u9009\n *  @param isOut : false\u65f6\u7b5b\u9009\u51fa\u975eout\u7684pointers\n *  \u6ce8:\u672a\u5224\u5b9a\u662f\u5426\u8fde\u7eed;\n */\n+(NSArray*) filterPointers:(NSArray*)proto_ps isOut:(BOOL)isOut;\n/**\n *  MARK:--------------------\u7b5b\u9009\u6307\u9488 by \u6307\u5b9a\u6807\u8bc6--------------------\n */\n+(NSArray*) filterPointers:(NSArray*)from_ps identifier:(NSString*)identifier;\n/**\n *  MARK:--------------------\u7b5b\u9009\u7aef\u53e3 by \u6307\u5b9a\u6807\u8bc6--------------------\n */\n+(NSArray*) filterAlgPorts:(NSArray*)algPorts valueIdentifier:(NSString*)valueIdentifier;\n//\u7b5b\u9009foPorts\u4e2d,\u5305\u542b\u7a00\u758f\u7801\u540c\u533a\u7801\u7684;\n+(NSArray*) filterFoPorts:(NSArray*)foPorts valueIdentifier:(NSString*)valueIdentifier;\n//\u7b5b\u9009fos\u4e2d,\u5305\u542b\u7a00\u758f\u7801\u540c\u533a\u7801\u7684;\n+(NSArray*) filterFos:(NSArray*)fos valueIdentifier:(NSString*)valueIdentifier;\n@end\n//MARK:===============================================================\n//MARK:                     < SMGUtils (Collect) >\n//MARK:===============================================================\n@interface SMGUtils (Collect)\n/**\n *  MARK:--------------------\u5e76\u96c6--------------------\n *  @result notnull\n */\n+(NSMutableArray *) collectArrA:(NSArray*)arrA arrB:(NSArray*)arrB;"
        },
        {
            "comment": "This code defines two functions for collecting non-repeating arrays, one maintaining order and the other not. It also includes a method for iterating over an array in both forward and reverse directions using a block.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.h\":305-324",
            "content": "//\u4e0d\u7ba1\u987a\u5e8f: \u5148\u6536\u96c6bigArr\u518d\u6536\u96c6littleArr\n+(NSMutableArray *) collectArrA_NoRepeat:(NSArray*)arrA arrB:(NSArray*)arrB;\n//\u4fdd\u6301\u987a\u5e8f: \u5148\u6536\u96c6first\u518d\u6536\u96c6second\n+(NSMutableArray *) collectArrA_NoRepeat_Sort:(NSArray*)firstArr arrB:(NSArray*)secondArr;\n@end\n@interface SMGUtils (Other)\n/**\n *  MARK:--------------------\u904d\u5386--------------------\n */\n//+(void) foreach:(NSArray *)a_ps b_ps:(NSArray*)b_ps tryOut:(void(^)(AIKVPointer *a_p,AIKVPointer *b_p))tryOut;\n/**\n *  MARK:--------------------for\u6b63\u53cd\u5e8f\u6267\u884c--------------------\n */\n+(void) fori:(NSArray *)arr min:(NSInteger)min max:(NSInteger)max run:(BOOL(^)(id item,NSInteger i))run forward:(BOOL)forward;\n@end"
        }
    ]
}