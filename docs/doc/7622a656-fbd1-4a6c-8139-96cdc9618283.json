{
    "summary": "The `getAbsoluteMatching_General` method performs absolute matching with general parameters, supports duplication prevention and requires specific inputs to return an object. It retrieves the index model for a given algorithm and data source, filters existing models, creates a new one if none match, manages index sequences, removes duplicates, calculates absolute difference between values, and provides functions for searching and inserting data dictionaries.",
    "details": [
        {
            "comment": "This code defines a method `getAbsoluteMatching_General` that performs an absolute matching operation with general parameters. It takes in content, sorting, and exclusion lists as well as a block to get reference ports. The method returns an object after performing the matching operation. It has been updated several times for bug fixes and now supports type-based duplication prevention.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndexUtils.m\":0-26",
            "content": "//\n//  AINetIndexUtils.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2019/10/31.\n//  Copyright \u00a9 2019\u5e74 XiaoGang. All rights reserved.\n//\n#import \"AINetIndexUtils.h\"\n#import \"NSString+Extension.h\"\n@implementation AINetIndexUtils\n//MARK:===============================================================\n//MARK:                     < \u7edd\u5bf9\u5339\u914d (\u6982\u5ff5/\u65f6\u5e8f) \u901a\u7528\u65b9\u6cd5 >\n//MARK:===============================================================\n/**\n *  MARK:--------------------alg/fo \u7edd\u5bf9\u5339\u914d\u901a\u7528\u65b9\u6cd5--------------------\n *  @version\n *      2021.04.25: \u652f\u6301ds\u540c\u533a\u5224\u65ad (\u53c2\u800323054-\u7591\u70b9);\n *      2021.04.27: \u4fee\u590d\u56e0ds\u4e3a\u7a7a\u65f6\u9ed8\u8ba4dsSeem\u4e3atrue\u903b\u8f91\u9519\u8bef,\u5bfc\u81f4alg\u9632\u91cd\u5931\u8d25,\u6c38\u8fdc\u8fd4\u56denil\u7684BUG;\n *      2021.09.22: \u652f\u6301type\u9632\u91cd;\n */\n+(id) getAbsoluteMatching_General:(NSArray*)content_ps sort_ps:(NSArray*)sort_ps except_ps:(NSArray*)except_ps getRefPortsBlock:(NSArray*(^)(AIKVPointer *item_p))getRefPortsBlock at:(NSString*)at ds:(NSString*)ds type:(AnalogyType)type{\n    return [self getAbsoluteMatching_ValidPs:content_ps sort_ps:sort_ps except_ps:except_ps noRepeatArea_ps:nil getRefPortsBlock:getRefPortsBlock at:at ds:ds type:type];"
        },
        {
            "comment": "This method performs absolute matching and limits the search range by providing a list of valid pointers. It takes content, sorting, exception pointers, noRepeatArea, a block to get reference ports, an identifier string, data type, and returns an object if valid parameters are provided.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndexUtils.m\":27-48",
            "content": "}\n/**\n *  MARK:--------------------\u7edd\u5bf9\u5339\u914d + \u9650\u5b9a\u8303\u56f4--------------------\n *  @param noRepeatArea_ps \u9650\u5b9a\u8303\u56f4: \u7ed3\u679c\u5fc5\u987b\u4ecevalid_ps\u4e2d\u627e (\u9650\u5b9a\u8303\u56f4\u65f6\u4e0d\u5f97\u4f20nil,\u4e0d\u9650\u5b9a\u65f6\u76f4\u63a5\u4f20nil\u5373\u53ef);\n */\n+(id) getAbsoluteMatching_ValidPs:(NSArray*)content_ps sort_ps:(NSArray*)sort_ps except_ps:(NSArray*)except_ps noRepeatArea_ps:(NSArray*)noRepeatArea_ps getRefPortsBlock:(NSArray*(^)(AIKVPointer *item_p))getRefPortsBlock at:(NSString*)at ds:(NSString*)ds type:(AnalogyType)type{\n    //1. \u6570\u636e\u68c0\u67e5\n    if (!getRefPortsBlock) return nil;\n    content_ps = ARRTOOK(content_ps);\n    NSString *md5 = STRTOOK([NSString md5:[SMGUtils convertPointers2String:sort_ps]]);\n    except_ps = ARRTOOK(except_ps);\n    //2. \u4f9d\u6b21\u627econtent_ps\u7684\u88ab\u5f15\u7528\u5e8f\u5217,\u5e76\u5224\u65adheader\u5339\u914d;\n    for (AIKVPointer *item_p in content_ps) {\n        //3. \u53d6refPorts;\n        NSArray *refPorts = ARRTOOK(getRefPortsBlock(item_p));\n        //4. \u5224\u5b9arefPort.header\u662f\u5426\u4e00\u81f4;\n        for (AIPort *refPort in refPorts) {\n            //5. ds\u9632\u91cd (ds\u65e0\u6548\u65f6,\u9ed8\u8ba4\u4e3atrue);\n            BOOL atSeem = STRISOK(at) ? [at isEqualToString:refPort.target_p.algsType] : true;"
        },
        {
            "comment": "This code checks if the given data source and type match a reference port. If they do, it ensures that the reference port is not in the except_ps list and its MD5 matches the header. If these conditions are met, the code searches for the node using SMGUtils. If valid_ps is provided, the node must be included in it; otherwise, any matching node will be returned. The code also provides a method to get an absolute match from a specified range of ports by filtering based on type.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndexUtils.m\":49-75",
            "content": "            BOOL dsSeem = STRISOK(ds) ? [ds isEqualToString:refPort.target_p.dataSource] : true;\n            BOOL typeSeem = type == refPort.target_p.type;\n            //6. ds\u540c\u533a & \u5c06md5\u5339\u914dheader & \u4e0d\u5728except_ps\u7684\u627e\u5230\u5e76\u8fd4\u56de;\n            if (atSeem && dsSeem && typeSeem && ![except_ps containsObject:refPort.target_p] && [md5 isEqualToString:refPort.header]) {\n                //7. \u5f53valid_ps\u4e0d\u4e3a\u7a7a\u65f6,\u8981\u6c42\u5fc5\u987b\u5305\u542b\u5728valid_ps\u4e2d;\n                if (noRepeatArea_ps) {\n                    if ([noRepeatArea_ps containsObject:refPort.target_p]) {\n                        return [SMGUtils searchNode:refPort.target_p];\n                    }\n                }else {\n                    return [SMGUtils searchNode:refPort.target_p];\n                }\n            }\n        }\n    }\n    return nil;\n}\n/**\n *  MARK:--------------------\u4ece\u6307\u5b9a\u8303\u56f4\u4e2d\u83b7\u53d6\u7edd\u5bf9\u5339\u914d--------------------\n *  @param validPorts : \u6307\u5b9a\u8303\u56f4\u57df;\n *  @version\n *      2021.09.23: \u6307\u5b9a\u8303\u56f4\u83b7\u53d6\u7edd\u5bf9\u5339\u914d,\u4e5f\u8981\u5224\u65adtype\u7c7b\u578b (\u4f46\u6709\u65f6\u4f20\u5165\u7684validPorts\u672c\u6765\u5c31\u662f\u5df2\u7b5b\u9009\u8fc7type\u7684) (\u53c2\u800324019);\n */\n+(id) getAbsoluteMatching_ValidPorts:(NSArray*)validPor"
        },
        {
            "comment": "This method finds a matching port from the validPorts array based on specific conditions such as at, ds, and type. It first checks the input data, then iterates through each valid port and checks if it matches the specified conditions without being in the except_ps list. If a match is found, it returns the corresponding index node, otherwise it returns nil.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndexUtils.m\":75-97",
            "content": "ts sort_ps:(NSArray*)sort_ps except_ps:(NSArray*)except_ps at:(NSString*)at ds:(NSString*)ds type:(AnalogyType)type{\n    //1. \u6570\u636e\u68c0\u67e5\n    NSString *md5 = STRTOOK([NSString md5:[SMGUtils convertPointers2String:sort_ps]]);\n    except_ps = ARRTOOK(except_ps);\n    //2. \u4ece\u6307\u5b9a\u7684validPorts\u4e2d\u4f9d\u6b21\u627eheader\u5339\u914d;\n    for (AIPort *validPort in validPorts) {\n        //5. ds\u9632\u91cd (ds\u65e0\u6548\u65f6,\u9ed8\u8ba4\u4e3atrue);\n        BOOL atSeem = STRISOK(at) ? [at isEqualToString:validPort.target_p.algsType] : true;\n        BOOL dsSeem = STRISOK(ds) ? [ds isEqualToString:validPort.target_p.dataSource] : true;\n        BOOL typeSeem = type == validPort.target_p.type;\n        //6. ds\u540c\u533a & \u5c06md5\u5339\u914dheader & \u4e0d\u5728except_ps\u7684\u627e\u5230\u5e76\u8fd4\u56de;\n        if (atSeem && dsSeem && typeSeem && ![except_ps containsObject:validPort.target_p] && [md5 isEqualToString:validPort.header]) {\n            return [SMGUtils searchNode:validPort.target_p];\n        }\n    }\n    return nil;\n}\n//MARK:===============================================================\n//MARK:                     < \u7d22\u5f15\u5e8f\u5217 >\n//MARK:==============================================================="
        },
        {
            "comment": "This function retrieves the index model for a given algorithm type and data source. It first collects all existing index sequences, then filters the models based on the provided algorithm type and data source. If no matching model is found, it creates a new one and adds it to the list of index models. Finally, it returns the selected or newly created model.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndexUtils.m\":98-125",
            "content": "/**\n *  MARK:--------------------\u7d22\u5f15\u5e8f\u5217--------------------\n *  @desc \u53d6\u73b0\u6709\u7d22\u5f15\u5e8f\u5217 (\u65e0\u5219\u65b0\u5efa);\n *  @version\n *      2023.07.19: \u56e0\u4e3a\u7d22\u5f15\u5e8f\u5217\u4e3a\u7a7a,\u5bfc\u81f4\u95ea\u9000\u95ee\u9898 (\u68c0\u67e5\u7d22\u5f15fnIndexArr\u4e0d\u5f97\u4e3a\u7a7a);\n *  @result notnull\n */\n+(AINetIndexModel*) searchIndexModel:(NSString*)at ds:(NSString*)ds isOut:(BOOL)isOut{\n    //1. \u53d6\u51fa\u6240\u6709\u7d22\u5f15\u5e8f\u5217;\n    NSArray *fnIndexArr = ARRTOOK([SMGUtils searchObjectForPointer:[SMGUtils createPointerForIndex] fileName:kFNIndex(isOut) time:cRTIndex]);\n    NSMutableArray *indexModels = [[NSMutableArray alloc] initWithArray:fnIndexArr];\n    //2. \u627e\u51fa\u540c\u6807\u8bc6\u76f8\u7b26\u7684;\n    AINetIndexModel *model = ARR_INDEX([SMGUtils filterArr:indexModels checkValid:^BOOL(AINetIndexModel *item) {\n        return [item.algsType isEqualToString:at] && [item.dataSource isEqualToString:ds];\n    }], 0);\n    //3. \u627e\u4e0d\u5230\u5219\u65b0\u5efa\n    if (model == nil) {\n        model = [[AINetIndexModel alloc] init];\n        model.algsType = at;\n        model.dataSource = ds;\n        [indexModels addObject:model];\n    }\n    return model;\n}\n+(void) insertIndexModel:(AINetIndexModel*)model isOut:(BOOL)isOut{"
        },
        {
            "comment": "This code retrieves all index sequences, removes any old identical models, adds a new model, and stores the updated models. It also provides functions for searching and inserting data dictionaries.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndexUtils.m\":126-149",
            "content": "    //1. \u53d6\u51fa\u6240\u6709\u7d22\u5f15\u5e8f\u5217;\n    NSMutableArray *models = [[NSMutableArray alloc] initWithArray:[SMGUtils searchObjectForPointer:[SMGUtils createPointerForIndex] fileName:kFNIndex(isOut) time:cRTIndex]];\n    //2. \u5c06\u65e7\u540c\u6807\u8bc6model\u79fb\u9664;\n    models = [SMGUtils filterArr:models checkValid:^BOOL(AINetIndexModel *item) {\n        return ![item.dataSource isEqualToString:model.dataSource] || ![item.algsType isEqualToString:model.algsType];\n    }];\n    //3. \u5c06\u65b0\u7684model\u52a0\u5165;\n    [models addObject:model];\n    //4. \u5b58\u65b0models;\n    [SMGUtils insertObject:models pointer:[SMGUtils createPointerForIndex] fileName:kFNIndex(isOut) time:cRTIndex];\n}\n/**\n *  MARK:--------------------\u7a00\u758f\u7801\u503c\u5b57\u5178--------------------\n *  @result notnull\n */\n+(NSDictionary*) searchDataDic:(NSString*)at ds:(NSString*)ds isOut:(BOOL)isOut{\n    return DICTOOK([SMGUtils searchObjectForPointer:[SMGUtils createPointerForData:at dataSource:ds isOut:isOut] fileName:kFNData(isOut) time:cRTData]);\n}\n+(void) insertDataDic:(NSDictionary*)dataDic at:(NSString*)at ds:(NSString*)ds isOut:(BOOL)isOut{"
        },
        {
            "comment": "This code calculates the absolute difference between two values and applies additional conditions if the values are from a looping V (variable) type. It then returns the calculated delta value. The `SMGUtils` is used to insert an object into storage, and `AIValueInfo` provides information about the variable being measured.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AINetIndex/AINetIndexUtils.m\":150-168",
            "content": "    [SMGUtils insertObject:DICTOOK(dataDic) pointer:[SMGUtils createPointerForData:at dataSource:ds isOut:isOut] fileName:kFNData(isOut) time:cRTData];\n}\n/**\n *  MARK:--------------------\u53d6\u4e24\u4e2aV\u5dee\u503c--------------------\n *  @param vInfo notnull \u4e3a\u6027\u80fd\u597d,\u63d0\u524d\u53d6\u597dvalueInfo\u4f20\u8fc7\u6765\u590d\u7528;\n */\n+(CGFloat) deltaWithValueA:(double)valueA valueB:(double)valueB at:(NSString*)at ds:(NSString*)ds isOut:(BOOL)isOut vInfo:(AIValueInfo*)vInfo {\n    //1. \u8ba1\u7b97\u4e24\u4e2aV\u5dee\u503c;\n    double delta = fabs(valueA - valueB);\n    //2. \u5982\u679c\u662f\u5faa\u73afV\u65f6,\u6b63\u53cd\u53d6\u5c0f;\n    if (vInfo.loop && delta > (vInfo.span / 2)) {\n        delta = vInfo.max - delta;\n    }\n    return delta;\n}\n@end"
        }
    ]
}