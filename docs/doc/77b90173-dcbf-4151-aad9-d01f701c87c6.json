{
    "summary": "This code includes methods for filtering an array of dictionaries based on timestamps, finding identifiers and MD5 hashes of data.",
    "details": [
        {
            "comment": "This function filters an array of dictionaries based on start and end time strings. It converts the input times to timestamps, finds the index of the first item starting at or after start time, then loops through the array to find the last item equal to end time.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGLog/HeLogUtil.m\":0-31",
            "content": "//\n//  HeLogUtil.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2020/3/14.\n//  Copyright \u00a9 2020\u5e74 XiaoGang. All rights reserved.\n//\n#import \"HeLogUtil.h\"\n#import <CommonCrypto/CommonCrypto.h>\n@implementation HeLogUtil\n/**\n *  MARK:--------------------filter--------------------\n */\n+(NSArray*) filterByTime:(NSString*)startT endT:(NSString*)endT checkDatas:(NSArray*)checkDatas{\n    //1. \u8f6c\u6362startT\u548cendT\u7684\u65f6\u95f4\u6233;\n    checkDatas = ARRTOOK(checkDatas);\n    long long startTime = [SMGUtils timestampFromStr_yyyyMMddHHmmssSSS:startT defaultResult:0];\n    long long endTime = [SMGUtils timestampFromStr_yyyyMMddHHmmssSSS:endT defaultResult:LONG_LONG_MAX];\n    //2. \u627e\u8d77\u59cbindex\n    NSInteger startIndex = checkDatas.count;\n    NSInteger endIndex = -1;\n    for (NSInteger i = 0; i < checkDatas.count; i++) {\n        NSDictionary *item = checkDatas[i];\n        long long itemTime = [NUMTOOK([item objectForKey:kTime]) longLongValue];\n        if (itemTime >= startTime && startIndex == checkDatas.count) {\n            startIndex = i;\n        }\n        if (itemTime == endTime) {"
        },
        {
            "comment": "This code defines a method \"filterByKeyword:checkDatas:\" that takes in a keyword and an array of dictionaries called \"checkDatas\". It prepares the data by converting the checkDatas to an immutable array, and checks if the input keyword is not empty. If it's not empty, it splits the keyword into an array of keywords using \"&\" as a separator. Then, it loops through each dictionary in the checkDatas array, checks if the log string from each dictionary contains all the keywords, and adds the dictionary to a mutable result array if it does. Finally, it returns the filtered result array.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGLog/HeLogUtil.m\":32-74",
            "content": "            endIndex = i;\n        }else if(itemTime < endTime){\n            endIndex = i - 1;\n        }\n    }\n    //3. \u622a\u53d6\n    NSInteger length = endIndex - startIndex + 1;\n    return ARR_SUB(checkDatas, startIndex,length);\n}\n+(NSArray*) filterByKeyword:(NSString*)keyword checkDatas:(NSArray*)checkDatas{\n    //1. \u6570\u636e\u51c6\u5907\n    checkDatas = ARRTOOK(checkDatas);\n    if (!STRISOK(keyword)) {\n        return checkDatas;\n    }\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    NSString *sep = @\"&\";\n    NSArray *kws = STRTOARR(keyword, sep);\n    //2. \u7b5b\u9009\n    for (NSDictionary *item in checkDatas) {\n        NSString *log = [item objectForKey:kLog];\n        //3. \u5224\u65ad\u5305\u542b\u6240\u6709\u5173\u952e\u5b57:kws\n        BOOL contains = true;\n        for (NSString *kw in kws) {\n            if (![log containsString:kw]) {\n                contains = false;\n                break;\n            }\n        }\n        if (contains) {\n            [result addObject:item];\n        }\n    }\n    return result;\n}\n/**\n *  MARK:--------------------\u6570\u636e\u7684\u6807\u8bc6--------------------\n *  @version"
        },
        {
            "comment": "This code defines two methods, `idenByData:` and `md5ByData:`, which respectively return an identifier based on the first dictionary in the given array and a MD5 hash of the provided data. The `idenByData:` method retrieves the last dictionary from the array and returns its timestamp as a string. The `md5ByData:` method initializes an MD5 context, updates it with the input data, finalizes the digest, and converts it to a hexadecimal string.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGLog/HeLogUtil.m\":75-104",
            "content": " *      xxxx.xx.xx: \u521d\u7248: \u4f7f\u7528md5=> STRTOOK([HeLogUtil md5ByData:OBJ2DATA(datas)]);\n *      2022.06.05: v2\u4f7f\u7528\u672b\u4f4d\u65f6\u95f4\u6233;\n *  @result notnull;\n */\n+(NSString*) idenByData:(NSMutableArray*)datas{\n    NSDictionary *lastDic = DICTOOK(ARR_INDEX_REVERSE(datas, 0));\n    long long lastTime = [NUMTOOK([lastDic objectForKey:kTime]) longLongValue];\n    return STRFORMAT(@\"%lld\",lastTime);\n}\n+(NSString *)md5ByData:(NSData*)data{\n    //1: \u521b\u5efa\u4e00\u4e2aMD5\u5bf9\u8c61\n    CC_MD5_CTX md5;\n    //2: \u521d\u59cb\u5316MD5\n    CC_MD5_Init(&md5);\n    //3: \u51c6\u5907MD5\u52a0\u5bc6\n    CC_MD5_Update(&md5, data.bytes, (CC_LONG)data.length);\n    //4: \u51c6\u5907\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4, \u5b58\u50a8MD5\u52a0\u5bc6\u4e4b\u540e\u7684\u6570\u636e\n    unsigned char result[CC_MD5_DIGEST_LENGTH];\n    //5: \u7ed3\u675fMD5\u52a0\u5bc6\n    CC_MD5_Final(result, &md5);\n    NSMutableString *resultString = [NSMutableString string];\n    //6:\u4eceresult\u6570\u7ec4\u4e2d\u83b7\u53d6\u6700\u7ec8\u7ed3\u679c\n    for (int i = 0; i < CC_MD5_DIGEST_LENGTH; i++) {\n        [resultString appendFormat:@\"%02X\", result[i]];\n    }\n    return resultString;\n}\n@end"
        }
    ]
}