{
    "summary": "The `AIThinkingControl` class handles input data, processes AbsAlgNode, and manages energy levels for an entity with validation and control methods. It also includes clear and updateThinkMode for real-time system management.",
    "details": [
        {
            "comment": "This code is defining a class named `AIThinkingControl` that has properties like `demandManager`, `shortMatchManager`, `operCount`, `loopId`, `toLoopId`, and `energy`. The `energy` property represents the current energy level which can be activated by mv input, consumed during thinking loops, and ranges from 0 to 20.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/AIThinkingControl.m\":0-41",
            "content": "//\n//  AIThinkingControl.m\n//  SMG_NothingIsAll\n//\n//  Created by \u8d3e  on 2017/11/12.\n//  Copyright \u00a9 2017\u5e74 XiaoGang. All rights reserved.\n//\n#import \"AIThinkingControl.h\"\n#import \"NSObject+Extension.h\"\n/**\n *  MARK:--------------------\u601d\u7ef4\u63a7\u5236\u5668--------------------\n *\n *\n *  >> assExp\n *  1. \u5728\u8054\u60f3\u4e2d,\u9047\u5230\u7684\u6570\u636e,\u90fd\u5b58\u5230thinkFeedCache;\n *  2. \u5728\u8054\u60f3\u4e2d,\u9047\u5230\u7684mv,\u90fd\u53e0\u52a0\u5230\u5f53\u524ddemand\u4e0b;\n *\n */\n@interface AIThinkingControl()\n@property (strong, nonatomic) DemandManager *demandManager;         //OUT\u77ed\u65f6\u8bb0\u5fc6 (\u8f93\u51fa\u6570\u636e\u7ba1\u7406\u5668);\n@property (strong, nonatomic) ShortMatchManager *shortMatchManager; //IN\u77ed\u65f6\u8bb0\u5fc6 (\u8f93\u5165\u6570\u636e\u7ba1\u7406\u5668);\n@property (assign, nonatomic) long long operCount;                  //\u601d\u7ef4\u64cd\u4f5c\u8ba1\u6570;\n@property (assign, nonatomic) long long loopId;                     //\u601d\u7ef4\u5faa\u73afId;\n@property (assign, nonatomic) long long toLoopId;                   //TO\u5faa\u73afId;\n/**\n *  MARK:--------------------\u5f53\u524d\u80fd\u91cf\u503c--------------------\n *  1. \u6fc0\u6d3b: mv\u8f93\u5165\u65f6\u6fc0\u6d3b;\n *  2. \u6d88\u8017: \u601d\u7ef4\u7684\u5faa\u73af\u4e2d\u6d88\u8017;\n *      1. \u6784\u5efa\"\u6982\u5ff5\u8282\u70b9\"\u6d88\u80170.1;\n *      2. \u6784\u5efa\"\u65f6\u5e8f\u8282\u70b9\"\u6d88\u80171;\n *\n *  3. \u8303\u56f4: 0-20;\n */\n@property (assign, nonatomic) CGFloat energy;\n@end\n@implementation AIThinkingControl"
        },
        {
            "comment": "This code initializes the AIThinkingControl class, creating and returning a shared instance, initializing data by creating dispatch queues for handling tasks in parallel, managing demands and short matches, registering events, and initializing display.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/AIThinkingControl.m\":43-75",
            "content": "static AIThinkingControl *_instance;\n+(AIThinkingControl*) shareInstance{\n    if (_instance == nil) {\n        _instance = [[AIThinkingControl alloc] init];\n    }\n    return _instance;\n}\n-(id) init{\n    self = [super init];\n    if (self) {\n        [self initData];\n        [self initDisplay];\n    }\n    return self;\n}\n/**\n *  MARK:--------------------initData--------------------\n *  @version\n *      2023.07.19: tc\u7ebf\u7a0b\u7531\u4e32\u884c\u6539\u4e3a\u5e76\u884c,\u56e0\u4e3a\u865a\u62df\u4e16\u754c\u8f93\u5165\u4fe1\u53f7\u662f\u968f\u65f6\u7684,\u4e0d\u5e94\u8be5\u6392\u961f (\u5982\u679cTC\u5728\u5fd9,\u5927\u53ef\u5728\u601d\u7ef4\u4e2d\u56e0\u4e3a\u4f18\u5148\u7ea7\u4e0d\u591f\u800c\u4e2d\u65ad,\u4f46\u786e\u4e0d\u8be5\u6392\u961f) (\u53c2\u800330083-todo4);\n */\n-(void) initData{\n    self.tiQueue = dispatch_queue_create([tiQueueLab UTF8String], DISPATCH_QUEUE_SERIAL);\n    self.toQueue = dispatch_queue_create([toQueueLab UTF8String], DISPATCH_QUEUE_SERIAL);\n    self.demandManager = [[DemandManager alloc] init];\n    self.shortMatchManager = [[ShortMatchManager alloc] init];\n    [theRT regist:kClearTCSEL target:self selector:@selector(clear)];\n    [theRT regist:kThinkModeSEL target:self selector:@selector(updateThinkMode:)];\n    self.tcDebug = [[TCDebug alloc] init];\n}\n-(void) initDisplay {"
        },
        {
            "comment": "This code defines a method `commitInputAsync` that asynchronously commits input data to the model. It first creates a weak reference of the `algsModel` object and then dispatches an async task on the `tiQueue`. Inside this async task, the `commitInput` method is called, which checks if the thinking mode is plant mode (2) and returns early if it is. Next, it converts the `algsModel` to a dictionary `modelDic`, extracts the algorithm type, converts the model data to an array `algsArr`, checks if it's an imv by calling `dataIn_CheckMV`, and finally splits the flow based on whether it is an imv.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/AIThinkingControl.m\":76-108",
            "content": "    [self runToLoop];\n}\n//MARK:===============================================================\n//MARK:                     < \u8f93\u5165\u6d41\u7a0b >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u6570\u636e\u8f93\u5165--------------------\n *  \u8bf4\u660e: \u5355model (\u666e\u901a\u7b97\u6cd5\u6a21\u578b \u6216 imv\u6a21\u578b)\n *  @version\n *      2022.10.09: \u65b0\u8f93\u5165\u76f4\u63a5\u5b58\u786c\u76d8\u800c\u4e0d\u662fisMem\u5185\u5b58 (\u53c2\u800327124-todo6);\n */\n-(void) commitInputAsync:(NSObject*)algsModel {\n    __block NSObject *weakAlgsModel = algsModel;\n    dispatch_async(self.tiQueue, ^{//30083\u53bb\u5f02\u6b65\n        [self commitInput:weakAlgsModel];\n    });\n}\n-(void) commitInput:(NSObject*)algsModel{\n    //1. \u690d\u7269\u6a21\u5f0f\u963b\u65ad\u611f\u77e5;\n    if (self.thinkMode == 2) return;\n    //0. \u5c06algModel\u8f6c\u4e3amodelDic;\n    NSDictionary *modelDic = [NSObject getDic:algsModel containParent:true];\n    NSString *algsType = NSStringFromClass(algsModel.class);\n    //1. \u88c5\u7bb1(\u9664mv\u6709\u4e24\u4e2a\u5143\u7d20\u5916\u4e00\u822c\u4ec5\u6709\u4e00\u4e2a\u5143\u7d20)\n    NSArray *algsArr = [theNet algModelConvert2Pointers:modelDic algsType:algsType];\n    //2. \u68c0\u6d4bimv\n    BOOL findMV = [ThinkingUtils dataIn_CheckMV:algsArr];\n    //3. \u5206\u6d41_mv\u65f6"
        },
        {
            "comment": "This code checks if it is dealing with multi-view or regular algorithm models. If multi-view, it creates a conMv node and adds it to the temporary input. If not, it creates an abstract algorithm node and adds it to the recognition process. The input is then committed asynchronously.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/AIThinkingControl.m\":109-140",
            "content": "    if (findMV) {\n        //1. \u6253\u5305cmvNode;\n        AICMVNodeBase *mvNode = [theNet createConMv:algsArr];\n        //2. \u52a0\u5165\u77ac\u65f6\u8bb0\u5fc6 & \u751f\u6210\u65f6\u5e8f\u6307\u5411mv\u7b49;\n        [TCInput pInput:mvNode];\n    }else{\n        //1. \u6253\u5305\u6210algTypeNode;\n        AIAlgNodeBase *algNode = [theNet createAbsAlg_NoRepeat:algsArr conAlgs:nil isOut:false at:nil ds:nil type:ATDefault];\n        //2. \u52a0\u5165\u77ac\u65f6\u8bb0\u5fc6 & \u8bc6\u522b\u7b49;\n        [TCInput rInput:algNode except_ps:nil];\n    }\n}\n/**\n *  MARK:--------------------\u6570\u636e\u8f93\u5165--------------------\n *  @param dics : \u591amodel (models\u4ec5\u542b\u666e\u901a\u7b97\u6cd5model -> \u76ee\u524d\u6ca1\u6709imv\u548c\u666e\u901a\u4fe1\u606f\u63ba\u6742\u5728models\u4e2d\u7684\u60c5\u51b5;)\n *  \u6b65\u9aa4\u8bf4\u660e:\n *  1. \u5148\u6784\u5efa\u5177\u8c61parent\u8282\u70b9,\u518d\u6784\u5efa\u62bd\u8c61sub\u8282\u70b9;\n *  2. \u4ec5parent\u6dfb\u52a0\u5230\u77ac\u65f6\u8bb0\u5fc6;\n *  3. \u6bcf\u4e2asubAlg\u90fd\u8981\u5355\u72ec\u8fdb\u884c\u8bc6\u522b\u64cd\u4f5c;\n *\n *  @version\n *      2020.07.19: \u7a7a\u573a\u666f\u65f6,\u4e0d\u5c06\u7a7a\u573a\u666f\u6982\u5ff5\u52a0\u5230\u77ac\u65f6\u8bb0\u5fc6\u5e8f\u5217\u4e2d (\u56e0\u4e3a\u73b0\u5728\u7684\u5185\u7c7b\u6bd4HN\u5df2\u7ecf\u4e0d\u518d\u4f7f\u7528\u7a7a\u573a\u666f\u505a\u4efb\u4f55\u53c2\u8003,\u6240\u4ee5\u5176\u5b58\u5728\u65e0\u610f\u4e49,\u53cd\u800c\u4f1a\u5f71\u54cd\u5230\u65f6\u5e8f\u5168\u542b\u5224\u65ad,\u56e0\u4e3a\u8bb0\u5fc6\u65f6\u5e8f\u4e2d\u7684\u7a7a\u573a\u666f,\u5f80\u5f80\u65e0\u6cd5\u88ab\u65b0\u7684\u65f6\u5e8f\u5305\u542b);\n *      2022.10.09: \u65b0\u8f93\u5165\u76f4\u63a5\u5b58\u786c\u76d8\u800c\u4e0d\u662fisMem\u5185\u5b58 (\u53c2\u800327124-todo6);\n *      2023.02.01: \u4e0d\u53ef\u8bc6\u522b\u81ea\u8eab,\u56e0\u4e3a\u6b64\u5904\u81ea\u8eab\u51e0\u4e4e\u5168\u662f\u65b0\u6982\u5ff5,\u8bc6\u522b\u81ea\u8eab\u4f3c\u4e4e\u76ee\u524d\u6ca1\u5565\u7528 (\u53c2\u800328041-BUG1-\u601d\u8def1-\u4fee\u590d);\n *\n *  TODOWAIT:\n *  1. \u9ed8\u8ba4\u4e3a\u6309\u8fb9\u7f18(ios\u7684view\u5c42\u7ea7)\u5206\u7ec4,\u968f\u540e\u53ef\u6269\u5c55\u6982\u5ff5\u5185\u7c7b\u6bd4,\u6309\u522b\u7684\u7ef4\u5ea6\u5206\u7ec4; \u53c2\u8003: n16p7\n */\n-(void) commitInputWithModelsAsync:(NSArray*)dics algsType:(NSString*)algsType {"
        },
        {
            "comment": "The code is checking if the thinking mode is 2, then verifying the input data and collecting all the child concepts' values. It creates a parent algorithm node using the collected values and adds it to the short-term memory.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/AIThinkingControl.m\":141-165",
            "content": "    __block NSArray *weakDics = dics;\n    __block NSString *weakAT = algsType;\n    dispatch_async(self.tiQueue, ^{//30083\u53bb\u5f02\u6b65\n        [self commitInputWithModels:weakDics algsType:weakAT];\n    });\n}\n-(void) commitInputWithModels:(NSArray*)dics algsType:(NSString*)algsType{\n    //1. \u690d\u7269\u6a21\u5f0f\u963b\u65ad\u611f\u77e5;\n    if (self.thinkMode == 2) return;\n    //1. \u6570\u636e\u68c0\u67e5 (\u5c0f\u9e1f\u4e0d\u80fd\u4ec5\u4f20\u5165foodView,\u800c\u8981\u4f20\u5165\u6574\u4e2a\u89c6\u89d2\u573a\u666f)\n    dics = ARRTOOK(dics);\n    ISTitleLog(@\"\u76ae\u5c42\u8f93\u5165\");\n    //2. \u6536\u96c6\u6240\u6709\u5177\u8c61\u7236\u6982\u5ff5\u7684value_ps\n    NSMutableArray *parentValue_ps = [[NSMutableArray alloc] init];\n    NSMutableArray *subValuePsArr = [[NSMutableArray alloc] init];//2\u7ef4\u6570\u7ec4\n    for (NSDictionary *item in dics) {\n        NSArray *item_ps = [theNet algModelConvert2Pointers:item algsType:algsType];\n        [parentValue_ps addObjectsFromArray:item_ps];\n        [subValuePsArr addObject:item_ps];\n    }\n    //3. \u6784\u5efa\u7236\u6982\u5ff5 & \u5c06\u7a7a\u573a\u666f\u52a0\u5165\u77ac\u65f6\u8bb0\u5fc6;\n    AIAbsAlgNode *parentAlgNode = [theNet createAbsAlg_NoRepeat:parentValue_ps conAlgs:nil isOut:false at:nil ds:nil type:ATDefault];\n    //if (parentValue_ps.count == 0) [self.delegate aiThinkIn_AddToShortMemory:parentAlgNode.pointer isMatch:false];"
        },
        {
            "comment": "This code is processing a group of input values by building input parent nodes and nested child concepts. It then collects all concept nodes within the group, creates abstract child concepts, and adds them to short-term memory. Finally, it performs some \"NoMv\" processing and converts behavior output into input for further recognition processes. The code is executed asynchronously in a separate queue.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/AIThinkingControl.m\":166-194",
            "content": "    if (Log4TCInput) NSLog(@\"---> \u6784\u5efaInputParent\u8282\u70b9:%@\",Alg2FStr(parentAlgNode));\n    //4. \u6536\u96c6\u672c\u7ec4\u4e2d,\u6240\u6709\u6982\u5ff5\u8282\u70b9;\n    NSMutableArray *fromGroup_ps = [[NSMutableArray alloc] init];\n    //5. \u6784\u5efa\u5b50\u6982\u5ff5 (\u62bd\u8c61\u6982\u5ff5,\u5e76\u5d4c\u5957);\n    for (NSArray *subValue_ps in subValuePsArr) {\n        AIAbsAlgNode *subAlgNode = [theNet createAbsAlg_NoRepeat:subValue_ps conAlgs:@[parentAlgNode] at:nil ds:nil type:ATDefault];\n        [fromGroup_ps addObject:subAlgNode.pointer];\n        //6. \u5c06\u6240\u6709\u5b50\u6982\u5ff5\u6dfb\u52a0\u5230\u77ac\u65f6\u8bb0\u5fc6 (2020.08.17: \u7531\u77ed\u65f6\u8bb0\u5fc6\u66ff\u4ee3);\n        NSLog(@\"InputSub:%@\",Alg2FStr(subAlgNode));\n    }\n    //6. NoMv\u5904\u7406;\n    for (AIKVPointer *alg_p in fromGroup_ps) {\n        [TCInput rInput:[SMGUtils searchNode:alg_p] except_ps:fromGroup_ps];\n    }\n}\n/**\n *  MARK:--------------------\u884c\u4e3a\u8f93\u51fa\u8f6c\u8f93\u5165--------------------\n *  @desc \u76ee\u524d\u884c\u4e3a\u8fdb\u884c\u65f6\u5e8f\u8bc6\u522b,\u4e5f\u8fdb\u884c\u6982\u5ff5\u8bc6\u522b;\n *  @version\n *      20200414 - \u5c06\u8f93\u51fa\u53c2\u6570\u96c6value_ps\u8f6c\u5230ThinkIn,\u53bb\u8fdb\u884c\u8bc6\u522b,\u4fdd\u7559ShortMatchModel,\u5185\u7c7b\u6bd4\u7b49\u6d41\u7a0b;\n */\n-(void) commitOutputLogAsync:(NSArray*)outputModels {\n    __block NSArray *weakOutputModels = outputModels;\n    dispatch_async(self.tiQueue, ^{//30083\u53bb\u5f02\u6b65"
        },
        {
            "comment": "This code snippet is responsible for committing the output log and involves the following steps:\n1. Stops plant mode if active.\n2. Gathers data from outputModels into a mutable array, value_ps.\n3. Boxes each model's output data using getOutputIndex method from theNet object and adds it to value_ps if not null.\n4. Records the canOutput for each identified item in outputModels.\n5. Submits the collected data (value_ps) to ThinkIn for recognition, building concepts with AbsAlgNode, and excludes except_ps.\n6. Inputs the recognized AbsAlgNode into TCInput for further processing.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/AIThinkingControl.m\":195-226",
            "content": "        [self commitOutputLog:weakOutputModels];\n    });\n}\n-(void) commitOutputLog:(NSArray*)outputModels{\n    //1. \u690d\u7269\u6a21\u5f0f\u963b\u65ad\u611f\u77e5;\n    if (self.thinkMode == 2) return;\n    //1. \u6570\u636e\n    NSMutableArray *value_ps = [[NSMutableArray alloc] init];\n    for (OutputModel *model in ARRTOOK(outputModels)) {\n        //2. \u88c5\u7bb1\n        AIKVPointer *output_p = [theNet getOutputIndex:model.identify outputObj:model.data];\n        if (output_p) {\n            [value_ps addObject:output_p];\n        }\n        //4. \u8bb0\u5f55\u53ef\u8f93\u51facanout (\u5f53\u524d\u5584\u672a\u5f62\u6210node,\u6240\u4ee5\u65e0\u6cd5\u5efa\u8bae\u7d22\u5f15;(\u68c0\u67e5\u4e00\u4e0b,\u5f53outLog\u5f62\u6210node\u540e,\u7d22\u5f15\u7684\u5efa\u7acb))\n        [AINetUtils setCanOutput:model.identify];\n    }\n    //2. \u63d0\u4ea4\u5230ThinkIn\u8fdb\u884c\u8bc6\u522b_\u6784\u5efa\u6982\u5ff5\n    AIAbsAlgNode *outAlg = [theNet createAbsAlg_NoRepeat:value_ps conAlgs:nil isOut:true at:nil type:ATDefault];\n    //3. \u63d0\u4ea4\u5230ThinkIn\u8fdb\u884c\u8bc6\u522b_\u52a0\u77ac\u65f6\u8bb0\u5fc6 & \u8fdb\u884c\u8bc6\u522b\n    [TCInput rInput:outAlg except_ps:nil];\n}\n//MARK:===============================================================\n//MARK:                     < \u8f93\u51fa\u6d41\u7a0b >\n//MARK:===============================================================\n/**\n *  MARK:--------------------TO\u5faa\u73af--------------------"
        },
        {
            "comment": "This code defines a method, runToLoop, that starts a TO thread and continuously loops through it. If the thinkMode is 1 or 2, it sleeps for 1 second; otherwise, it retrieves a result from the TO queue, logs it if the step is greater than 21, and sleeps for 1 second plus the delay time. The code also provides short model manager methods inModelManager and outModelManager.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/AIThinkingControl.m\":227-260",
            "content": " *  @desc \u65e0\u8bba\u5f53\u524d\u8f6e\u662f\u5426\u6210\u529f\u6267\u884c,\u90fd\u8c03\u7528\u4e0b\u8f6e\u5faa\u73af\u7ee7\u7eedTO\u7ebf\u7a0b;\n *  @version\n *      2023.07.22: \u521d\u7248 (\u53c2\u800330084-todo2);\n */\n-(void) runToLoop {\n    //1. \u542f\u52a8TO\u7ebf\u7a0b (\u53c2\u800330084-\u65b9\u6848);\n    dispatch_async(_toQueue, ^{\n        while (true) {\n            if (self.thinkMode == 1 || self.thinkMode == 2) {\n                [NSThread sleepForTimeInterval:1];\n            }else{\n                TCResult *result = [TCScore scoreFromTOQueue];\n                if (result.step > 21) {\n                    NSLog(@\"TO\u4e0a\u8f6e:%@ \u7b49\u5f85:%.1f \u4e0b\u8f6e:%lld \u6d88\u606f:%@\",result.success?@\"\u6210\u529f\":@\"\u5931\u8d25\",result.delay,++self.toLoopId,result.msg);\n                }\n                [NSThread sleepForTimeInterval:1 + result.delay];\n            }\n        }\n    });\n}\n//MARK:===============================================================\n//MARK:                     < \u77ed\u65f6\u8bb0\u5fc6 >\n//MARK:===============================================================\n-(ShortMatchManager*) inModelManager{\n    return self.shortMatchManager;\n}\n-(DemandManager*) outModelManager{\n    return self.demandManager;\n}\n//MARK:==============================================================="
        },
        {
            "comment": "This code segment deals with the management of an entity's \"energy\" level. It provides functions to consume, set new and judge the validity of the energy value. Consuming or setting a new energy value is only effective if it's greater than the current energy. The energy must be greater than 0 to be considered valid, otherwise, the value returned by this function will always be true.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/AIThinkingControl.m\":261-296",
            "content": "//MARK:                     < \u6d3b\u8dc3\u5ea6 >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u6d88\u8017\u6d3b\u8dc3\u5ea6--------------------\n */\n-(void) updateEnergyDelta:(CGFloat)delta{\n    self.energy = MAX(cMinEnergy, MIN(cMaxEnergy, self.energy + delta));\n    NSLog(@\"energy > delta:%.2f = energy:%.2f\",delta,self.energy);\n}\n/**\n *  MARK:--------------------\u8bbe\u65b0\u6d3b\u8dc3\u5ea6--------------------\n *  @desc \u53ea\u6709\u5f53\u65b0\u7684\u66f4\u5927\u65f6,\u624d\u6709\u6548;\n */\n-(void) updateEnergyValue:(CGFloat)value{\n    if (value > self.energy) {\n        self.energy = MAX(cMinEnergy, MIN(cMaxEnergy, value));\n        NSLog(@\"energy > newValue:%.2f = energy:%.2f\",value,self.energy);\n    }\n}\n/**\n *  MARK:--------------------\u6d3b\u8dc3\u5ea6\u6709\u6548\u5224\u65ad--------------------\n *  @version\n *      2022.05.04: \u5de5\u4f5c\u8bb0\u5fc6\u6811\u5728\u9650\u5bbd\u57fa\u7840\u4e0a,\u53c8\u52a0\u4e0a\u9650\u6df1\u540e,\u6b64\u5904\u5f03\u7528,\u90fd\u8fd4\u56detrue (\u53c2\u80032523c-\u5206\u6790\u4ee3\u78012);\n *      2022.05.22: roots\u53c8\u6709\u5faa\u73af\u5361\u987f\u95ee\u9898,\u6b64\u5904\u52a0\u4e0a\u5f3a\u884c\u505c\u6b62\u601d\u8003\u7684\u529f\u80fd,\u4ee5\u65b9\u4fbf\u8c03\u8bd5);\n */\n-(BOOL) energyValid{\n    if (self.thinkMode == 1 || self.thinkMode == 2) {\n        return false;\n    }\n    return self.energy > 0;\n}\n//MARK:==============================================================="
        },
        {
            "comment": "This code manages operation count and loop ID. The updateOperCount method increments the operation count, while updateLoopId increments the loop ID. The getOperCount and getLoopId methods return the respective counts.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/AIThinkingControl.m\":297-332",
            "content": "//MARK:                     < \u64cd\u4f5c\u8ba1\u6570 >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u5bf9\u4efb\u4f55TC\u64cd\u4f5c\u7b97\u4e00\u6b21\u64cd\u4f5c\u8ba1\u6570--------------------\n *  @param operater : \u8c03\u7528\u8005\u540d\u79f0 (\u8c03\u7528\u8005\u65b9\u6cd5\u8fdb\u5165\u65f6,\u8c03\u7528\u6b64\u65b9\u6cd5);\n *  @version\n *      2022.08.08: \u5224\u65ad\u5361\u987f\u72b6\u6001\u65f6,\u8f6c\u5165\u690d\u7269\u6a21\u5f0f (\u53c2\u800327063);\n *      2022.08.08: \u53bb\u6389<200ms\u7684\u5feb\u901f\u6267\u884c\u5e26\u6765\u7684\u5f71\u54cd: \u4ec5>200ms\u65f6\u624d\u7edf\u8ba1;\n *      2022.08.17: \u8bb0\u5f55\u548c\u8c03\u8bd5\u5b9e\u9645last\u8c03\u7528\u8005\u7684\u6027\u80fd (\u53c2\u800327064-\u8ddf\u8fdb);\n */\n-(void) updateOperCount:(NSString*)operater{\n    [self updateOperCount:operater min:200];\n}\n-(void) updateOperCount:(NSString*)operater min:(NSInteger)min{\n    self.operCount++;\n    [self.tcDebug updateOperCount:operater min:min];\n}\n-(long long) getOperCount{\n    return _operCount;\n}\n//MARK:===============================================================\n//MARK:                     < \u5faa\u73afId >\n//MARK:===============================================================\n//\u5faa\u73afId (\u53c2\u800326183);\n-(void) updateLoopId{\n    self.loopId++;\n    [XGConfig.instance responseXGConfig2HE];\n    [self.tcDebug updateLoopId];\n}\n-(long long) getLoopId{\n    return _loopId;"
        },
        {
            "comment": "This code contains a clear method and an updateThinkMode method for the AIThinkingControl class. The clear method restarts the model managers, resets energy to 0, and sends a kClearTCSEL signal to the real-time system. The updateThinkMode method updates the think mode based on the provided value and sends a kThinkModeSEL signal to the real-time system.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/AIThinkingControl.m\":333-357",
            "content": "}\n//MARK:===============================================================\n//MARK:                     < \u6e05\u601d\u7ef4 >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u6e05\u601d\u7ef4--------------------\n *  @desc \u6a21\u62df\u91cd\u542f (\u53c2\u800326014-4);\n */\n-(void) clear{\n    [self.inModelManager clear];\n    [self.outModelManager clear];\n    self.energy = 0;\n    [theRT invoked:kClearTCSEL];\n}\n-(void) updateThinkMode:(NSNumber*)value {\n    if (NUMISOK(value)) {\n        self.thinkMode = value.intValue;\n    }\n    [theRT invoked:kThinkModeSEL];\n}\n@end"
        }
    ]
}