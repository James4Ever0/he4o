{
    "summary": "The DemandManager class manages demand, task generation, and updates based on algorithm type, urgency, and delta values. It handles CMV cache sorting and RMV task manager updates, calculates scores for demands, sorts them by initTime, selects optimal items, removes demands from loop cache, and logs removed R tasks' types while clearing the cache completely.",
    "details": [
        {
            "comment": "This code is from the DemandManager class in the SMG_NothingIsAll project. It initializes a loopCache mutable array and provides methods for generating P tasks. The P task generation involves adding new cmv to cache, removing weaker same-direction mvs, and modifying demand status when inputMv occurs.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCDemand/Model/DemandManager.m\":0-46",
            "content": "//\n//  DemandManager.m\n//  SMG_NothingIsAll\n//\n//  Created by iMac on 2018/8/4.\n//  Copyright \u00a9 2018\u5e74 XiaoGang. All rights reserved.\n//\n#import \"DemandManager.h\"\n@interface DemandManager()\n/**\n *  MARK:--------------------\u5b9e\u65f6\u5e8f\u5217--------------------\n *  \u5143\u7d20 : <DemandModel.class>\n *  \u601d\u7ef4\u56e0\u5b50_\u5f53\u524dcmv\u5e8f\u5217(\u6ce8:\u6240\u6709cmv\u53ea\u4e0ecacheImv\u4e2d\u4f5c\u5339\u914d)(\u6b63\u5e8f,order\u8d8a\u5927,\u6392\u8d8a\u524d)\n */\n@property (strong,nonatomic) AsyncMutableArray *loopCache;\n@end\n@implementation DemandManager\n-(id) init{\n    self = [super init];\n    if (self) {\n        [self initData];\n    }\n    return self;\n}\n-(void) initData{\n    self.loopCache = [[AsyncMutableArray alloc] init];\n}\n//MARK:===============================================================\n//MARK:                     < method >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u751f\u6210P\u4efb\u52a1--------------------\n *  1. \u6dfb\u52a0\u65b0\u7684cmv\u5230cache,\u5e76\u4e14\u81ea\u52a8\u64a4\u6d88\u6389\u76f8\u5bf9\u8f83\u5f31\u7684\u540c\u7c7b\u540c\u5411mv;\n *  2. \u5728assData\u7b49(\u5185\u5fc3\u6d3b\u52a8,\u4e0d\u62b5\u6d88cmvCache\u4e2d\u65e7\u4efb\u52a1)\n *  3. \u5728dataIn\u65f6,\u62b5\u6d88\u65e7\u4efb\u52a1,\u5e76\u751f\u6210\u65b0\u4efb\u52a1;\n *  @version\n *      2020.08.24: \u5728inputMv\u65f6,\u5f53\u524ddemand\u8fdb\u884c\u62b5\u6d88\u65f6,\u5176\u72b6\u6001\u8bbe\u7f6e\u4e3aFinish;\n *      2021.09.04: \u5f53R\u4efb\u52a1\u7684 (R\u90e8\u5206\u53d1\u751f\u5b8c\u6bd5 & P\u90e8\u5206\u4e5f\u53d1\u751f\u5b8c\u6bd5 & R\u4efb\u52a1\u53c8\u6ca1\u5728ActYes/OutBack\u72b6\u6001),\u5219\u9500\u6bc1\u8fd9\u4e00\u4efb\u52a1 (\u53c2\u800323224-\u65b9\u6848-\u4ee3\u78012);"
        },
        {
            "comment": "This code appears to be part of a demand manager class, handling the updating of cache for P mode. It checks if there are any updates needed based on algorithm type, urgency, and delta values. If there is no update, it returns immediately. The code also includes comments about phasing out P mode and PDemand functionality, indicating potential future changes to this part of the codebase.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCDemand/Model/DemandManager.m\":47-70",
            "content": " *      2022.05.18: \u5e9f\u5f03\u62b5\u6d88\u529f\u80fd (\u53cd\u9988\u529f\u80fd\u65e9\u5df2\u7531TCFeedback\u6765\u505a,\u4e0d\u9700\u8981\u8fd9\u91cc\u5f04);\n *      2022.09.20: \u52a0PDemand\u5f00\u5173\u529f\u80fd,\u5148\u7ee7\u7eed\u5f00\u7740,\u5176\u5b9e\u73b0\u5728P\u4efb\u52a1\u5df2\u7ecf\u4e0d\u600e\u4e48\u7528\u4e86,\u9010\u6b65\u5173\u6389;\n *  @todo\n *      2022.xx.xx: \u5e9f\u5f03P\u6a21\u5f0f (\u53c2\u8003xx);\n */\n-(void) updateCMVCache_PMV:(NSString*)algsType urgentTo:(NSInteger)urgentTo delta:(NSInteger)delta{\n    //1. \u6570\u636e\u68c0\u67e5\n    if (delta == 0 || !Switch4PDemand) {\n        return;\n    }\n    //2. \u53bb\u91cd_\u540c\u5411\u64a4\u5f31,\u53cd\u5411\u62b5\u6d88;\n    BOOL canNeed = true;\n    NSInteger limit = self.loopCache.count;\n    for (NSInteger i = 0; i < limit; i++) {\n        DemandModel *checkItem = [self.loopCache objectAtIndex:i];\n        if ([STRTOOK(algsType) isEqualToString:checkItem.algsType]) {\n            if (ISOK(checkItem, PerceptDemandModel.class)) {\n                if ((delta > 0 == checkItem.delta > 0)) {\n                    //1) \u540c\u5411\u8f83\u5f31\u7684\u64a4\u6d88\n                    if (labs(urgentTo) > labs(checkItem.urgentTo)) {\n                        [self.loopCache removeObjectAtIndex:i];\n                        NSLog(@\"demandManager >> PMV\u79fb\u9664P\u4efb\u52a1: \u540c\u5411\u8f83\u5f31\u64a4\u6d88 %@,%ld\",checkItem.algsType,(long)checkItem.delta);\n                        limit--;"
        },
        {
            "comment": "This code handles demand management in a task loop. It checks the current demand and adjusts based on direction, removes conflicting demands, adds new demands if possible, and updates energy delta for urgent tasks.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCDemand/Model/DemandManager.m\":71-99",
            "content": "                        i--;\n                    }else{\n                        canNeed = false;\n                    }\n                }else{\n                    //2) \u53cd\u5411\u62b5\u6d88\n                    [self.loopCache removeObjectAtIndex:i];\n                    checkItem.status = TOModelStatus_Finish;\n                    NSLog(@\"demandManager >> PMV\u79fb\u9664P\u4efb\u52a1: \u53cd\u5411\u62b5\u6d88 %@,%ld\",checkItem.algsType,(long)checkItem.delta);\n                    limit--;\n                    i--;\n                }\n            }\n        }\n    }\n    //3. \u6709\u9700\u6c42\u65f6\u4e14\u53ef\u52a0\u5165\u65f6_\u52a0\u5165\u65b0\u7684\n    //TODO:>>>>\u5224\u65ad\u9700\u6c42;(\u5982\u997f,\u4e3b\u52a8\u53d6\u5f53\u524d\u72b6\u6001,\u662f\u5426\u997f)\n    MVDirection direction = [ThinkingUtils getDemandDirection:algsType delta:delta];\n    if (canNeed && (direction != MVDirection_None)) {\n        PerceptDemandModel *newItem = [[PerceptDemandModel alloc] init];\n        newItem.algsType = algsType;\n        newItem.delta = delta;\n        newItem.urgentTo = urgentTo;\n        [self.loopCache addObject:newItem];\n        //2. \u65b0\u9700\u6c42\u65f6,\u52a0\u4e0a\u6d3b\u8dc3\u5ea6;\n        [theTC updateEnergyDelta:urgentTo];\n        NSLog(@\"demandManager-PMV >> \u65b0\u9700\u6c42 %lu\",(unsigned long)self.loopCache.count);"
        },
        {
            "comment": "This code segment is related to generating R tasks for the Rational Minded Vision (RMV) input update task manager in a specific context. It includes various updates, enhancements, and bug fixes made over time, such as preventing conflicts between R and P demands, optimizing the order of matching forecasts, and updating energy levels even without new demands.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCDemand/Model/DemandManager.m\":100-120",
            "content": "    }\n}\n/**\n *  MARK:--------------------\u751f\u6210R\u4efb\u52a1--------------------\n *  @desc RMV\u8f93\u5165\u66f4\u65b0\u4efb\u52a1\u7ba1\u7406\u5668 (\u7406\u6027\u601d\u7ef4\u9884\u6d4bmv\u52a0\u5165)\n *  @todo\n *      2021.01.21: \u62b5\u9500: \u5f53\u6c7d\u8f66\u51b2\u8fc7\u6765,\u7a81\u7136\u53c8\u8f6c\u5411\u4e86,\u4efb\u52a1\u6d88\u9664 (\u7406\u6027\u62b5\u6d88 (\u4ec5\u80fd\u901a\u8fc7matchFo\u5df2\u53d1\u751f\u7684\u90e8\u5206\u8fdb\u884c\u6bd4\u5bf9)) (\u53c2\u800322074-BUG2) T;\n *      2021.01.21: \u62b5\u9500: \u5f53\u53e6\u4e00\u8f86\u66f4\u5927\u7684\u8f66\u53c8\u51b2\u8fc7\u6765,\u4e24\u6761matchFo\u90fd\u5bfc\u81f4\u75bc\u4e0d\u80fd\u62b5\u6d88 (\u7406\u6027\u62b5\u6d88\u4e0d\u4ee5mv.algsType\u4e3a\u51c6) (\u53c2\u800322074-BUG2) T;\n *      2021.01.21: \u62b5\u9500&\u589e\u5f3a: \u8fdb\u5ea6\u66f4\u65b0\u540e,\u6839\u636ematchFo\u8fdb\u884c\"\u7406\u6027\u62b5\u6d88\" \u6216\u8005 \"\u7406\u6027\u589e\u5f3a(\u8fdb\u5ea6\u66f4\u65b0)\" \u5224\u65ad (\u53c2\u800322074-BUG2) T;\n *  @version\n *      2021.01.25: RMV\u4ec5\u5bf9ReasonDemandModel\u8fdb\u884c\u62b5\u6d88\u9632\u91cd (\u5426\u5219\u4f1a\u5bfc\u81f4R-\u4e0eP-\u9700\u6c42\u51b2\u7a81);\n *      2021.01.27: RMV\u4ec5\u5bf9matchFoModel\u8fdb\u884c\u62b5\u6d88\u9632\u91cd (\u5426\u5219\u4f1a\u5bfc\u81f4inModel\u9884\u6d4b\u5904\u7406\u4e0d\u5145\u5206) (\u53c2\u800322074-BUG2);\n *      2021.02.05: \u65b0\u589e\u4efb\u52a1\u65f6,\u4ec5\u5c06\"\u4e0e\u65e7\u6709\u540c\u533a\u6700\u5927\u8feb\u5207\u5ea6\u7684\u5dee\u503c\"\u7d2f\u589e\u81f3\u6d3b\u8dc3\u5ea6 (\u53c2\u800322116);\n *      2021.03.01: \u4fee\u590dRMV\u4e00\u76f4\u5728\u884c\u4e3a\u8f93\u51fa\u548c\u88ab\u8bc6\u522b\u95f4\u91cd\u590d\u6b7b\u5faa\u73afBUG (\u53c2\u800322142);\n *      2021.03.28: \u6b64\u5904algsType\u7531urgentTo.at\u6539\u6210cmv.at,\u4ecemvNodeManager\u770b\u8fd9\u4fe9\u4e00\u81f4,\u5982\u679c\u51fa\u73b0bug\u518d\u8bf4;\n *      2021.07.14: \u5faa\u73afmatchPFos\u65f6,\u91c7\u7528\u53cd\u5e8f,\u56e0\u4e3a\u4f18\u5148\u7ea7\u548c\u4efb\u52a1\u6c60\u4f18\u5148\u7ea7\u4e0a\u5f04\u53cd\u4e86 (\u53c2\u800323172);\n *      2021.11.11: \u8fed\u4ee3RMV\u7684\u751f\u6210\u673a\u5236,\u6b64\u4ee3\u7801\u5176\u5b9e\u5565\u4e5f\u6ca1\u6539 (\u53c2\u800324107-1);\n *      2022.03.10: \u4e3a\u4f7f\u9e1f\u8eb2\u907f\u53ca\u65f6\u505c\u4e0b,\u5c06\u8feb\u5207\u5ea6\u518d\u6539\u56de\u53d7\u8bc4\u5206\u8feb\u5207\u5ea6\u7b49\u5f71\u54cd (\u53c2\u800325142-\u6539\u8fdb);\n *      2022.05.02: \u672a\u5f62\u6210\u65b0\u9700\u6c42\u65f6,\u4e5f\u66f4\u65b0energy (\u53c2\u80032523a-\u65b9\u68481);\n *      2022.05.18: \u591apFos\u5f62\u6210\u5355\u4e2a\u4efb\u52a1 (\u53c2\u800326042-TODO1);"
        },
        {
            "comment": "This code is updating the CMV cache for RMV in a demand manager. It checks input parameters, iterates through multiple time series recognitions, and evaluates scores to add new roots as needed.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCDemand/Model/DemandManager.m\":121-143",
            "content": " *      2022.05.18: \u5e9f\u5f03\u62b5\u6d88\u548c\u9632\u91cd\u529f\u80fd,\u73b0\u5728root\u5404\u81ea\u5de5\u4f5c,\u5171\u7528R\u548cP\u53cd\u9988\u5373\u53ef\u5404\u81ea\u5de5\u4f5c;\n *      2023.08.15: \u4f20\u5165protoFo,\u56e0\u4e3a\u5728pInput\u65f6\u548crInput\u65f6\u7684protoFo\u662f\u4e0d\u540c\u7684,\u8fd9\u4e2aprotoFo\u5230\u51b3\u7b56\u65f6\u8fd8\u8981\u7528 (\u53c2\u800330095\u4ee3\u7801\u6bb52);\n *      2023.12.20: \u5199\u540c\u8d28\u65b0\u65e7Root\u5408\u5e76 (\u53c2\u800331024);\n *  @result \u5c06\u65b0\u589e\u7684root\u4efb\u52a1\u6536\u96c6\u8fd4\u56de;\n */\n-(NSArray*) updateCMVCache_RMV:(AIShortMatchModel*)inModel protoFo:(AIFoNodeBase*)protoFo{\n    //1. \u6570\u636e\u68c0\u67e5;\n    NSMutableArray *newRootsResult = [[NSMutableArray alloc] init];\n    if (!inModel || !protoFo || !Switch4RS) return newRootsResult;\n    NSDictionary *fos4Demand = inModel.fos4Demand;\n    //2. \u591a\u65f6\u5e8f\u8bc6\u522b\u9884\u6d4b\u5206\u522b\u8fdb\u884c\u5904\u7406;\n    for (NSString *atKey in fos4Demand.allKeys) {\n        //3. \u6570\u636e\u51c6\u5907\n        NSMutableArray *pFosValue = [fos4Demand objectForKey:atKey];\n        CGFloat score = [AIScore score4PFos:pFosValue];\n        //5. \u53d6\u8feb\u5207\u5ea6\u8bc4\u5206: \u5224\u65admatchingFo.mv\u6709\u503c\u624d\u52a0\u5165demandManager,\u540c\u53f0\u7ade\u4e89,\u6267\u884c\u987a\u5e94mv;\n        if (score < 0) {\n            NSLog(@\"RMV\u65b0\u9700\u6c42: %@ (\u7b2c%ld\u6761 \u8bc4\u5206:%@)\",ClassName2Str(atKey),self.loopCache.count+1,Double2Str_NDZ(score));\n            for (AIMatchFoModel *pFo in pFosValue) {\n                AIFoNodeBase *matchFo = [SMGUtils searchNode:pFo.matchFo];"
        },
        {
            "comment": "This code is checking if two Roots have intersecting pFos (pattern-free occurrences). If they do, it merges the oldRoot's pFos into the newRoot. This helps in identifying similar Roots and avoiding redundancy in the loop cache.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCDemand/Model/DemandManager.m\":144-159",
            "content": "                NSLog(@\"\\t pFo:%@->{%.2f} SP:%@ indexDic:%@\",Pit2FStr(pFo.matchFo),[AIScore score4MV_v2FromCache:pFo],CLEANSTR(matchFo.spDic),CLEANSTR(pFo.indexDic2));\n            }\n            //6. \u5f53\u65b0\u65e7Root\u7684pFos\u6709\u4ea4\u96c6\u65f6,\u5373\u4e3a\u540c\u8d28ROOT: \u5c06oldRoot.pFos\u5408\u5e76\u5230newRoot\u4e2d (\u53c2\u800331024-todo1);\n            for (ReasonDemandModel *oldRRoot in self.loopCache.array) {\n                NSInteger oldIndex = [self.loopCache indexOfObject:oldRRoot];\n                //7. \u5224\u65ad\u65b0\u65e7Root\u6709\u4ea4\u96c6 (\u53c2\u800331024-todo1);\n                NSArray *newPMatchFos = [SMGUtils convertArr:pFosValue convertBlock:^id(AIMatchFoModel *obj) {\n                    return obj.matchFo;\n                }];\n                NSArray *oldPMatchFos = [SMGUtils convertArr:oldRRoot.pFos convertBlock:^id(AIMatchFoModel *obj) {\n                    return obj.matchFo;\n                }];\n                if (ARRISOK([SMGUtils filterArrA:newPMatchFos arrB:oldPMatchFos])) {\n                    NSLog(@\"\u53d1\u73b0\u540c\u8d28Root: \u65e7\u4f4d\u7f6e:%ld/%ld \u65e7\u679d\u53f6\u6570:%ld pFos\u6570:(\u65e7%ld + \u65b0%ld = %ld)\",oldIndex+1,self.loopCache.co"
        },
        {
            "comment": "This code snippet manages demand for a model. It checks if there is a demand, adds new items to the loop cache and results, updates the energy value based on score, and logs if no demand is formed.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCDemand/Model/DemandManager.m\":159-181",
            "content": "unt,[TOUtils getSubOutModels_AllDeep:oldRRoot validStatus:nil].count,oldRRoot.pFos.count,pFosValue.count,oldRRoot.pFos.count + pFosValue.count);\n                    //8. \u65b0\u65e7pFos\u5168\u4fdd\u7559 (\u53c2\u800331024-todo1);\n                    [pFosValue addObjectsFromArray:oldRRoot.pFos];\n                    //9. \u5220\u6389\u65e7\u7684root (\u53c2\u800331024-todo2);\n                    [self.loopCache removeObject:oldRRoot];\n                    break;\n                }\n            }\n            //7. \u6709\u9700\u6c42\u65f6,\u5219\u52a0\u5230\u9700\u6c42\u5e8f\u5217\u4e2d;\n            ReasonDemandModel *newItem = [ReasonDemandModel newWithAlgsType:atKey pFos:pFosValue shortModel:inModel baseFo:nil protoFo:protoFo];\n            [self.loopCache addObject:newItem];\n            [newRootsResult addObject:newItem];\n            //8. \u8bbe\u6d3b\u8dc3\u5ea6_\u5c06\u6700\u5927\u7684\u4efb\u52a1x2\u53d6\u8d1f\u503c,\u4e3a\u5f53\u524d\u6d3b\u8dc3\u5ea6 (\u53c2\u800325142-\u6539\u8fdb);;\n            //2021.05.27: \u4e3a\u65b9\u4fbf\u6d4b\u8bd5,\u6240\u6709imv\u90fd\u7ed920\u8feb\u5207\u5ea6 (\u56e0\u4e3a\u8feb\u5207\u5ea6\u592a\u4f4e\u8bdd,\u8fd8\u6ca1\u600e\u4e48\u601d\u8003\u5c31\u505c\u4e86);\n            //2022.03.10: \u4e3a\u4f7f\u9e1f\u8eb2\u907f\u53ca\u65f6\u505c\u4e0b,\u5c06\u8feb\u5207\u5ea6\u518d\u6539\u56de\u53d7\u8bc4\u5206\u8feb\u5207\u5ea6\u7b49\u5f71\u54cd;\n            [theTC updateEnergyValue:-score * 20];\n        }else{\n            [theTC updateEnergyValue:-score * 20];\n            NSLog(@\"\u5f53\u524d,\u9884\u6d4bmv\u672a\u5f62\u6210\u9700\u6c42:%@ \u8bc4\u5206:%f\",atKey,score);"
        },
        {
            "comment": "This code sorts the `loopCache` array based on the demand score and progress score. The demand score is calculated using the `AIScore` method, while the progress score is determined by dividing the current action index by the target number of actions. The sort is performed in descending order to prioritize higher-scoring demands.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCDemand/Model/DemandManager.m\":182-208",
            "content": "        }\n    }\n    NSLog(@\"\u751f\u6210NewRoot\u6570:%ld from:%@\",newRootsResult.count,Fo2FStr(protoFo));\n    return newRootsResult;\n}\n/**\n *  MARK:--------------------\u91cd\u6392\u5e8fcmvCache--------------------\n *  1. \u61d2\u6392\u5e8f,\u4ec0\u4e48\u65f6\u5019assLoop,\u4ec0\u4e48\u65f6\u5019\u6392\u5e8f;\n *  @version\n *      2021.01.02: loopCache\u6392\u5e8f\u540e\u672a\u88ab\u63a5\u6536,\u6240\u4ee5\u4e00\u76f4\u662f\u672a\u751f\u6548\u7684BUG;\n *      2021.01.27: \u652f\u6301\u7b2c\u4e8c\u7ea7\u6392\u5e8f:initTime (\u53c2\u800322074-BUG2);\n *      2021.11.13: R\u4efb\u52a1\u6392\u5e8f\u6839\u636e \"\u8feb\u5207\u5ea6*\u5339\u914d\u5ea6\" \u5f97\u51fa (\u53c2\u800324107-2);\n *      2022.03.15: \u5c06\u6392\u5e8f\u65b9\u5f0f\u66f4\u65b0\u4e3a\u7528score4Demand (\u53c2\u800325142);\n *      2023.03.01: \u4fee\u590d\u6392\u5e8f\u53cd\u4e86\u7684BUG: \u8bc4\u5206\u8d8a\u4f4e\u8d8a\u5e94\u8be5\u4f18\u5148 (\u53c2\u800328136-\u4fee\u590d);\n *      2024.01.04: \u907f\u514d\u5f92\u52b3,\u5df2\u7ecf\u4ed8\u51fa\u52aa\u529b\u7684\u4ef7\u503c,\u8ba1\u4e3a\u8fdb\u5ea6\u5206 (\u53c2\u800331052);\n */\n-(void) refreshCmvCacheSort {\n    NSArray *sort = [SMGUtils sortBig2Small:self.loopCache.array compareBlock1:^double(ReasonDemandModel *obj) {\n        //1. \u8ba1\u7b97\u4efb\u52a1\u5206;\n        CGFloat demandScore = -[AIScore score4Demand:obj];\n        //2. \u8ba1\u7b97\u8fdb\u5ea6\u5206 (\u53c2\u800331052-todo1);\n        CGFloat maxProgressScore = 0;\n        for (TOFoModel *actionFo in obj.actionFoModels) {\n            if (actionFo.status != TOModelStatus_Runing && actionFo.status != TOModelStatus_ActYes) continue;\n            CGFloat progress = (float)actionFo.actionIndex / actionFo.targetSPIndex;//\u53c2\u800331052-\u516c\u5f0f1"
        },
        {
            "comment": "This code calculates a score for each demand based on its progress and a maximum progress score, then calculates the total score by adding the maximum progress score and the demand score. The demands are sorted by their initTime in ascending order. This is part of a decision-making process to get tasks.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCDemand/Model/DemandManager.m\":209-232",
            "content": "            CGFloat hot = 1 - [MathUtils getCooledValue_28:progress];//\u53c2\u800331052-\u516c\u5f0f2\n            CGFloat progressScore = demandScore * hot;//\u53c2\u800331052-\u516c\u5f0f3\n            //NSLog(@\"cansetFo: F%ld %@ (%ld/%ld)\",actionFo.content_p.pointerId,TOStatus2Str(actionFo.status),actionFo.actionIndex+1,actionFo.targetSPIndex);\n            //NSLog(@\"\u8fdb\u5ea6:%.2f \u70ed\u5ea6:%.2f \u8fdb\u5ea6\u5206:%.2f\",progress,hot,progressScore);\n            maxProgressScore = MAX(maxProgressScore, progressScore);\n        }\n        //3. \u6c42\u51fa\u603b\u5206,\u5e76\u7528\u4e8e\u6392\u5e8f (\u53c2\u800331052-todo2);\n        CGFloat totalScore = maxProgressScore + demandScore;\n        NSLog(@\"\u4efb\u52a1\u5206:%.2f + \u6700\u7ec8\u8fdb\u5ea6\u5206:%.2f = \u603b\u5206:%.2f\",demandScore,maxProgressScore,totalScore);\n        return totalScore;\n    } compareBlock2:^double(DemandModel *obj) {\n        return obj.initTime;\n    }];\n    [self.loopCache removeAllObjects];\n    [self.loopCache addObjectsFromArray:sort];\n}\n/**\n *  MARK:--------------------\u83b7\u53d6\u4efb\u52a1 (\u51b3\u7b56\u90e8\u5206: \u53ef\u7ee7\u7eed\u51b3\u7b56\u7684\u90e8\u5206)--------------------\n *  @version\n *      xxxx.xx.xx: (\u672a\u5b8c\u6210 & \u975e\u7b49\u5f85\u53cd\u9988ActYes);\n *      2021.12.23: root\u975eWithOut\u72b6\u6001\u7684 (\u53c2\u800324212-6);"
        },
        {
            "comment": "This code retrieves the most optimal demand from a list, ensuring that it is currently active and not expired. It checks the conditions for each item in the list and sorts them accordingly. The sorted items are then iterated to find the most optimal demand that can be acted upon.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCDemand/Model/DemandManager.m\":233-253",
            "content": " *      2021.12.23: \u6700\u4f18\u672b\u679d\u5904\u5728actYes\u72b6\u6001\u65f6,\u7ee7\u7eedsecondRoot (\u53c2\u800324212-7);\n *      2022.06.01: \u672b\u7aefactYes\u65f6,root\u4e0d\u5e94\u671f,\u56e0\u4e3aactYes\u662f\u5411\u4e0a\u4f20\u67d3\u4e0d\u5411\u4e0b (\u53c2\u800326185-TODO3);\n *      2022.09.24: \u5931\u6548\u5904\u7406: \u6839\u4efb\u52a1\u5931\u6548\u65f6,\u4e0d\u8fdb\u884c\u51b3\u7b56 (\u53c2\u800327123-\u95ee\u98982-todo2);\n */\n-(DemandModel*) getCanDecisionDemand{\n    //1. \u6570\u636e\u68c0\u67e5\n    DemandModel *result = nil;\n    if (!ARRISOK(self.loopCache.array)) return nil;\n    //2. \u91cd\u6392\u5e8f & \u53d6\u5f53\u524d\u5e8f\u5217\u6700\u524d;\n    [self refreshCmvCacheSort];\n    //3. \u9010\u4e2a\u5224\u65ad\u6761\u4ef6\n    for (NSInteger j = 0; j < self.loopCache.count; j++) {\n        ReasonDemandModel *item = ARR_INDEX(self.loopCache.array, j);\n        if (Log4CanDecisionDemand) NSLog(@\"root(%ld/%ld):%@ (%@) %@\",j,self.loopCache.count,Pit2FStr(item.protoFo),[SMGUtils date2Str:kHHmmss timeInterval:item.initTime],[TOModelVision cur2Sub:item]);\n    }\n    for (NSInteger i = 0; i < self.loopCache.count; i++) {\n        ReasonDemandModel *item = ARR_INDEX(self.loopCache.array, i);\n        NSArray *pFoTitles = [SMGUtils convertArr:item.pFos convertBlock:^id(AIMatchFoModel *obj) {\n            return STRFORMAT(@\"F%ld\",obj.matchFo.pointerId);"
        },
        {
            "comment": "This code snippet is part of a decision-making process in the DemandManager. It logs information about each demand item, including its type, score, and description. If the demand has already been found or if it's invalid for any reason (finished, no applicable algorithm, or expired), it continues to the next demand without returning a result.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCDemand/Model/DemandManager.m\":254-276",
            "content": "        }];\n        NSString *itemDesc = STRFORMAT(@\"proto:F%ld pFos:%@\",item.protoFo.pointerId,CLEANSTR(pFoTitles));\n        //3. \u5373\u4f7f\u5df2\u7ecf\u627e\u5230result,\u4e5f\u628a\u65e5\u5fd7\u6253\u5b8c,\u65b9\u4fbf\u8c03\u8bd5\u65e5\u5fd7\u4e2d\u67e5\u770bDemand\u7684\u5b8c\u6574\u7ade\u4e89\u60c5\u51b5;\n        if (result) {\n            if (Log4CanDecisionDemand) NSLog(@\"\\t\u7b2c%ld\u6761 %@ \u8bc4\u5206%.2f \\t\\t\\t{%@}\",i+1,ClassName2Str(item.algsType),[AIScore score4Demand:item],itemDesc);\n            continue;\n        }\n        //4. \u5df2\u5b8c\u6210\u65f6,\u4e0b\u4e00\u4e2a;\n        if (item.status == TOModelStatus_Finish) {\n            if (Log4CanDecisionDemand) NSLog(@\"\\t\u7b2c%ld\u6761 %@ \u8bc4\u5206%.2f \u56e0FINISH \u5931\u8d25 \\t{%@}\",i+1,ClassName2Str(item.algsType),[AIScore score4Demand:item],itemDesc);\n            continue;\n        }\n        //4. \u5df2\u65e0\u8ba1\u53ef\u65bd,\u4e0b\u4e00\u4e2a (TCPlan\u4f1a\u4f18\u5148\u4ece\u672b\u679d\u6267\u884c,\u6240\u4ee5\u5f53root\u5c31\u662f\u672b\u679d\u65f6,\u8bf4\u660e\u6574\u4e2a\u4e09\u6761\u5927\u6811\u5e72\u5168\u70c2\u900f\u6ca1\u7528\u4e86);\n        if (item.status == TOModelStatus_WithOut) {\n            if (Log4CanDecisionDemand) NSLog(@\"\\t\u7b2c%ld\u6761 %@ \u8bc4\u5206%.2f \u56e0WithOut \u5931\u8d25 \\t{%@}\",i+1,ClassName2Str(item.algsType),[AIScore score4Demand:item],itemDesc);\n            continue;\n        }\n        //4. \u5f53\u4efb\u52a1\u5931\u6548\u65f6,\u4e0d\u8fd4\u56de;\n        if (ISOK(item, ReasonDemandModel.class) && ((ReasonDemandModel*)item).isExpired) {"
        },
        {
            "comment": "The code is a part of the DemandManager class. It handles decision-making for demands and includes a loop to evaluate each demand. If a demand fails, it logs the failure reason and continues to the next demand. If a demand is successful, it records it as the result. The code also provides methods to get all demands in descending order and remove a specific demand.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCDemand/Model/DemandManager.m\":277-306",
            "content": "            if (Log4CanDecisionDemand) NSLog(@\"\\t\u7b2c%ld\u6761 %@ \u8bc4\u5206%.2f \u56e0isExpired \u5931\u8d25 \\t{%@}\",i+1,ClassName2Str(item.algsType),[AIScore score4Demand:item],itemDesc);\n            continue;\n        }\n        //5. \u6700\u672b\u679d\u5728actYes\u72b6\u6001\u65f6,\u4e0d\u5e94\u671f,\u7ee7\u7eedsecondRoot;\n        BOOL endHavActYes = [TOUtils endHavActYes:item];\n        if (endHavActYes){\n            if (Log4CanDecisionDemand) NSLog(@\"\\t\u7b2c%ld\u6761 %@ \u8bc4\u5206%.2f \u56e0endHavActYes \u5931\u8d25 \\t{%@}\",i+1,ClassName2Str(item.algsType),[AIScore score4Demand:item],itemDesc);\n            continue;\n        }\n        //6. \u6709\u6548,\u5219\u8bb0\u5f55;\n        NSLog(@\"\\t\u7b2c%ld\u6761 %@ \u8bc4\u5206%.2f \u6fc0\u6d3b\u6210\u529f \\t{%@}\",i+1,ClassName2Str(item.algsType),[AIScore score4Demand:item],itemDesc);\n        result = item;\n    }\n    NSLog(@\"Demand\u7ade\u4e89 <<<== %@ \u5171%ld\u6761\",result?@\"SUCCESS\":@\"FAILURE\",self.loopCache.count);\n    return result;\n}\n/**\n *  MARK:--------------------\u83b7\u53d6\u4efb\u52a1 (\u5168\u90e8\u8fd4\u56de: \u7528\u4e8e\u53cd\u9988\u548c\u53ef\u89c6\u5316\u7b49)--------------------\n *  @desc \u6392\u5e8f\u65b9\u5f0f: \u4ece\u5927\u5230\u5c0f;\n */\n-(NSArray*) getAllDemand{\n    [self refreshCmvCacheSort];\n    return self.loopCache.array;\n}\n/**\n *  MARK:--------------------\u79fb\u9664\u67d0\u4efb\u52a1--------------------"
        },
        {
            "comment": "This method removes a demand object from the loop cache and logs the removed R task's type. The clear method empties the loop cache completely.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/TCDemand/Model/DemandManager.m\":307-317",
            "content": " */\n-(void) removeDemand:(DemandModel*)demand{\n    if (ISOK(demand, ReasonDemandModel.class)) NSLog(@\"demandManager >> \u79fb\u9664R\u4efb\u52a1:%@\",((ReasonDemandModel*)demand).algsType);\n    if (demand) [self.loopCache removeObject:demand];\n}\n-(void) clear{\n    [self.loopCache removeAllObjects];\n}\n@end"
        }
    ]
}