{
    "summary": "This code sets up a customizable curve line using TVTimeLine class, with width and color adjustable. Updates line width based on scale value, triggers redraw with refreshDisplay method.",
    "details": [
        {
            "comment": "Code is importing TVTimeLine.h, defining MaxLineWidth and MinLineWidth constants, creating an interface for TVTimeLine class with a lineWidth property, implementing the drawRect method of TVTimeLine to prepare data, generate a UIBezierPath by iterating through bezierPoints array and setting the color to green.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Line/TVTimeLine.m\":0-42",
            "content": "//\n//  TVTimeLine.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2022/3/29.\n//  Copyright \u00a9 2022\u5e74 XiaoGang. All rights reserved.\n//\n#import \"TVTimeLine.h\"\n#define MaxLineWidth 2.0f\n#define MinLineWidth 0.2f\n@interface TVTimeLine ()\n@property (assign, nonatomic) CGFloat lineWidth;\n@end\n@implementation TVTimeLine\n- (void)drawRect:(CGRect)rect {\n    //1. \u6570\u636e\u51c6\u5907;\n    [super drawRect:rect];\n    self.bezierPoints = ARRTOOK(self.bezierPoints);\n    [UIColor.greenColor set];\n    //2. \u751f\u6210\u8d1d\u585e\u5c14\u66f2\u7ebf\n    UIBezierPath *path = [UIBezierPath bezierPath];\n    for (NSInteger i = 0; i < self.bezierPoints.count; i++) {\n        NSValue *item = self.bezierPoints[i];\n        CGPoint point = [item CGPointValue];\n        if (i == 0) {\n            [path moveToPoint:point];\n        }else{\n            //a. \u524d\u4e00\u70b9\n            CGPoint startPt = [[self.bezierPoints objectAtIndex: i-1] CGPointValue];\n            //b. \u63a7\u5236\u70b9\n            CGPoint cPt1, cPt2;\n            if(ABS(startPt.x - point.x) > ABS(startPt.y - point.y)) {\n                cPt1 = (CGPoint){(startPt.x + point.x)/2, startPt.y};"
        },
        {
            "comment": "This code sets up and draws a curve line based on the input points. The path's width, cap style, and join style are customizable. The `setData` method updates the line width based on a given scale value and `refreshDisplay` method triggers a redraw of the view.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Line/TVTimeLine.m\":43-70",
            "content": "                cPt2 = (CGPoint){cPt1.x, point.y};\n            } else {\n                cPt1 = (CGPoint){startPt.x, (startPt.y + point.y)/2};\n                cPt2 = (CGPoint){point.x, cPt1.y};\n            }\n            //3. \u6dfb\u52a0\u66f2\u7ebf\u70b9\n            [path addCurveToPoint:point controlPoint1:cPt1 controlPoint2:cPt2];\n        }\n    }\n    //3. \u7ed8\u5236\n    path.lineWidth = self.lineWidth > 0 ? self.lineWidth : MaxLineWidth;\n    path.lineCapStyle = kCGLineCapRound; //\u7ec8\u70b9\u5904\u7406\n    path.lineJoinStyle = kCGLineJoinBevel; //\u7ebf\u6761\u62d0\u89d2\n    [path stroke];\n}\n-(void)setData:(CGFloat)scale{\n    self.lineWidth = MAX(MinLineWidth, MIN(MaxLineWidth, 6.0f / scale));\n    [self refreshDisplay];\n}\n-(void) refreshDisplay{\n    [self setNeedsDisplay];\n}\n@end"
        }
    ]
}