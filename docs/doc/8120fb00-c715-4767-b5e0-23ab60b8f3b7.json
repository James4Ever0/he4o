{
    "summary": "The NVNodeView class in SMG_NothingIsAll codebase manages views, touch events, scrolling, and delegate protocol, implementing properties for initialization, constraints, and more. It also handles click functions, invoking delegates if necessary, and logs click data using TPLog.",
    "details": [
        {
            "comment": "This file, NVNodeView.m, is part of the SMG_NothingIsAll codebase and contains the implementation for NVNodeView class which has various properties such as containerView, contentView, customSubView, topBtn, bottomBtn, leftBtn, rightBtn, lightLab, titleLab, and touchMoveView. The class initializes its view and display in the init function.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVNodeView.m\":0-42",
            "content": "//\n//  NVNodeView.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2019/6/11.\n//  Copyright \u00a9 2019\u5e74 XiaoGang. All rights reserved.\n//\n#import \"NVNodeView.h\"\n#import \"MASConstraint.h\"\n#import \"View+MASAdditions.h\"\n#import \"BorderLabel.h\"\n#import \"NVConfig.h\"\n#import \"NVViewUtil.h\"\n@interface NVNodeView ()\n@property (strong,nonatomic) IBOutlet UIView *containerView;\n@property (weak, nonatomic) IBOutlet UIControl *contentView;\n@property (strong, nonatomic) UIView *customSubView;\n@property (strong, nonatomic) UIButton *topBtn;\n@property (strong, nonatomic) UIButton *bottomBtn;\n@property (strong, nonatomic) UIButton *leftBtn;\n@property (strong, nonatomic) UIButton *rightBtn;\n@property (weak, nonatomic) IBOutlet BorderLabel *lightLab;\n@property (weak, nonatomic) IBOutlet UILabel *titleLab;\n@property (strong, nonatomic) UIView *touchMoveView;\n@end\n@implementation NVNodeView\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initView];\n        [self initDisplay];\n    }\n    return self;\n}\n-(void) initView{\n    //self"
        },
        {
            "comment": "Sets background color to clear, sets frame size, loads nib and adds subview with constraints, sets content view layer properties, calculates button sizes and frames.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVNodeView.m\":43-67",
            "content": "    [self setBackgroundColor:[UIColor clearColor]];\n    [self setFrame:CGRectMake(0, 0, cNodeSize, cNodeSize)];\n    //containerView\n    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self.class) owner:self options:nil];\n    [self addSubview:self.containerView];\n    [self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.leading.mas_equalTo(self);\n        make.trailing.mas_equalTo(self);\n        make.top.mas_equalTo(self);\n        make.bottom.mas_equalTo(self);\n    }];\n    //contentView\n    [self.contentView.layer setMasksToBounds:true];\n    [self.contentView.layer setCornerRadius:cNodeSize * 0.5f];\n    [self.contentView.layer setBorderColor:UIColorWithRGBHex(0xAAAAAA).CGColor];\n    [self.contentView.layer setBorderWidth:1];\n    //edgeBtnSize\n    CGFloat btnW = cNodeSize * 0.6f;\n    CGFloat btnL = cNodeSize * 0.8f;\n    CGFloat btnMargin = (cNodeSize - btnL) * 0.5f;\n    CGRect leftF = CGRectMake(btnW * -0.5f, btnMargin, btnW, btnL);\n    CGRect rightF = CGRectMake(cNodeSize + btnW * -0.5f,btnMargin, btnW, btnL);"
        },
        {
            "comment": "Creates four button instances for left, top, right, and bottom edges with specific frame coordinates. Disables user interaction for light label and buttons if not running on a simulator.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVNodeView.m\":68-85",
            "content": "    CGRect topF = CGRectMake(btnMargin,btnW * -0.5f,btnL,btnW);\n    CGRect bottomF = CGRectMake(btnMargin,btnW * -0.5f + cNodeSize,btnL,btnW);\n    //createEdgeBtn\n    self.leftBtn = [self createEdgeBtn:leftF onClick:@selector(leftBtnOnClick:) longClick:@selector(btnLongClick:)];\n    self.rightBtn = [self createEdgeBtn:rightF onClick:@selector(rightBtnOnClick:) longClick:@selector(btnLongClick:)];\n    self.topBtn = [self createEdgeBtn:topF onClick:@selector(topBtnOnClick:) longClick:@selector(btnLongClick:)];\n    self.bottomBtn = [self createEdgeBtn:bottomF onClick:@selector(bottomBtnOnClick:) longClick:@selector(btnLongClick:)];\n    //ligthLab\n    [self.lightLab setUserInteractionEnabled:false];\n    self.lightLab.borderColor = [UIColor whiteColor];\n    self.lightLab.borderWidth = 3.0f / [UIScreen mainScreen].scale;\n    if (!isSimulator) {\n        [self.contentView setUserInteractionEnabled:false];\n        [self.leftBtn setUserInteractionEnabled:false];\n        [self.rightBtn setUserInteractionEnabled:false];"
        },
        {
            "comment": "This code sets user interaction enabled to false for top and bottom buttons, initializes a touchMoveView UIView with black background, round corners, and adds it as subview. It also includes methods for setting data and refreshing display. The setDataWithNodeData method updates the data and calls refreshDisplay method.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVNodeView.m\":86-120",
            "content": "        [self.topBtn setUserInteractionEnabled:false];\n        [self.bottomBtn setUserInteractionEnabled:false];\n    }\n    //touchMoveView\n    self.touchMoveView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 5, 5)];\n    [self.touchMoveView setBackgroundColor:UIColorWithRGBHex(0x000000)];\n    [self.touchMoveView.layer setMasksToBounds:true];\n    [self.touchMoveView.layer setCornerRadius:2.5f];\n    [self.containerView addSubview:self.touchMoveView];\n    [self.touchMoveView setHidden:true];\n}\n-(void) initDisplay{\n}\n//MARK:===============================================================\n//MARK:                     < method >\n//MARK:===============================================================\n-(void) setDataWithNodeData:(id)nodeData{\n    _data = nodeData;\n    [self refreshDisplay];\n}\n-(void) refreshDisplay{\n    //1. \u79fb\u9664\u65e7\u7684subView\n    if (self.customSubView) {\n        [self.customSubView removeFromSuperview];\n    }\n    //2. \u4f18\u5148\u53d6\u81ea\u5b9a\u4e49subView (\u9ed8\u8ba4\u65f6\u4e0d\u663e\u793a)\n    self.customSubView = [self nodeView_GetCustomSubView:self.data];\n    //4. \u663e\u793a"
        },
        {
            "comment": "The code checks if there is a custom subview, adds it to the container view, sends it to the back, and disables user interaction. It sets the content view background color based on node color, sets alpha based on delegate's nodeAlpha function, and changes the rightBtn's background color using delegate's nodeRightColor function. The code also provides functions for setting and getting light string value, as well as a function to set the title and show time.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVNodeView.m\":121-158",
            "content": "    if (self.customSubView) {\n        [self.containerView addSubview:self.customSubView];\n        [self.containerView sendSubviewToBack:self.customSubView];\n        [self.customSubView setUserInteractionEnabled:false];\n    }\n    //5. nodeColor\n    UIColor *nodeColor = [self nodeView_GetNodeColor:self.data];\n    if (nodeColor) {\n        [self.contentView setBackgroundColor:nodeColor];\n    }\n    //6. nodeAlpha\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nodeView_GetNodeAlpha:)]) {\n        CGFloat alpha = [self.delegate nodeView_GetNodeAlpha:self.data];\n        [self.contentView setAlpha:alpha];\n    }\n    //7. rightColor\n    UIColor *rightColor = [self.delegate nodeView_GetRightColor:self.data];\n    if (rightColor) {\n        [self.rightBtn setBackgroundColor:rightColor];\n    }\n}\n-(void) light:(NSString*)lightStr{\n    [self.lightLab setText:lightStr];\n}\n-(void) clearLight{\n    [self.lightLab setText:@\"\"];\n}\n-(NSString*) getLightStr{\n    return self.lightLab.text;\n}\n-(void) setTitle:(NSString*)titleStr showTime:(CGFloat)showTime {"
        },
        {
            "comment": "This code sets the title label text and implements a method for creating an edge button with a long press gesture recognizer. If the showTime is greater than 0, it schedules a task to clear the title label after the specified time interval on the main queue.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVNodeView.m\":159-178",
            "content": "    [self.titleLab setText:titleStr];\n    if (showTime > 0) {\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(showTime * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n            [self.titleLab setText:@\"\"];\n        });\n    }\n}\n//MARK:===============================================================\n//MARK:                     < privateMethod >\n//MARK:===============================================================\n-(UIButton*) createEdgeBtn:(CGRect)frame onClick:(SEL)onClick longClick:(SEL)longClick{\n    UIButton *btn = [[UIButton alloc] initWithFrame:frame];\n    [btn setBackgroundColor:[UIColor blackColor]];\n    [btn addTarget:self action:onClick forControlEvents:UIControlEventTouchUpInside];\n    UILongPressGestureRecognizer *longPress = [[UILongPressGestureRecognizer alloc] initWithTarget:self action:longClick];\n    longPress.minimumPressDuration = 0.8;\n    [btn addGestureRecognizer:longPress];\n    [self.contentView addSubview:btn];\n    [btn.layer setCornerRadius:MAX(frame.size.width,frame.size.height) * 0.5f];"
        },
        {
            "comment": "This code snippet contains several methods that handle button clicks and scroll view enable/disable settings. It sets the border width and color of a button, returns the modified button, and enables or disables UIScrollView objects within superviews. The onClick methods respond to different types of button clicks, calling corresponding nodeView methods and animationClick function.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVNodeView.m\":179-210",
            "content": "    [btn.layer setBorderWidth:1.0f / UIScreen.mainScreen.scale];\n    [btn.layer setBorderColor:[UIColor grayColor].CGColor];\n    return btn;\n}\n//\u7236\u7ea7scrollView\u6eda\u52a8\u5f00\u5173\n-(void) setSuperScrollEnable:(BOOL)enable{\n    NSArray *svs = ARRTOOK([self superViews_AllDeepWithClass:UIScrollView.class]);\n    for (UIScrollView *sv in svs) {\n        [sv setScrollEnabled:enable];\n    }\n}\n//MARK:===============================================================\n//MARK:                     < onClick >\n//MARK:===============================================================\n- (IBAction)contentViewOnClick:(UIControl *)sender {\n    [self nodeView_OnClick:self.data];\n    [self animationClick:sender];\n}\n- (void)topBtnOnClick:(UIControl*)sender {\n    [self nodeView_TopClick:self.data];\n    [self animationClick:sender];\n}\n- (void)bottomBtnOnClick:(UIControl*)sender {\n    [self nodeView_BottomClick:self.data];\n    [self animationClick:sender];\n}\n- (void)leftBtnOnClick:(UIControl*)sender {\n    [self nodeView_LeftClick:self.data];\n    [self animationClick:sender];"
        },
        {
            "comment": "This code handles button clicks and long presses in a view, preventing duplicate triggers, determining the direction of click, and triggering appropriate events or animations based on the delegate response.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVNodeView.m\":211-239",
            "content": "}\n- (void)rightBtnOnClick:(UIControl*)sender {\n    [self nodeView_RightClick:self.data];\n    [self animationClick:sender];\n}\n- (void)btnLongClick:(UILongPressGestureRecognizer*)sender{\n    //1. \u9632\u6b62\u91cd\u590d\u89e6\u53d1\n    if (sender.state != UIGestureRecognizerStateBegan) return;\n    //2. \u53d6\u65b9\u5411\n    DirectionType direction = DirectionType_Top;\n    if ([self.leftBtn isEqual:sender.view]) {\n        direction = DirectionType_Left;\n    }else if ([self.rightBtn isEqual:sender.view]) {\n        direction = DirectionType_Right;\n    }else if ([self.bottomBtn isEqual:sender.view]) {\n        direction = DirectionType_Bottom;\n    }\n    //3. \u89e6\u53d1\u4e8b\u4ef6\u56de\u8c03;\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nodeView_LongClick:direction:)]) {\n        [self.delegate nodeView_LongClick:self.data direction:direction];\n    }\n}\n//MARK:===============================================================\n//MARK:                     < animation >\n//MARK:===============================================================\n-(void) animationClick:(UIView*)view{"
        },
        {
            "comment": "Animates the view's layer transform with a scale effect, followed by returning it to its original transform upon completion. Disables super scrolling on touch began event and calculates the distance between the center and touch location points in touches moved event.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVNodeView.m\":240-266",
            "content": "    if (view) {\n        [UIView animateWithDuration:0.2f animations:^{\n            [view.layer setTransform:CATransform3DMakeScale(1.2f, 1.2f, 1.2f)];\n        }completion:^(BOOL finished) {\n            [UIView animateWithDuration:0.2f animations:^{\n                [view.layer setTransform:CATransform3DIdentity];\n            }];\n        }];\n    }\n}\n//MARK:===============================================================\n//MARK:                     < touchOverride >\n//MARK:===============================================================\n-(void) touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event{\n    [super touchesBegan:touches withEvent:event];\n    [self setSuperScrollEnable:false];\n}\n-(void) touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event{\n    //1. \u53d6touch\u5750\u6807\n    [super touchesMoved:touches withEvent:event];\n    CGPoint touchLocation = [[touches anyObject] locationInView:self];\n    //2. \u8ba1\u7b97\u8ddd\u79bb\u548c\u89d2\u5ea6\n    CGPoint center = CGPointMake(cNodeSize*0.5f, cNodeSize*0.5f);\n    CGFloat distance = [NVViewUtil distancePoint:center second:touchLocation];"
        },
        {
            "comment": "Code sets touchMoveView's center based on the angle between two points, showing it if not hidden and distance is within cNodeGesDistance.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVNodeView.m\":267-288",
            "content": "    CGFloat angle = [NVViewUtil angleZero2OnePoint:center second:touchLocation];\n    //3. \u8bbe\u7f6etouchMoveView\u7684\u663e\u793a\n    [self.touchMoveView setHidden:distance < cNodeGesDistance];\n    if (angle > 0.125f && angle < 0.375f) {\n        [self.touchMoveView setCenter:CGPointMake(center.x + 0, center.y + -cNodeGesDistance)];//\u4e0a\n    }else if (angle > 0.375f && angle < 0.625f) {\n        [self.touchMoveView setCenter:CGPointMake(center.x + cNodeGesDistance, center.y + 0)];//\u53f3\n    }else if (angle > 0.625f && angle < 0.875f) {\n        [self.touchMoveView setCenter:CGPointMake(center.x + 0, center.y + cNodeGesDistance)];//\u4e0b\n    }else {\n        [self.touchMoveView setCenter:CGPointMake(center.x + -cNodeGesDistance, center.y + 0)];//\u5de6\n    }\n}\n-(void) touchesEnded:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event{\n    //1. \u53d6touch\u5750\u6807\n    [super touchesEnded:touches withEvent:event];\n    CGPoint touchLocation = [[touches anyObject] locationInView:self];\n    //2. \u8ba1\u7b97\u8ddd\u79bb\u548c\u89d2\u5ea6\n    CGPoint center = CGPointMake(cNodeSize*0.5f, cNodeSize*0.5f);"
        },
        {
            "comment": "The code handles touch events in a view and performs different actions based on the distance and angle of the touch. If the distance is greater than a certain threshold, it determines the angle to call specific click functions (top, right, bottom, left). If the distance is less than half the node size, it calls an onClick function. Finally, it enables super scroll and hides the touchMoveView.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVNodeView.m\":289-316",
            "content": "    CGFloat distance = [NVViewUtil distancePoint:center second:touchLocation];\n    CGFloat angle = [NVViewUtil angleZero2OnePoint:center second:touchLocation];\n    //3. \u8fbe\u5230\u8ddd\u79bb\u65f6,\u8fb9\u89d2\u70b9\u51fb\u4e8b\u4ef6\n    if (distance > cNodeGesDistance) {\n        if (angle > 0.125f && angle < 0.375f) {\n            [self nodeView_TopClick:self.data];//\u4e0a\n        }else if (angle > 0.375f && angle < 0.625f) {\n            [self nodeView_RightClick:self.data];//\u53f3\n        }else if (angle > 0.625f && angle < 0.875f) {\n            [self nodeView_BottomClick:self.data];//\u4e0b\n        }else {\n            [self nodeView_LeftClick:self.data];//\u5de6\n        }\n    }else if(distance < cNodeSize * 0.5f){\n        //4. \u5728\u8282\u70b9\u5185\u65f6,\u8282\u70b9\u70b9\u51fb\u4e8b\u4ef6;\n        [self nodeView_OnClick:self.data];\n    }\n    //5. \u6062\u590ddisplay\n    [self setSuperScrollEnable:true];\n    [self.touchMoveView setHidden:true];\n}\n-(void) touchesCancelled:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event{\n    [super touchesCancelled:touches withEvent:event];\n    [self setSuperScrollEnable:true];\n    [self.touchMoveView setHidden:true];"
        },
        {
            "comment": "This code defines methods for a delegate protocol that allows customization of subviews, colors, and click events for a node view.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVNodeView.m\":317-341",
            "content": "}\n//MARK:===============================================================\n//MARK:                     < SelfDelegate >\n//MARK:===============================================================\n-(UIView*) nodeView_GetCustomSubView:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nodeView_GetCustomSubView:)]) {\n        return [self.delegate nodeView_GetCustomSubView:nodeData];\n    }\n    return nil;\n}\n-(UIColor*) nodeView_GetNodeColor:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nodeView_GetNodeColor:)]) {\n        return [self.delegate nodeView_GetNodeColor:nodeData];\n    }\n    return nil;\n}\n-(void) nodeView_TopClick:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nodeView_TopClick:)]) {\n        [self.delegate nodeView_TopClick:nodeData];\n    }\n}\n-(void) nodeView_BottomClick:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nodeView_BottomClick:)]) {\n        [self.delegate nodeView_BottomClick:nodeData];"
        },
        {
            "comment": "This code defines several methods for handling left, right, and regular clicks on a node view. The methods check if the delegate responds to the corresponding click event before calling it with the appropriate data. Additionally, it logs a description of the node click using TPLog.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVNodeView.m\":342-362",
            "content": "    }\n}\n-(void) nodeView_LeftClick:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nodeView_LeftClick:)]) {\n        [self.delegate nodeView_LeftClick:nodeData];\n    }\n}\n-(void) nodeView_RightClick:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nodeView_RightClick:)]) {\n        [self.delegate nodeView_RightClick:nodeData];\n    }\n}\n-(void) nodeView_OnClick:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nodeView_OnClick:)]) {\n        NSString *desc = [self.delegate nodeView_OnClick:self.data];\n        TPLog(@\"> %@\", desc);\n    }\n}\n@end"
        }
    ]
}