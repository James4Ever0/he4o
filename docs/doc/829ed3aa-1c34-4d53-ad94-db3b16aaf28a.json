{
    "summary": "AsyncMutableDictionary is a thread-safe implementation of NSMutableDictionary using GCD's dispatch_queue for synchronized access. It allows safe, concurrent reading and writing from multiple threads with methods to add, remove, and query objects in the dictionary. The dealloc method releases syncQueue if not already null.",
    "details": [
        {
            "comment": "AsyncMutableDictionary.m contains the implementation of a class that extends NSMutableDictionary, providing asynchronous and concurrent operations. It initializes a dictionary and creates a private queue for synchronization. The methods dictionary, count, and removeObjectForKey provide safe access to the dictionary using the provided syncQueue.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Extension/AsyncMutableDictionary.m\":0-46",
            "content": "//\n//  AsyncMutableDictionary.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2023/7/19.\n//  Copyright \u00a9 2023 XiaoGang. All rights reserved.\n//\n#import \"AsyncMutableDictionary.h\"\n@interface AsyncMutableDictionary ()\n@property (nonatomic, strong) NSMutableDictionary *dic;\n@property (nonatomic, strong) dispatch_queue_t syncQueue;\n@end\n@implementation AsyncMutableDictionary\n- (instancetype)init {\n    self = [super init];\n    if (self) {\n        _dic = [[NSMutableDictionary alloc] init];\n        _syncQueue = dispatch_queue_create(\"AsyncMutableDictionary\", DISPATCH_QUEUE_CONCURRENT);\n    }\n    return self;\n}\n- (NSMutableDictionary*)dictionary {\n    __block NSMutableDictionary *safeDic;\n    dispatch_sync(_syncQueue, ^{\n        safeDic = self.dic;\n    });\n    return safeDic;\n}\n- (NSInteger)count {\n    __block NSUInteger count;\n    dispatch_sync(self.syncQueue, ^{\n        count = self.dic.count;\n    });\n    return count;\n}\n- (void)removeObjectForKey:(id)aKey {\n    dispatch_barrier_async(self.syncQueue, ^{\n        [self.dic removeObjectForKey:aKey];"
        },
        {
            "comment": "AsyncMutableDictionary is a class implementing a thread-safe NSMutableDictionary using GCD's dispatch_queue. It provides synchronized access to the dictionary object, allowing multiple threads to safely read and write values without conflicts. Methods are provided for adding, removing, and querying objects in the dictionary while maintaining synchronization. The dealloc method releases the syncQueue if it is not already null.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Extension/AsyncMutableDictionary.m\":47-92",
            "content": "    });\n}\n- (void)removeAllObjects {\n    dispatch_barrier_async(self.syncQueue, ^{\n        [self.dic removeAllObjects];\n    });\n}\n- (void)setObject:(id)anObject forKey:(id)aKey {\n    dispatch_barrier_async(self.syncQueue, ^{\n        [self.dic setObject:anObject forKey:aKey];\n    });\n}\n- (nullable id)objectForKey:(id)aKey {\n    __block id item = nil;\n    dispatch_sync(self.syncQueue, ^{\n        item = [self.dic objectForKey:aKey];\n    });\n    return item;\n}\n- (NSArray *)allKeys {\n    __block NSArray *keys;\n    dispatch_sync(self.syncQueue, ^{\n        keys = [self.dic allKeys];\n    });\n    return keys;\n}\n- (NSArray *)allValues {\n    __block NSArray *values;\n    dispatch_sync(self.syncQueue, ^{\n        values = [self.dic allValues];\n    });\n    return values;\n}\n- (void)dealloc {\n    if (_syncQueue) {\n        _syncQueue = NULL;\n    }\n}\n@end"
        }
    ]
}