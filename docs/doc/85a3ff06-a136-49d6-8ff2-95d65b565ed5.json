{
    "summary": "The code updates and improves AI recognition, performance optimization, time series accuracy, abstractness, bug fixes, and logging results. It searches for a specific condition in a scene and retrieves matchAlg_ps and Nodes2Pits from frameModel. The method `getMatchAndPartAlgPs:frameIndex` is marked as abandoned.",
    "details": [
        {
            "comment": "This code appears to be implementing sparse barcode recognition functionality. It takes an input and returns the current barcode sequence with similarity values. The method is marked with various version notes, indicating updates and improvements have been made over time.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":0-31",
            "content": "//\n//  TIUtils.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2021/12/27.\n//  Copyright \u00a9 2021\u5e74 XiaoGang. All rights reserved.\n//\n#import \"TIUtils.h\"\n@implementation TIUtils\n//MARK:===============================================================\n//MARK:                     < \u7a00\u758f\u7801\u8bc6\u522b >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u7a00\u758f\u7801\u8bc6\u522b--------------------\n *  @version\n *      xxxx.xx.xx: \u8fd4\u56delimit\u4e0d\u80fd\u592a\u5c0f,\u4e0d\u7136\u6982\u5ff5\u8bc6\u522b\u65f6,\u6ca1\u4ea4\u96c6\u4e86 (\u53c2\u800326075);\n *      2022.05.23: \u521d\u7248,\u6392\u5e8f\u548c\u9650\u5236limit\u6761\u6570\u653e\u5230\u6b64\u5904,\u539f\u6765getIndex_ps()\u65b9\u6cd5\u91cc\u5e76\u6ca1\u6709\u76f8\u8fd1\u5ea6\u6392\u5e8f (\u53c2\u800326096-BUG5);\n *      2022.05.23: \u5e9f\u5f03\u6389\u4e0d\u8d85\u8fc710%\u7684\u6761\u4ef6,\u56e0\u4e3a\u5b83\u4f1a\u5bfc\u81f4\u8fc7\u7a84\u95ee\u9898 (\u53c2\u800326096-BUG3-\u65b9\u68481);\n *      2023.01.31: \u8fd4\u56delimit\u6539\u621020%\u6761\u76ee (\u53c2\u800328042-\u601d\u8def2-1);\n *      2023.02.25: \u8fd4\u56delimit\u6539\u621080%\u6761\u76ee (\u53c2\u800328108-todo1);\n *      2023.03.16: \u652f\u6301\u9996\u5c3e\u5faa\u73af\u7684\u60c5\u51b5 (\u53c2\u800328174-todo4);\n *      2023.03.16: \u4fee\u590d\u9996\u5c3e\u5dee\u503c\u7b97\u9519\u7684BUG (\u56e0\u4e3a\u6d4b\u5f97360\u5de6\u53f3\u5ea6\u548c180\u5de6\u53f3\u5ea6\u76f8\u8fd1\u5ea6\u662f0.9\u4ee5\u4e0a);\n *      2023.06.03: \u6027\u80fd\u4f18\u5316_\u590d\u7528cacheDataDic\u5230\u5faa\u73af\u5916 (\u53c2\u800329109-\u6d4b\u5f973);\n *  @result \u8fd4\u56de\u5f53\u524d\u7801\u8bc6\u522b\u7684\u76f8\u8fd1\u5e8f\u5217;\n */\n+(NSArray*) TIR_Value:(AIKVPointer*)protoV_p{\n    //1. \u53d6\u7d22\u5f15\u5e8f\u5217 & \u5f53\u524d\u7a00\u758f\u7801\u503c;\n    NSDictionary *cache"
        },
        {
            "comment": "The code retrieves a dictionary of data, an array of indices, and calculates the masked data value. It then compares the indices based on similarity to the masked data and sorts them in ascending order. The sorted list is narrowed down to the top NarrowLimit results before returning them.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":31-52",
            "content": "DataDic = [AINetIndexUtils searchDataDic:protoV_p.algsType ds:protoV_p.dataSource isOut:protoV_p.isOut];\n    NSArray *index_ps = [AINetIndex getIndex_ps:protoV_p.algsType ds:protoV_p.dataSource isOut:protoV_p.isOut];\n    double maskData = [NUMTOOK([AINetIndex getData:protoV_p]) doubleValue];\n    double max = [CortexAlgorithmsUtil maxOfLoopValue:protoV_p.algsType ds:protoV_p.dataSource];\n    //2. \u6309\u7167\u76f8\u8fd1\u5ea6\u6392\u5e8f;\n    NSArray *near_ps = [SMGUtils sortSmall2Big:index_ps compareBlock:^double(AIKVPointer *obj) {\n        double objData = [NUMTOOK([AINetIndex getData:obj fromDataDic:cacheDataDic]) doubleValue];\n        double nearDelta = fabs(objData - maskData);\n        //2. \u5faa\u73af\u65f6: \u8ba1\u7b97nearV\u76f8\u8fd1\u5ea6\u7b97\u6cd5 (\u53c2\u800328174-todo4);\n        if (max > 0 && nearDelta > (max / 2)) nearDelta = max - nearDelta;\n        return nearDelta;\n    }];\n    //3. \u7a84\u51fa,\u4ec5\u8fd4\u56de\u524dNarrowLimit\u6761 (\u6700\u591anarrowLimit\u6761,\u6700\u5c111\u6761);\n    NSInteger limit = MAX(near_ps.count * 0.8f, 20);\n    return ARR_SUB(near_ps, 0, limit);\n}\n//MARK:==============================================================="
        },
        {
            "comment": "This code seems to be related to concept recognition in an AI system. It discusses the recognition of concepts (e.g., \"this is a watermelon\") and the potential issues with nested concepts, as well as updates to the functionality over time. The code also mentions handling situations where seeing a watermelon might make the AI happy, and how the use of 'useNode' has been changed to be handled by 'mModel' and submitted to 'demandManager' for processing.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":53-80",
            "content": "//MARK:                     < \u6982\u5ff5\u8bc6\u522b >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u8bc6\u522b\u662f\u4ec0\u4e48(\u8fd9\u662f\u897f\u74dc)--------------------\n *\n *  \u6ce8: \u65e0\u6761\u4ef6 & \u76ee\u524d\u65e0\u80fd\u91cf\u6d88\u8017 (\u4ee5\u540e\u6709\u57fa\u7840\u601d\u7ef4\u6d3b\u529b\u503c\u540e\u53efenergy-1)\n *  \u6ce8: \u5c40\u90e8\u5339\u914d_\u540e\u9762\u901a\u8fc7\u8c03\u6574\u53c2\u6570,\u6765\u8fbe\u523099%\u4ee5\u4e0a\u7684\u8bc6\u522b\u7387;\n *\n *  Q1: \u8001\u95ee\u9898,\u770b\u5230\u7684algNode\u4e0e\u8bc6\u522b\u5230\u7684,\u672a\u5fc5\u662f\u6b63\u786e\u7684,\u4f46\u6211\u4eec\u5e94\u8be5\u4fdd\u6301\u4f7f\u7528protoAlgNode\u800c\u4e0d\u662frecognitionAlgNode;\n *  A1: 190910\u5728\u7406\u6027\u601d\u7ef4\u5b8c\u5584\u540e,\u8bc6\u522bresult\u548cprotoAlg\u90fd\u6709\u7528;\n *\n *  Q2: \u6982\u5ff5\u7684\u5d4c\u5957,\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8bc6\u522b\u4e0a\u7684\u4e00\u4e9b\u95ee\u9898; (\u6211\u4eec\u9700\u8981\u652f\u6301\u7ed3\u6784\u5316\u8bc6\u522b,\u800c\u4e0d\u4ec5\u662f\u7edd\u5bf9\u8bc6\u522b\u548c\u6a21\u7cca\u8bc6\u522b)\n *  A2: 190910\u6982\u5ff5\u5d4c\u5957\u5df2\u53d6\u6d88,\u6b63\u5728\u505a\u7ed3\u6784\u5316\u8bc6\u522b,\u6b64\u6b21\u6539\u52a8\u662f\u4e3a\u4e86\u5b8c\u5584ThinkReason\u7ec6\u8282;\n *\n *  @todo\n *      1. \u770b\u5230\u897f\u74dc\u4f1a\u5f00\u5fc3 : TODO: \u5bf9\u81ea\u8eab\u72b6\u6001\u7684\u5224\u65ad, (\u6bd4\u5982,\u770b\u5230\u897f\u74dc,\u60f3\u5403,\u90a3\u4e48\u5f53\u524d\u72b6\u6001\u662f\u5426\u997f)\n *          > \u5df2\u89e3\u51b3,\u5c06useNode\u53bb\u6389,\u5e76\u4e14\u7531mModel\u66ff\u4ee3\u540e,\u4f1a\u63d0\u4ea4\u7ed9demandManager\u8fdb\u884c\u8fd9\u4e9b\u5904\u7406;\n *\n *  @version \u8fed\u4ee3\u8bb0\u5f55:\n *      20190910: \u8bc6\u522b\"\u6982\u5ff5\u4e0e\u65f6\u5e8f\",\u5e76\u6784\u5efa\u7eb5\u5411\u5173\u8054; (190910\u6982\u5ff5\u8bc6\u522b,\u6dfb\u52a0\u4e86\u62bd\u8c61\u5173\u8054)\n *      20191223: \u5c40\u90e8\u5339\u914d\u652f\u6301\u5168\u542b: \u5bf9assAlg\u548cprotoAlg\u76f4\u63a5\u505a\u62bd\u8c61\u5173\u8054,\u800c\u4e0d\u662f\u65b0\u6784\u5efa\u62bd\u8c61;\n *      20200307: \u8fed\u4ee3\u652f\u6301\u6a21\u7cca\u5339\u914dfuzzy\n *      20200413: \u65e0\u5168\u542b\u65f6,\u652f\u6301\u6700\u76f8\u4f3c\u7684seemAlg\u8fd4\u56de;\n *      20200416: \u5e9f\u9664\u7edd\u5bf9\u5339\u914d (\u56e0\u6982\u5ff5\u5168\u5c40\u53bb\u91cd\u4e86,\u7edd\u5bf9\u5339\u914d\u5339\u914d\u6ca1\u6709\u610f\u4e49);\n *      20200703: \u5e9f\u5f03fuzzy\u6a21\u7cca\u5339\u914d\u529f\u80fd,\u56e0\u4e3a\u8bc6\u522b\u671f\u8981\u5e7f\u5165 (\u53c2\u800320062);\n *      20201022: \u540c\u65f6\u652f\u6301matchAlg\u548cseemAlg\u7ed3\u679c (\u53c2\u800321091);\n *      20201022: \u5c06seem\u7684\u62bd\u8c61\u642c\u8fc7\u6765,\u4e14\u652f\u6301\u4e09\u79cd\u5173\u8054\u5904\u7406 (\u53c2\u800321091-\u84dd\u7eff\u9ec4\u4e09\u79cd\u7ebf);"
        },
        {
            "comment": "This code is preparing data, performing local matching for concept recognition, and adding the resulting abstract concepts into the given model. It supports three types of returns based on match effectiveness: fuzzyAlg (deprecated), matchAlg (full match), and seemAlg (partial match). The code also searches for a prototype algorithm node and performs part matching in memory and hard disk networks, while noting that direct inheritance is now used instead of adding the algorithm to the self.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":81-102",
            "content": " *      20220115: \u8bc6\u522b\u7ed3\u679c\u53ef\u4e3a\u81ea\u8eab,\u53c2\u8003partMatching_Alg(),\u6240\u4ee5\u4e0d\u9700\u8981\u6b64\u5904\u518dadd(self)\u4e86;\n *      20220116: \u5168\u542b\u53ef\u80fd\u4e5f\u53ea\u662f\u76f8\u4f3c,\u7531\u76f4\u63a5\u6784\u5efa\u62bd\u5177\u8c61\u5173\u8054,\u6539\u6210\u6982\u5ff5\u5916\u7c7b\u6bd4 (\u53c2\u800325105);\n *      20220528: \u628a\u6982\u5ff5\u5916\u7c7b\u6bd4\u5173\u6389 (\u53c2\u800326129-\u65b9\u68482-1);\n *      20221018: \u5bf9proto\u76f4\u63a5\u62bd\u8c61\u6307\u5411matchAlg (\u53c2\u800327153-todo3);\n *      20221024: \u5c06\u62bd\u5177\u8c61\u76f8\u4f3c\u5ea6\u5b58\u81f3algNode\u4e2d (\u53c2\u800327153-todo2);\n *\n *  _result\n *      xxxx.xx.xx: completeBlock : \u5171\u652f\u6301\u4e09\u79cd\u8fd4\u56de: \u5339\u914d\u6548\u679c\u4ece\u9ad8\u5230\u4f4e\u5206\u522b\u4e3a:fuzzyAlg\u5e9f\u5f03,matchAlg\u5168\u542b,seemAlg\u5c40\u90e8;\n *      2022.01.16: \u6539\u4e3a\u76f4\u63a5\u4f20\u5165inModel\u6a21\u578b,\u8bc6\u522b\u540e\u8d4b\u503c\u5230inModel\u4e2d\u5373\u53ef;\n */\n+(void) TIR_Alg:(AIKVPointer*)algNode_p except_ps:(NSArray*)except_ps inModel:(AIShortMatchModel*)inModel{\n    //1. \u6570\u636e\u51c6\u5907\n    AIAlgNodeBase *protoAlg = [SMGUtils searchNode:algNode_p];\n    if (protoAlg == nil) return;\n    IFTitleLog(@\"\u6982\u5ff5\u8bc6\u522b\",@\"\\n%@\",Alg2FStr(protoAlg));\n    ///3. \u5c40\u90e8\u5339\u914d -> \u5185\u5b58\u7f51\u7edc;\n    ///200116\u6ce8\u6389,\u56e0\u4e3a\u8bc6\u522b\u4ec5\u662f\u5efa\u7acb\u62bd\u8c61\u5173\u8054,\u6b64\u5904\u4f1a\u6781\u6613\u5339\u914d\u5230\u5185\u5b58\u4e2d\u5927\u91cf\u7684\u5177\u8c61alg,\u5bfc\u81f4\u65e0\u6cd5\u5efa\u7acb\u5173\u8054,\u800c\u5728\u786c\u76d8\u7f51\u7edc\u65f6,\u8fd9\u79cd\u51e0\u7387\u5219\u4f4e\u8bb8\u591a;\n    //if (!assAlgNode) assAlgNode = [AINetIndexUtils partMatching_Alg:algNode isMem:true except_ps:except_ps];\n    ///4. \u5c40\u90e8\u5339\u914d (Abs\u5339\u914d \u548c Seem\u5339\u914d);\n    [self partMatching_Alg:protoAlg except_ps:except_ps inModel:inModel];"
        },
        {
            "comment": "Iterates through matchModels, identifies relevant ports for each and updates references. Updates the match value between protoAlg and matchAlg, relates protoAlg to matchAlg with increased strength, and excludes certain matches. Supports partial matching and iteratively handles full containment.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":104-127",
            "content": "    //5. \u5173\u8054\u5904\u7406 & \u5916\u7c7b\u6bd4 (\u8fd9\u6837\u540e\u9762TOR\u7406\u6027\u51b3\u7b56\u65f6,\u624d\u53ef\u4ee5\u76f4\u63a5\u5bf9\u5f53\u524d\u77ac\u65f6\u5b9e\u7269\u8fdb\u884c\u5f88\u597d\u7684\u7406\u6027\u8bc4\u4ef7) (\u53c2\u800321091-\u84dd\u7ebf);\n    for (AIMatchAlgModel *matchModel in inModel.matchAlgs) {\n        //4. \u8bc6\u522b\u5230\u65f6,value.refPorts -> \u66f4\u65b0/\u52a0\u5f3a\u5fae\u4fe1\u606f\u7684\u5f15\u7528\u5e8f\u5217\n        AIAbsAlgNode *matchAlg = [SMGUtils searchNode:matchModel.matchAlg];\n        [AINetUtils insertRefPorts_AllAlgNode:matchModel.matchAlg content_ps:matchAlg.content_ps difStrong:1];\n        //5. \u5b58\u50a8protoAlg\u4e0ematchAlg\u4e4b\u95f4\u7684\u76f8\u8fd1\u5ea6\u8bb0\u5f55 (\u53c2\u800327153-todo2);\n        [protoAlg updateMatchValue:matchAlg matchValue:matchModel.matchValue];\n        //6. \u5bf9proto\u76f4\u63a5\u62bd\u8c61\u6307\u5411matchAlg,\u5e76\u589e\u5f3a\u5f3a\u5ea6\u503c (\u4e3a\u4fdd\u8bc1\u62bd\u8c61\u591a\u6837\u6027,\u6240\u4ee5\u76f8\u8fd1\u7684\u4e5f\u62bd\u5177\u8c61\u5173\u8054) (\u53c2\u800327153-3);\n        [AINetUtils relateAlgAbs:matchAlg conNodes:@[protoAlg] isNew:false];\n    }\n}\n/**\n *  MARK:--------------------\u6982\u5ff5\u5c40\u90e8\u5339\u914d--------------------\n *  \u6ce8: \u6839\u636e\u5f15\u7528\u627e\u51fa\u76f8\u4f3c\u5ea6\u6700\u9ad8\u4e14\u8fbe\u5230\u9600\u503c\u7684\u7ed3\u679c\u8fd4\u56de; (\u76f8\u4f3c\u5ea6\u5339\u914d)\n *  \u4ececontent_ps\u7684\u6240\u6709value.refPorts\u627e\u524dcPartMatchingCheckRefPortsLimit\u4e2a, \u5982:contentCount9*limit5=45\u4e2a;\n *\n *  @param except_ps : \u6392\u9664_ps; (\u5982:\u540c\u4e00\u6279\u6b21\u8f93\u5165\u7684\u6982\u5ff5\u7ec4,\u4e0d\u53ef\u7528\u6765\u8bc6\u522b\u81ea\u5df1)\n *\n *  @version:\n *      2021.09.27: \u4ec5\u8bc6\u522bATDefault\u7c7b\u578b (\u53c2\u800324022-BUG4);\n *      2019.12.23 - \u8fed\u4ee3\u652f\u6301\u5168\u542b,\u53c2\u800317215 (\u4ee3\u7801\u4e2d\u7531\u5224\u65ad\u76f8\u4f3c\u5ea6,\u6539\u4e3a\u5224\u65ad\u5168\u542b)"
        },
        {
            "comment": "This code contains various updates and modifications made between 2020 to 2022. It supports full containment or partial similarity matching, recognizes results that may be the same as the input, handles abstract nodes and specific match types, filters low-quality matches, and adjusts sorting formulas.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":128-144",
            "content": " *      2020.04.13 - \u5c06\u7ed3\u679c\u901a\u8fc7complete\u8fd4\u56de,\u652f\u6301\u5168\u542b \u6216 \u4ec5\u76f8\u4f3c (\u56e0\u4e3a\u6b63\u5411\u53cd\u9988\u7c7b\u6bd4\u7684\u6b7b\u5faa\u73af\u5207\u5165\u95ee\u9898,\u53c2\u8003:n19p6);\n *      2020.07.21 - \u5f53Seem\u7ed3\u679c\u65f6,\u5bf9seem\u548cproto\u8fdb\u884c\u7c7b\u6bd4\u62bd\u8c61,\u5e76\u5c06\u62bd\u8c61\u6982\u5ff5\u8fd4\u56de (\u53c2\u8003:20142);\n *      2020.07.21 - \u5f53Seem\u7ed3\u679c\u65f6,\u867d\u7136\u6784\u5efa\u4e86absAlg,\u4f46\u8fd8\u662f\u5c06seemAlg\u8fd4\u56de (\u53c2\u800320142-Q1);\n *      2020.10.22 - \u652f\u6301matchAlg\u548cseemAlg\u4e8c\u8005\u90fd\u8fd4\u56de (\u53c2\u800321091);\n *      2020.11.18 - \u652f\u6301\u591a\u5168\u542b\u8bc6\u522b (\u5c06\u6240\u6709\u5168\u542bmatchAlgs\u8fd4\u56de) (\u53c2\u800321145\u65b9\u68481);\n *      2020.11.18 - partAlgs\u5c06matchAlgs\u79fb\u9664\u6389,\u4ec5\u4fdd\u7559\u975e\u5168\u542b\u7684\u90e8\u5206;\n *      2022.01.13 - \u8fed\u4ee3\u652f\u6301\u76f8\u8fd1\u5339\u914d (\u53c2\u800325082 & 25083);\n *      2022.01.15 - \u8bc6\u522b\u7ed3\u679c\u53ef\u4e3a\u81ea\u8eab: \u6bd4\u5982(\u98de\u2191)\u5982\u679c\u4e0d\u8bc6\u522b\u81ea\u8eab,\u53c8\u5168\u5c40\u9632\u91cd,\u5c31\u8bc6\u522b\u4e0d\u5230\u6700\u5168\u542b\u6700\u76f8\u8fd1\u5339\u914d\u7ed3\u679c\u4e86;\n *      2022.05.11 - \u5168\u542b\u4e0d\u8981\u6c42\u5fc5\u987b\u662f\u62bd\u8c61\u8282\u70b9,\u56e0\u4e3a\u76f8\u8fd1\u5339\u914d\u65f6,\u53ef\u80fd\u6700\u5177\u8c61\u4e5f\u4f1a\u5168\u542b (\u4e14\u73b0\u5728\u5168\u662fabsNode\u7c7b\u578b);\n *      2022.05.12 - \u4ec5\u8bc6\u522b\u6709mv\u6307\u5411\u7684\u7ed3\u679c (\u53c2\u800326022-3);\n *      2022.05.13 - \u5f03\u7528partAlgs (\u53c2\u800326024);\n *      2022.05.20 - 1. \u7a84\u51fa,\u4ec5\u8fd4\u56de\u524dNarrowLimit\u6761 (\u53c2\u800326073-TODO2);\n *      2022.05.20 - 2. \u6539\u5339\u914d\u5ea6\u516c\u5f0f: matchCount\u6539\u6210protoCount (\u53c2\u800326073-TODO3);\n *      2022.05.20 - 3. \u6240\u6709\u7ed3\u679c\u5168\u653e\u5230matchAlgs\u4e2d (\u53c2\u800326073-TODO4);\n *      2022.05.20 - 4. \u5e9f\u5f03\u4ec5\u8bc6\u522b\u6709mv\u6307\u5411\u7684 (\u53c2\u800326073-TODO5);\n *      2022.05.23 - \u5c06\u5339\u914d\u5ea6<90%\u7684\u8fc7\u6ee4\u6389 (\u53c2\u800326096-BUG3);\n *      2022.05.24 - \u6392\u5e8f\u516c\u5f0f\u6539\u4e3asumNear / matchCount (\u53c2\u800326103-\u4ee3\u7801);"
        },
        {
            "comment": "This code contains various updates and bug fixes to a concept recognition algorithm, including changes in sorting formulas, improvements in performance, modifications to the output format, and the integration of a concept recognition filter.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":145-160",
            "content": " *      2022.05.25 - \u6392\u5e8f\u516c\u5f0f\u6539\u4e3asumNear / proto.count (\u53c2\u800326114-1);\n *      2022.05.28 - \u4f18\u5316\u6027\u80fd (\u53c2\u800326129-\u65b9\u68482);\n *      2022.06.07 - \u4e3a\u4e86\u6253\u5f00\u62bd\u8c61\u7ed3\u679c(\u786e\u5b9a,\u8f7b\u6613\u522b\u6539\u4e86),\u6392\u5e8f\u516c\u5f0f\u6539\u4e3asumNear / matchCount (\u53c2\u80032619j-TODO2);\n *      2022.06.07 - \u6392\u5e8f\u516c\u5f0f\u6539\u4e3asumNear / nearCount (\u53c2\u80032619j-TODO5);\n *      2022.06.13 - \u4fee\u590d\u56e0matchCount<result.count\u5bfc\u81f4\u6982\u5ff5\u8bc6\u522b\u6709\u9519\u8bef\u7ed3\u679c\u7684BUG (\u53c2\u800326236);\n *      2022.10.20 - \u5220\u6389\u65e9\u5df2\u5e9f\u5f03\u7684partAlgs\u4ee3\u7801 & \u5c06\u8fd4\u56deList<AlgNode>\u7c7b\u578b\u6539\u6210List<AIMatchAlgModel> (\u53c2\u800327153);\n *      2022.12.19 - \u8fed\u4ee3\u6982\u5ff5\u8bc6\u522b\u7ed3\u679c\u7684\u7ade\u4e89\u673a\u5236 (\u53c2\u80032722d-\u65b9\u68482);\n *      2023.01.18 - \u76f8\u4f3c\u5ea6\u7528\u76f8\u4e58 (\u53c2\u800328035-todo1);\n *      2023.01.24 - BUG\u4fee\u590d: \u4fee\u590d\u76f8\u4f3c\u5ea6\u76f8\u4e58\u540e,\u76f8\u4f3c\u5ea6\u9608\u503c\u76f8\u5e94\u8c03\u4f4e (\u53c2\u800328041-BUG1);\n *      2023.02.01 - \u4e0d\u9650\u5236\u76f8\u4f3c\u5ea6,\u8ba9\u5176\u81ea\u7136\u7ade\u4e89\u8d8a\u6765\u8d8a\u51c6\u786e (\u53c2\u800328042-\u601d\u8def2-4);\n *      2023.02.21 - \u8bc6\u522b\u7ed3\u679c\u4fdd\u755920% (\u53c2\u800328102-\u65b9\u68481);\n *      2023.02.25 - \u96c6\u6210\u6982\u5ff5\u8bc6\u522b\u8fc7\u6ee4\u5668 (\u53c2\u800328111-todo1) & \u53d6\u6d88\u8bc6\u522b\u540e\u8fc7\u6ee420% (\u53c2\u800328111-todo2);\n *      2023.04.09 - \u4ec5\u8bc6\u522b\u4f3c\u5c42 (\u53c2\u800329064-todo1);\n *      2023.06.01 - \u5c06\u8bc6\u522b\u7ed3\u679c\u62c6\u5206\u6210pAlgs\u548crAlgs\u4e24\u4e2a\u90e8\u5206 (\u53c2\u800329108-2.1);\n *      2023.06.02 - \u6027\u80fd\u4f18\u5316_\u590d\u7528vInfo (\u5728\u8bc6\u522b\u4e8c\u6b21\u8fc7\u6ee4\u5668\u4e2d\u6d4b\u5f97,\u8fd9\u4e2avInfo\u5728\u5faa\u73af\u4e2d\u65f6\u6027\u80fd\u5f71\u54cd\u633a\u5927\u7684);\n *      2023.06.03 - \u6027\u80fd\u4f18\u5316_\u590d\u7528cacheDataDic\u5230\u5faa\u73af\u5916 & cacheProtoData\u5230\u5faa\u73af\u5916 & proto\u6536\u96c6\u9632\u91cd\u7528dic (\u53c2\u800329109-\u6d4b\u5f973);"
        },
        {
            "comment": "The code prepares data for part matching algorithm, collects `prAlgs` as key-value pairs in two dictionaries, iterates through each element to obtain index sequences, optimizes performance by loading cached data, calculates cache proximity data, retrieves value information, sorts near points based on similarity and performs operations on them.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":161-182",
            "content": " */\n+(void) partMatching_Alg:(AIAlgNodeBase*)protoAlg except_ps:(NSArray*)except_ps inModel:(AIShortMatchModel*)inModel{\n    //0. \u6570\u636e\u51c6\u5907;\n    if (!ISOK(protoAlg, AIAlgNodeBase.class)) return;\n    except_ps = ARRTOOK(except_ps);\n    //1. \u6536\u96c6prAlgs <K:pid,V:AIMatchAlgModel> (\u6ce8: \u73b0\u5728alg\u7684atds\u5168\u662f\u7a7a,\u7528pid\u5c31\u80fd\u5224\u65ad\u552f\u4e00);\n    NSMutableDictionary *protoPDic = [NSMutableDictionary new], *protoRDic = [NSMutableDictionary new];\n    //2. \u5e7f\u5165: \u5bf9\u6bcf\u4e2a\u5143\u7d20,\u5206\u522b\u53d6\u7d22\u5f15\u5e8f\u5217 (\u53c2\u800325083-1);\n    for (AIKVPointer *item_p in protoAlg.content_ps) {\n        //3. \u6027\u80fd\u4f18\u5316: \u52a0\u8f7d\u5faa\u73af\u5916\u7f13\u5b58\u6570\u636e;\n        NSDictionary *cacheDataDic = [AINetIndexUtils searchDataDic:item_p.algsType ds:item_p.dataSource isOut:item_p.isOut];\n        AIValueInfo *vInfo = [AINetIndex getValueInfo:item_p.algsType ds:item_p.dataSource isOut:item_p.isOut];\n        double cacheProtoData = [NUMTOOK([AINetIndex getData:item_p fromDataDic:cacheDataDic]) doubleValue];\n        //3. \u53d6\u76f8\u8fd1\u5ea6\u5e8f\u5217 (\u6309\u76f8\u8fd1\u7a0b\u5ea6\u6392\u5e8f);\n        NSArray *near_ps = [self TIR_Value:item_p];\n        //4. \u6bcf\u4e2anear_p\u505a\u4e24\u4ef6\u4e8b:\n        for (AIKVPointer *near_p in near_ps) {"
        },
        {
            "comment": "This code performs several computations involving arrays and values, specifically calculating nearV based on nearData, filtering refPorts array by a certain condition, and performing actions on each element in the filtered refPorts array. The operations are executed within specified performance constraints to ensure efficiency.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":184-200",
            "content": "            //5. \u7b2c1_\u8ba1\u7b97\u51fanearV (\u53c2\u800325082-\u516c\u5f0f1) (\u6027\u80fd:400\u6b21\u8ba1\u7b97,\u8017100ms\u5f88\u6b63\u5e38);\n            double nearData = [NUMTOOK([AINetIndex getData:near_p fromDataDic:cacheDataDic]) doubleValue];\n            double nearV = [AIAnalyst compareCansetValue:nearData protoV:cacheProtoData at:item_p.algsType ds:item_p.dataSource isOut:item_p.isOut vInfo:vInfo];\n            //6. \u7b2c2_\u53d6near_p\u7684refPorts (\u53c2\u800325083-1) (\u6027\u80fd: \u65e0\u7f13\u5b58\u65f6\u8bfb266\u8017240,\u6709\u7f13\u5b58\u65f6\u5f88\u5feb);\n            NSArray *refPorts = [AINetUtils refPorts_All4Value:near_p];\n            refPorts = ARR_SUB(refPorts, 0, cPartMatchingCheckRefPortsLimit_Alg(refPorts.count));\n            //6. \u7b2c3_\u4ec5\u4fdd\u7559\u6709mv\u6307\u5411\u7684\u90e8\u5206 (\u53c2\u800326022-3);\n            //refPorts = [SMGUtils filterArr:refPorts checkValid:^BOOL(AIPort *item) {\n            //    return item.targetHavMv;\n            //}];\n            //if (Log4MAlg) NSLog(@\"\u5f53\u524dnear_p:%@ --ref\u6570\u91cf:%lu\",[NVHeUtil getLightStr:near_p],(unsigned long)refPorts.count);\n            //7. \u6bcf\u4e2arefPort\u505a\u4e24\u4ef6\u4e8b: (\u6027\u80fd: \u4ee5\u4e0bfor\u5faa\u73af\u8017150ms\u5f88\u6b63\u5e38);\n            for (AIPort *refPort in refPorts) {\n                //8. \u4e0d\u5e94\u671f -> \u4e0d\u53ef\u6fc0\u6d3b;"
        },
        {
            "comment": "This code iterates through a list of reference ports, finds or creates an algorithm model for each port, and updates the model's properties based on matching criteria. It also performs a full containment check and calculates related statistics.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":201-222",
            "content": "                if ([SMGUtils containsSub_p:refPort.target_p parent_ps:except_ps]) continue;\n                //9. \u627emodel (\u65e0\u5219\u65b0\u5efa) (\u6027\u80fd: \u6b64\u5904\u5728\u5faa\u73af\u4e2d,\u6240\u4ee5\u9632\u91cd\u801760ms\u6b63\u5e38,\u6536\u96c6\u8017100ms\u6b63\u5e38);\n                NSMutableDictionary *protoDic = refPort.targetHavMv ? protoPDic : protoRDic;\n                AIMatchAlgModel *model = [protoDic objectForKey:@(refPort.target_p.pointerId)];\n                if (!model) {\n                    model = [[AIMatchAlgModel alloc] init];\n                    //9. \u6536\u96c6;\n                    [protoDic setObject:model forKey:@(refPort.target_p.pointerId)];\n                }\n                model.matchAlg = refPort.target_p;\n                //10. \u7edf\u8ba1\u5339\u914d\u5ea6matchCount & \u76f8\u8fd1\u5ea6<1\u4e2a\u6570nearCount & \u76f8\u8fd1\u5ea6sumNear & \u5f15\u7528\u5f3a\u5ea6sumStrong\n                model.matchCount++;\n                model.nearCount++;\n                model.sumNear *= nearV;\n                model.sumRefStrong += (int)refPort.strong.value;\n            }\n        }\n    }\n    //12. \u5168\u542b\u5224\u65ad: \u4ece\u5927\u5230\u5c0f,\u4f9d\u6b21\u53d6\u5230\u5bf9\u5e94\u7684node\u548cmatchingCount (\u6ce8: \u652f\u6301\u76f8\u8fd1\u540e,\u5e94\u8be5\u5168\u662f\u5168\u542b\u4e86,\u53c2\u800325084-1) (\u6027\u80fd:\u65e0\u7f13\u5b58\u65f6\u8bfb400\u8017400ms,\u6709\u7f13\u5b58\u65f630ms);"
        },
        {
            "comment": "This code is filtering and ranking recognition algorithms for concept detection. It applies filters based on valid matching algorithms, sorts them using a ranking mechanism, and then merges the sorted results before assigning them to the model's matchAlgs property. The code also includes debug logging to display the final concept detection results.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":223-242",
            "content": "    NSArray *validPAlgs = [self TIR_Alg_CheckFoValidMatchV2:protoPDic.allValues protoAlgCount:protoAlg.count];\n    NSArray *validRAlgs = [self TIR_Alg_CheckFoValidMatchV2:protoRDic.allValues protoAlgCount:protoAlg.count];\n    //13. \u8bc6\u522b\u8fc7\u6ee4\u5668 (\u53c2\u800328109-todo2);\n    NSArray *filterPAlgs = [AIFilter recognitionAlgFilter:validPAlgs radio:0.5f];\n    NSArray *filterRAlgs = [AIFilter recognitionAlgFilter:validRAlgs radio:0.16f];\n    //14. \u8bc6\u522b\u7ade\u4e89\u673a\u5236 (\u53c2\u80032722d-\u65b9\u68482);\n    //14. \u6309nearA\u6392\u5e8f (\u53c2\u800325083-2&\u516c\u5f0f2 & 25084-1);\n    NSArray *sortPAlgs = [AIRank recognitionAlgRank:filterPAlgs];\n    NSArray *sortRAlgs = [AIRank recognitionAlgRank:filterRAlgs];\n    //15. \u672a\u5c06\u5168\u542b\u8fd4\u56de,\u5219\u8fd4\u56de\u6700\u76f8\u4f3c (2020.10.22: \u5168\u542b\u8fd4\u56de,\u4e5f\u8981\u8fd4\u56deseemAlg) (2022.01.15: \u652f\u6301\u76f8\u8fd1\u5339\u914d\u540e,\u5168\u662f\u5168\u542b\u6ca1\u5c40\u90e8\u4e86);\n    //15. \u5408\u5e76\u540e\u8d4b\u503c\u7ed9matchAlgs (\u53c2\u800329108-2.2);\n    NSArray *allSortAlgs = [SMGUtils collectArrA:sortPAlgs arrB:sortRAlgs];\n    inModel.matchAlgs = allSortAlgs;\n    //16. debugLog\n    NSLog(@\"\\n\u6982\u5ff5\u8bc6\u522b\u7ed3\u679c (%ld\u6761) protoAlg:%@\",allSortAlgs.count,Alg2FStr(protoAlg));\n    for (AIMatchAlgModel *item in allSortAlgs) {"
        },
        {
            "comment": "This code snippet filters an array of matching models based on certain conditions. It first checks if the match value is above 60% and then verifies if the model is a complete match by comparing its count to the match count and ensuring it belongs to the correct layer. The function returns only the valid matching models.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":243-267",
            "content": "        NSString *fromDesc = [sortPAlgs containsObject:item] ? @\"P\" : @\"R\";\n        if (Log4MAlg) NSLog(@\"%@-->>>(%d) \u5168\u542bitem: %@   \\t\u76f8\u8fd1\u5ea6 => %.2f (count:%d)\",fromDesc,item.sumRefStrong,Pit2FStr(item.matchAlg),item.matchValue,item.matchCount);\n    }\n}\n/**\n *  MARK:--------------------\u6982\u5ff5\u8bc6\u522b\u5168\u542b\u5224\u65ad--------------------\n */\n+(NSArray*) TIR_Alg_CheckFoValidMatchV2:(NSArray*)protoPRModels protoAlgCount:(NSInteger)protoAlgCount{\n    //1. \u5168\u542b\u5224\u65ad: \u4ece\u5927\u5230\u5c0f,\u4f9d\u6b21\u53d6\u5230\u5bf9\u5e94\u7684node\u548cmatchingCount (\u6ce8: \u652f\u6301\u76f8\u8fd1\u540e,\u5e94\u8be5\u5168\u662f\u5168\u542b\u4e86,\u53c2\u800325084-1);\n    return [SMGUtils filterArr:protoPRModels checkValid:^BOOL(AIMatchAlgModel *item) {\n        //2. \u8fc7\u6ee4\u6389\u5339\u914d\u5ea6<85%\u7684;\n        //if (item.matchValue < 0.60f) return false;\n        //3. \u8fc7\u6ee4\u6389\u975e\u5168\u542b\u7684 (\u5f53count!=matchCount\u65f6\u4e3a\u5c40\u90e8\u5339\u914d: \u5c40\u90e8\u5339\u914dpartAlgs\u5df2\u5e9f\u5f03);\n        AIAlgNodeBase *itemAlg = [SMGUtils searchNode:item.matchAlg];\n        if (itemAlg.count != item.matchCount) return false;\n        //4. \u8fc7\u6ee4\u6389\u975e\u4f3c\u5c42\u7684 (\u53c2\u800329064-todo1);\n        if (itemAlg.count != protoAlgCount) return false;\n        return true;\n    }];\n}\n//MARK:==============================================================="
        },
        {
            "comment": "This code appears to contain a time series recognition algorithm. It uses an assFoIndexAlg parameter for associating concepts, and the assFoBlock parameter contains five associated fos. The checkItemValid parameter checks the item's validity, while inModel is used to decorate the result. IndexProtoAlg refers to the corresponding protoAlg, and fromRegroup indicates whether it's a normal recognition or derived from regrouping. MaskFo differentiates between parent and match layers, and matchAlgs contains the results of concept recognition for a specific frame. The protoOrRegroupCutIndex parameter identifies the progress of proto or regroup.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":268-287",
            "content": "//MARK:                     < \u65f6\u5e8f\u8bc6\u522b >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u65f6\u5e8f\u5c40\u90e8\u5339\u914d\u7b97\u6cd5--------------------\n *\n *  --------------------V1--------------------\n *  \u53c2\u8003: n17p7 TIR_FO\u6a21\u578b\u5230\u4ee3\u7801\n *  _param assFoIndexAlg    : \u7528\u6765\u8054\u60f3fo\u7684\u7d22\u5f15\u6982\u5ff5 (shortMem\u7684\u7b2c3\u5c42 \u6216 rethink\u7684\u7b2c1\u5c42) (match\u5c42,\u53c2\u8003n18p2)\n *  _param assFoBlock       : \u8054\u60f3fos (\u8054\u60f3\u6709\u6548\u76845\u4e2a)\n *  _param checkItemValid   : \u68c0\u67e5item(fo.alg)\u7684\u6709\u6548\u6027 notnull (\u53ef\u8003\u8651\u5199\u4e2aisBasedNode()\u5224\u65ad,\u56e0protoAlg\u53ef\u91cc\u6c0f\u66ff\u6362,\u76ee\u524d\u4ec5\u652f\u6301\u540e\u4e24\u5c42)\n *  @param inModel          : \u88c5\u9970\u7ed3\u679c\u5230inModel\u4e2d;\n *  _param indexProtoAlg    : assFoIndexAlg\u6240\u5bf9\u5e94\u7684protoAlg,\u7528\u6765\u5728\u4e0d\u660e\u786e\u65f6,\u7528\u5176\u72ec\u7279\u7a00\u758f\u7801\u6307\u5f15\u5411\u5177\u8c61\u65f6\u5e8f\u627e\"\u660e\u786e\"\u9884\u6d4b;\n *  _param fromRegroup      : \u8c03\u7528\u8005\n *                              1. \u6b63\u5e38\u8bc6\u522b\u65f6: cutIndex=lastAssIndex;\n *                              2. \u6e90\u81earegroup\u65f6: cutIndex\u9700\u4ece\u7236\u4efb\u52a1\u4e2d\u5224\u65ad (\u9ed8\u8ba4\u4e3a-1);\n *  _param maskFo           : \u8bc6\u522b\u65f6:protoFo\u4e2d\u7684\u6982\u5ff5\u5143\u7d20\u4e3aparent\u5c42, \u800c\u5728\u53cd\u601d\u65f6,\u5176\u5143\u7d20\u4e3amatch\u5c42;\n *  @param matchAlgs        : \u89e6\u53d1\u6b64\u8bc6\u522b\u65f6\u7684\u90a3\u4e00\u5e27\u7684\u6982\u5ff5\u8bc6\u522b\u7ed3\u679c (\u53c2\u800328103-2);\n *  @param protoOrRegroupCutIndex : proto\u6216regroup\u5f53\u524d\u5df2\u7ecf\u8fdb\u5c55\u5230\u54ea\u91cc,\u53d1\u8fdb\u6765cutIndex (proto\u65f6\u4e00\u822c\u662f\u5168\u5df2\u53d1\u751f);\n *  TODO_TEST_HERE:\u8c03\u8bd5Pointer\u80fd\u5426indexOfObject"
        },
        {
            "comment": "This code segment is related to a comparison-based recognition algorithm. It checks the order of connected nodes and matches them to determine the most likely concept. The algorithm has evolved from version 1.5 to version 2, with improvements in recognition rates. However, supporting multiple layers of abstract judgment is still under consideration.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":288-312",
            "content": " *  TODO_TEST_HERE:\u8c03\u8bd5\u4e0bitem_p\u5728indexOfObject\u4e2d,\u6709\u591a\u4e2a\u65f6,\u600e\u4e48\u529e;\n *  TODO_TEST_HERE:\u6d4b\u8bd5\u4e0bcPartMatchingThreshold\u914d\u7f6e\u503c\u662f\u5426\u5408\u7406;\n *  @desc1: \u5728\u7c7b\u6bd4\u4e2d,\u4ec5\u9488\u5bf9\u6700\u540e\u4e00\u4e2a\u5143\u7d20,\u4e0e\u524d\u9762\u5143\u7d20\u8fdb\u884c\u7c7b\u6bd4;\n *  @desc2: \u5185\u7c7b\u6bd4\u5927\u5c0f,\u5c06\u8981\u53d6\u6d88(\u7531\u5916\u7c7b\u6bd4\u53d6\u4ee3),\u6b64\u5904\u4e0d\u518d\u652f\u6301;\u800c\u5185\u7c7b\u6bd4\u6709\u65e0,\u6b64\u5904\u7406\u6027\u6982\u5ff5\u5168\u662f\"\u6709\";\n *  @desc:\n *      1. \u6839\u636e\u6700\u540e\u4e00\u4e2a\u8282\u70b9,\u53d6refPorts,\n *      2. \u5bf9\u5171\u540c\u5f15\u7528\u8005\u7684,\u987a\u5e8f,\u770b\u662f\u5426\u662f\u6b63\u786e\u7684\u4ece\u5de6\u5230\u53f3\u987a\u5e8f;\n *      3. \u80fd\u591f\u5339\u914d\u5230\u66f4\u591a\u4e2a\u6982\u5ff5\u8282\u70b9,\u8d8a\u9884\u6d4b\u51c6\u786e;\n *  TODO_FUTURE:\u5224\u65ad\u6982\u5ff5\u5339\u914d,\u76ee\u524d\u4ec5\u652f\u6301\u4e00\u5c42\u62bd\u8c61\u5224\u65ad,\u662f\u5426\u8981\u652f\u6301\u591a\u5c42?\u5b9e\u73b0\u65b9\u5f0f\u6bd4\u5982(\u7d22\u5f15 / TIRAlg\u548cTIRFo\u7684\u534f\u4f5c);\n *\n *  @version:\n *      20191231: \u6d4b\u8bd5\u5230,\u70b9\u51fb\u9965\u997f,\u518d\u70b9\u51fb\u4e71\u6295,\u8fd4\u56dematchFo:nil matchValue:0;\u6240\u4ee5\u9488\u5bf9\u6b64\u8bc6\u522b\u5931\u8d25\u95ee\u9898,\u53d1\u73b0\u4e86_fromShortMem\u548c_fromRethink\u7684\u4e0d\u540c,\u4e14\u652f\u6301\u4e86\u4e24\u5c42assFo,\u4e0e\u5168\u542b;(\u53c2\u8003:n18p2)\n *      20200627: \u652f\u6301\u660e\u786e\u4ef7\u503c\u9884\u6d4b & \u652f\u6301\u66f4\u5339\u914d\u7684\u65f6\u5e8f\u9884\u6d4b (\u53c2\u8003:20052);\n *      20200703: \u5e9f\u5f03\u660e\u786e\u4ef7\u503c\u9884\u6d4b\u529f\u80fd,\u56e0\u4e3a\u8ba4\u77e5\u671f\u8981\u5e7f\u5165,\u51b3\u7b56\u671f\u518d\u7ec6\u4fee (\u53c2\u800320063);\n *\n *  --------------------V1.5--------------------\n *  @desc\n *      1. \u7531v1\u6574\u7406\u800c\u6765,\u903b\u8f91\u4e0ev1\u4e00\u81f4 (\u5c06v1\u4e2dcheckItemValid\u548cassFoBlock\u56de\u8c03,\u76f4\u63a5\u5199\u5728\u65b9\u6cd5\u4e2d,\u800c\u4e0d\u7531\u5916\u754c\u4f20\u5165);\n *      2. \u65f6\u5e8f\u8bc6\u522bv1.5 (\u5728V1\u7684\u57fa\u7840\u4e0a\u6539\u7684,\u4e0eV2\u6700\u5927\u7684\u533a\u522b,\u662f\u5176\u672a\u6309\u7167\u7d22\u5f15\u8ba1\u6570\u6392\u5e8f);\n *\n *  @status \u542f\u7528,\u56e0\u4e3av2\u6309\u7167countDic\u6392\u5e8f\u7684\u65b9\u5f0f,\u4e0d\u5229\u4e8e\u627e\u51fa\u66f4\u786e\u5207\u7684\u62bd\u8c61\u7ed3\u679c;\n *\n *  --------------------v2--------------------\n *  @desc \u529f\u80fd\u8bf4\u660e:\n *      1. \u672c\u6b21v2\u8fed\u4ee3,\u4e3b\u8981\u5728\u8bc6\u522b\u7387\u4e0a\u8fdb\u884c\u6539\u8fdb,\u56e0\u4e3av1\u8bc6\u522b\u7387\u592a\u4f4e (\u53c2\u800320111),\u6240\u4ee5\u8fed\u4ee3\u4e86v2\u7248 (\u53c2\u800320112);"
        },
        {
            "comment": "This code block outlines the steps involved in executing a function, including indexing each element of the original time series (protoFo), creating references to other time series (protoAlg), and then performing a count judgement on the referenced time series to determine the result. The code also includes various version-specific modifications made over time.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":313-331",
            "content": " *      2. \u76ee\u524d\u5224\u65ad\u6709\u6548\u5f15\u7528,\u4e0d\u652f\u6301\"\u5fc5\u987b\u5305\u542b\u67d0protoAlg\" (\u4ee3\u7801\u7b2c5\u6b65),\u4ee5\u524d\u9700\u8981\u518d\u652f\u6301\u5373\u53ef;\n *  @desc \u6267\u884c\u6b65\u9aa4:\n *      1. \u539f\u59cb\u65f6\u5e8fprotoFo\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u7d22\u5f15;\n *      2. \u5bf9\u6bcf\u4e2a\u5143\u7d20protoAlg\u81ea\u8eab1\u6761 + \u62bd\u8c615\u6761 = \u51716\u6761\u505a\u7d22\u5f15;\n *      3. \u6839\u636e6\u6761\u53d6refPorts\u5f15\u7528\u65f6\u5e8f;\n *      4. \u5bf9\u6240\u6709\u5f15\u7528\u7684\u65f6\u5e8f,\u505a\u8ba1\u6570\u5224\u65ad,\u5f15\u7528\u4e86\u8d8a\u591a\u7684\u539f\u59cb\u5143\u7d20protoAlg,\u6392\u5728\u8d8a\u524d\u9762;\n *      5. \u4ece\u524d\u5f00\u59cb\u627e,\u627e\u51fa\u5f15\u7528\u5373\u591a,\u53c8\u5168\u542b\u7684\u7ed3\u679c\u8fd4\u56de;\n *  @version \u5019\u9009\u96c6\n *      2020.07.18: \u5c06\u6574\u4e2aallRef_2\u62cd\u5e73\u6210\u4e00\u7ef4\u6570\u7ec4,\u5e76\u53bb\u91cd (\u5373\u6240\u6709\u5e27\u7684refFos\u90fd\u7b97\u505a\u5019\u9009\u96c6);\n *      2020.07.19: \u6539\u4e3a\u4ec5\u53d6\u6700\u540e\u4e00\u4f4d\u7684refFos (\u56e0\u4e3a\u6700\u540e\u4e00\u4f4d\u662f\u7126\u70b9\u5e27,\u5e76\u4e14\u5168\u542b\u5224\u65ad\u7b97\u6cd5\u4e5f\u9700\u8981\u652f\u6301\u4ec5\u672b\u4f4d\u5019\u9009\u96c6);\n *      2020.11.12: \u652f\u6301except_ps\u53c2\u6570,\u56e0\u4e3a\u5728FromShortMem\u65f6,matchAFo\u4f1a\u8bc6\u522bprotoFo\u8fd4\u56de,\u6240\u4ee5\u5c06protoFo\u4e0d\u5e94\u671f\u6389 (\u53c2\u800321144);\n *      2021.01.18: \u8054\u60f3matchFo\u65f6,\u7531\u539f\u672c\u53ea\u83b7\u53d6Normal\u7c7b\u578b,\u6539\u4e3a\u5c06HNGL\u4e5f\u52a0\u5165\u5176\u4e2d (\u53c2\u800322052-1a,\u5b9e\u6d4b\u672a\u5f71\u54cd\u539f\u591a\u5411\u98de\u884c\u8bad\u7ec3);\n *      2021.01.23: \u652f\u6301\u591a\u8bc6\u522b (\u53c2\u800322072BUG & TIR_Fo_FromRethink\u6ce8\u91catodo\u66f4\u591a\u5143\u7684\u8bc4\u4ef7 & 22073-todo1);\n *      2021.01.24: \u6539\u56de\u4ec5\u8bc6\u522bNormal\u7c7b\u578b,\u56e0\u4e3aHNGL\u592a\u591a\u4e86,\u4e0d\u90a3\u4e48\u5fc5\u8981,\u8fd8\u7279\u9ebb\u70e6,\u592a\u591amatchFos\u5bfc\u81f4\u6027\u80fd\u5dee (\u53c2\u800322052-\u65391);\n *      2021.01.24: \u5c06\u65e0mv\u6307\u5411\u7684,\u7b97\u65e0\u6548 (\u56e0\u4e3a\u6709\u5927\u91cf\u672a\u6267\u884c\u7684\u6b63\u5411\u53cd\u9988\u7c7b\u6bd4) (\u53c2\u800322072);\n *      2021.01.26: \u4e3a\u591a\u65f6\u5e8f\u8bc6\u522b\u7ed3\u679c\u505a\u53bb\u91cd (\u53c2\u800322074-BUG3);\n *      2021.01.31: \u5c06\u65e0mv\u6307\u5411\u7684,\u653e\u5f00 (\u56e0\u4e3aR-\u6a21\u5f0f\u9700\u8981) (\u7b49\u652f\u6301\u53cd\u5411\u53cd\u9988\u5916\u7c7b\u6bd4\u540e,\u518d\u5173\u6389) (\u53c2\u8003n22p10);\n *      2021.02.03: \u53cd\u5411\u53cd\u9988\u5916\u7c7b\u6bd4\u5df2\u652f\u6301,\u5c06\u65e0mv\u6307\u5411\u7684\u5173\u6389 (\u53c2\u8003version\u4e0a\u6761);\n *      2021.02.04: \u5c06matchFos\u4e2d\u7684\u865amv\u7b5b\u9664\u6389,\u56e0\u4e3a\u73b0\u5728R-\u6a21\u5f0f\u4e0d\u4f7f\u7528matchFos\u505a\u89e3\u51b3\u65b9\u6848,\u73b0\u5728\u7559\u7740\u6ca1\u7528,\u7b49\u6709\u7528\u65f6\u518d\u6253\u5f00;"
        },
        {
            "comment": "This code has undergone several updates and modifications since April 2021. It initially separated support for matchRFos when there was no mv indication, renamed matchPFos for those with mv indication (referencing 23014-analysis 1 & 23016). In June 2021, it supported cutIndex callback and differentiated logic for identification and reflection (reference 23152).\n\nFrom August 2021, the code sorted result PFos and RFos based on strength multiplied by match rate. In January 2022, it only retained 10 bars of rFos and pFos because, during testing, they found too many (reference 23222-BUG2). However, this was changed in March 2022 to keep all results for different filtering needs (reference 25134-method 2).\n\nFrom April 2022, the assIndexes considered proto, matches, and parts during identification (reference 25234-1). From May 2022, only results with mv indication were recognized (reference 26022-3). The pFos sorting factor changed to negative absolute value, and RFos sorting was not influenced by reference strength (references 26073-TODO7, TODO8, and TODO9).\n\nFrom May 2022, the code aimed to enhance identification accuracy by narrowing results to 5, adjusting result count to NarrowLimit (reference 26073-TODO6). From May 2022, it filtered out recognition results with low stability (reference 26096-BUG4). In June 2022, it supported stability decay (reference 26104-method). The sorting formula changed to sumNear divided by nearCount in June 2022 (reference 26222-TODO1). Finally, from June 2022, RFos results were turned off with cRFoNarrowLimit set to 0 (reference 2619j-TODO3).",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":332-348",
            "content": " *      2021.04.15: \u65e0mv\u6307\u5411\u7684\u652f\u6301\u8fd4\u56de\u4e3amatchRFos,\u539f\u6765\u6709mv\u6307\u5411\u7684\u91cd\u547d\u540d\u4e3amatchPFos (\u53c2\u800323014-\u5206\u67901&23016);\n *      2021.06.30: \u652f\u6301cutIndex\u56de\u8c03,\u8bc6\u522b\u548c\u53cd\u601d\u65f6,\u5206\u522b\u8d70\u4e0d\u540c\u903b\u8f91 (\u53c2\u800323152);\n *      2021.08.19: \u7ed3\u679cPFos\u548cRFos\u6309(\u5f3a\u5ea6x\u5339\u914d\u5ea6)\u6392\u5e8f (\u53c2\u800323222-BUG2);\n *      2022.01.16: \u4ec5\u4fdd\u755910\u6761rFos\u548cpFos (\u56e0\u4e3a\u5728\u5341\u56db\u6d4b\u4e2d,\u53d1\u73b0\u5b83\u4eec\u592a\u591a\u4e86,\u90fd\u670940\u6761rFos\u7684\u65f6\u5019,\u4f9d\u7a84\u51fa\u539f\u5219,\u592a\u591a\u6ca1\u5fc5\u8981);\n *      2022.03.05: \u5c06\u4fdd\u755910\u6761\u6539\u4e3a\u5168\u4fdd\u7559,\u56e0\u4e3a\u4e0d\u540c\u8c03\u7528\u5904,\u9700\u8981\u4e0d\u540c\u7684\u7b5b\u9009\u6392\u5e8f\u65b9\u5f0f (\u53c2\u800325134-\u65b9\u68482);\n *      2022.03.09: \u5c06\u6392\u5e8f\u89c4\u5219\u7531\"\u5f3a\u5ea6x\u5339\u914d\u5ea6\",\u6539\u6210\u76f4\u63a5\u7531SP\u7efc\u5408\u8bc4\u5206\u6765\u505a (\u53c2\u800325142 & 25114-TODO2);\n *      2022.04.30: \u8bc6\u522b\u65f6assIndexes\u53d6proto+matchs+parts (\u53c2\u800325234-1);\n *      2022.05.12: \u4ec5\u8bc6\u522b\u6709mv\u6307\u5411\u7684\u7ed3\u679c (\u53c2\u800326022-3);\n *      2022.05.18: \u628apFo\u6392\u5e8f\u56e0\u5b50\u7531\u8bc4\u5206\u7edd\u5bf9\u503c,\u6539\u6210\u53d6\u8d1f,\u56e0\u4e3a\u6b63\u4ef7\u503c\u4e0d\u6784\u6210\u4efb\u52a1,\u6240\u4ee5\u628a\u5b83\u6392\u5230\u6700\u540e\u53bb;\n *      2022.05.20: 1. \u5e9f\u5f03\u4ec5\u8bc6\u522b\u6709mv\u6307\u5411\u7684 (\u53c2\u800326073-TODO7);\n *      2022.05.20: 2. RFos\u6392\u5e8f,\u4e0d\u53d7\u88ab\u5f15\u7528\u5f3a\u5ea6\u5f71\u54cd (\u53c2\u800326073-TODO9);\n *      2022.05.20: 3. prFos\u6392\u5e8f,\u4ee5SP\u7a33\u5b9a\u6027\u4e3a\u51c6 (\u53c2\u800326073-TODO8);\n *      2022.05.20: 4. \u63d0\u5347\u8bc6\u522b\u51c6\u786e\u5ea6: \u7a84\u5165,\u8c03\u6574\u7ed3\u679c20\u6761\u4e3aNarrowLimit=5\u6761 (\u53c2\u800326073-TODO6);\n *      2022.05.23: \u5c06\u7a33\u5b9a\u6027\u4f4e\u7684\u8bc6\u522b\u7ed3\u679c\u8fc7\u6ee4\u6389 (\u53c2\u800326096-BUG4);\n *      2022.05.24: \u7a33\u5b9a\u6027\u652f\u6301\u8870\u51cf (\u53c2\u800326104-\u65b9\u6848);\n *      2022.06.07: cRFoNarrowLimit\u8c03\u6574\u4e3a0,\u5373\u5173\u6389RFos\u7ed3\u679c (\u53c2\u80032619j-TODO3);\n *      2022.06.08: \u6392\u5e8f\u516c\u5f0f\u6539\u4e3asumNear / nearCount (\u53c2\u800326222-TODO1);"
        },
        {
            "comment": "This code contains several changes and improvements made to the code over time, focusing on enhancing abstractness, improving temporal recognition success rate, and adjusting parameters. The final status of this code is abandoned due to its inability to provide precise and comprehensive results.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":349-363",
            "content": " *      2022.11.10: \u56e0\u4e3a\u6700\u8fd1\u52a0\u5f3a\u4e86\u62bd\u5177\u8c61\u591a\u5c42\u591a\u6837\u6027,\u6240\u4ee5\u4ecematchAlgs+partAlgs\u53d6\u6539\u4e3a\u4ecelastAlg.absPorts\u53d6 (\u6548\u7528\u4e00\u6837);\n *      2022.11.10: \u65f6\u5e8f\u8bc6\u522b\u4e2dalg\u76f8\u4f3c\u5ea6\u590d\u7528-\u51c6\u5907\u90e8\u5206 & \u53c2\u6570\u8c03\u6574 (\u53c2\u800327175-5);\n *      2022.11.15: \u5bf9\u8bc6\u522b\u7ed3\u679c,\u76f4\u63a5\u6784\u5efa\u62bd\u5177\u8c61\u5173\u8054 (\u53c2\u800327177-todo6);\n *      2022.12.28: \u6c42\u51fa\u5339\u914d\u90e8\u5206\u7684\u7efc\u5408\u5f15\u7528\u5f3a\u5ea6\u503c,\u5e76\u53c2\u4e0e\u5230\u7efc\u5408\u7ade\u4e89\u4e2d (\u53c2\u80032722f-todo13&todo14);\n *      2022.12.29: \u65f6\u5e8f\u8bc6\u522b\u540e,\u589e\u5f3aindexDic\u5df2\u53d1\u751f\u90e8\u5206\u7684refStrong\u548ccontentStrong (\u53c2\u80032722f-todo32&todo33);\n *      2023.02.21: \u5e9f\u5f03\u6536\u96c6proto\u7684lastAlg\u5f53\u7d22\u5f15,\u56e0\u4e3a\u5b83\u53ea\u88abprotoFo\u4e00\u6761\u65f6\u5e8f\u5f15\u7528,\u6240\u4ee5\u5728\u65f6\u5e8f\u8bc6\u522b\u4e2d\u6ca1\u4ec0\u4e48\u7528 (\u53c2\u800328103-4\u53e6);\n *      2023.02.21: \u4f20\u5165\u89e6\u53d1\u5e27\u6982\u5ff5\u8bc6\u522b\u7ed3\u679cmatchAlgs\u7684\u524d10\u6761\u505a\u4e3a\u65f6\u5e8f\u8bc6\u522b\u7684\u7d22\u5f15 (\u53c2\u800328103-2);\n *      2023.02.24: \u63d0\u5347\u65f6\u5e8f\u8bc6\u522b\u6210\u529f\u7387: \u628a\u7d22\u5f15\u6539\u6210\u6240\u6709proto\u5e27\u7684\u62bd\u8c61alg (\u53c2\u800328107-todo1);\n *      2023.02.24: \u63d0\u5347\u65f6\u5e8f\u8bc6\u522b\u6210\u529f\u7387: \u5e9f\u5f03matchRFos (\u5176\u5b9e\u65e9\u5e9f\u5f03\u4e86,\u501f\u7740\u8fd9\u6b21\u6539,\u5f7b\u5e95\u6b64\u5904\u76f8\u5173\u4ee3\u7801\u5220\u6389);\n *      2023.02.24: \u63d0\u5347\u65f6\u5e8f\u8bc6\u522b\u6210\u529f\u7387: \u65f6\u5e8f\u7ed3\u679c\u4fdd\u755920% (\u53c2\u800328107-todo4);\n *      2023.03.15: \u6253\u5f00matchRFos (\u53c2\u800328181-\u65b9\u68483);\n *      2023.03.17: \u5173\u95edmatchRFos (\u53c2\u800328184-\u539f\u56e01&2);\n *      2023.07.11: \u884c\u4e3a\u5316\u53cd\u601d\u65f6,\u5c06regroupCutIndex\u4f20\u8fdb\u6765,\u5e76\u6839\u636e\u5b83\u8ba1\u7b97\u51faabsMatchFo\u7684cutIndex,\u907f\u514d\u56e0\u6b64\u800c\u8ba1\u7b97sp\u7387\u7b49\u4e0d\u51c6\u786e;\n *      2023.07.19: TC\u7ebf\u7a0b_\u56e0\u4e3a\u6570\u7ec4\u591a\u7ebf\u7a0b\u5bfc\u81f4,\u5bfc\u81f4foreach\u4e2d\u95ea\u9000\u95ee\u9898 (\u6539\u52a0\u4e0acopy);\n *  @status \u5e9f\u5f03,\u56e0\u4e3acountDic\u6392\u5e8f\u7684\u65b9\u5f0f,\u4e0d\u5229\u4e8e\u627e\u51fa\u66f4\u786e\u5207\u7684\u62bd\u8c61\u7ed3\u679c (\u8bc6\u522b\u4e0d\u6015\u4e22\u5931\u7ec6\u8282,\u5c31\u6015\u4e0d\u786e\u5207,\u4e0d\u5168\u542b);"
        },
        {
            "comment": "Prepares data for recognition by copying content_ps, iterating through each element, and indexing them. It searches nodes based on pointers, and separately indexes the refPorts of the absAlg nodes.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":364-380",
            "content": " */\n+(void) recognitionFo:(AIFoNodeBase*)protoOrRegroupFo except_ps:(NSArray*)except_ps decoratorInModel:(AIShortMatchModel*)inModel fromRegroup:(BOOL)fromRegroup matchAlgs:(NSArray*)matchAlgs protoOrRegroupCutIndex:(NSInteger)protoOrRegroupCutIndex debugMode:(BOOL)debugMode{\n    //1. \u6570\u636e\u51c6\u5907;\n    except_ps = ARRTOOK(except_ps);\n    NSMutableArray *protoPModels = [[NSMutableArray alloc] init];\n    NSMutableArray *protoRModels = [[NSMutableArray alloc] init];\n    //2. \u5e7f\u5165: \u5bf9\u6bcf\u4e2a\u5143\u7d20,\u5206\u522b\u53d6\u7d22\u5f15\u5e8f\u5217 (\u53c2\u800325083-1);\n    NSArray *protoOrRegroupContent_ps = [protoOrRegroupFo.content_ps copy];\n    for (AIKVPointer *proto_p in protoOrRegroupContent_ps) {\n        AIAlgNodeBase *protoAlg = [SMGUtils searchNode:proto_p];\n        //4. \u6bcf\u4e2aabs_p\u5206\u522b\u7d22\u5f15;\n        NSArray *protoAlgAbs_ps = ISOK(protoAlg, AICMVNodeBase.class) ? @[proto_p] : Ports2Pits([protoAlg.absPorts copy]);\n        for (AIKVPointer *absAlg_p in protoAlgAbs_ps) {\n            //6. \u7b2c2_\u53d6abs_p\u7684refPorts (\u53c2\u800328107-todo2);\n            AIAlgNodeBase *absAlg = [SMGUtils searchNode:absAlg_p];"
        },
        {
            "comment": "This code filters a list of reference ports, ensuring that only valid ones are included. It also checks if the port's parent is already in an exception list and performs operations on each reference port.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":381-404",
            "content": "            NSArray *refPorts = [[AINetUtils refPorts_All4Alg_Normal:absAlg] copy];\n            //6. RFo\u7684\u957f\u5ea6>1\u624d\u6709\u610f\u4e49 (\u53c2\u800328183-BUG1);\n            refPorts = [SMGUtils filterArr:refPorts checkValid:^BOOL(AIPort *item) {\n                if (Switch4RecognitionMatchRFos) {\n                    //a. \u6253\u5f00pFos\u548crFos;\n                    AIFoNodeBase *refFo = [SMGUtils searchNode:item.target_p];\n                    return item.targetHavMv || refFo.count > 1;\n                } else {\n                    //b. \u53ea\u6253\u5f00matchPFos;\n                    return item.targetHavMv;\n                }\n            }];\n            //7. \u6bcf\u4e2arefPort\u505a\u4e24\u4ef6\u4e8b:\n            for (AIPort *refPort in refPorts) {\n                //8. \u4e0d\u5e94\u671f -> \u4e0d\u53ef\u6fc0\u6d3b & \u6536\u96c6\u5230\u4e0d\u5e94\u671f\u540c\u4e00fo\u4ec5\u5904\u7406\u4e00\u6b21;\n                if ([SMGUtils containsSub_p:refPort.target_p parent_ps:except_ps]) continue;\n                except_ps = [SMGUtils collectArrA:except_ps arrB:@[refPort.target_p]];\n                //7. \u5168\u542b\u5224\u65ad;\n                AIFoNodeBase *refFo = [SMGUtils searchNode:refPort.target_p];\n            "
        },
        {
            "comment": "This code appears to be part of a larger system that utilizes AI for processing data. In this section, it is checking the validity of an index dictionary and then extracting relevant information from it such as cutIndex, nearCount, sumNear, and sumRefStrong. It also initializes a new instance of AIMatchFoModel with matchFo. The purpose or outcome of these operations within the larger context is not clear without further understanding of the surrounding code.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":404-419",
            "content": "    NSDictionary *indexDic = [self TIR_Fo_CheckFoValidMatchV2:refFo protoOrRegroupFo:protoOrRegroupFo fromRegroup:fromRegroup];\n                if (!DICISOK(indexDic)) continue;\n                //7. \u53d6absCutIndex, \u8bf4\u660e: cutIndex\u6307\u5df2\u53d1\u751f\u5230\u7684index,\u540e\u9762\u5219\u4e3a\u65f6\u5e8f\u9884\u6d4b; matchValue\u6307\u5339\u914d\u5ea6(0-1)\n                NSInteger cutIndex = [AINetUtils getCutIndexByIndexDicV2:indexDic protoOrRegroupCutIndex:protoOrRegroupCutIndex];\n                //7. \u6839\u636eindexDic\u53d6nearCount & sumNear;\n                NSArray *nearData = [AINetUtils getNearDataByIndexDic:indexDic absFo:refFo.pointer conFo:protoOrRegroupFo.pointer callerIsAbs:false];\n                int nearCount = NUMTOOK(ARR_INDEX(nearData, 0)).intValue;\n                CGFloat sumNear = NUMTOOK(ARR_INDEX(nearData, 1)).floatValue;\n                //8. \u88ab\u5f15\u7528\u5f3a\u5ea6;\n                NSInteger sumRefStrong = [AINetUtils getSumRefStrongByIndexDic:indexDic matchFo:refFo.pointer];\n                //7. \u5b9e\u4f8b\u5316\u8bc6\u522b\u7ed3\u679cAIMatchFoModel;\n                AIMatchFoModel *newMatchFo = [AIMatchFoModel newWithMatchFo"
        },
        {
            "comment": "This code collects matched prototype models into two arrays, one for strong matches (protoPModels) and one for weak matches (protoRModels). It then filters the models based on strength and sorts them by a combination of strength and matching degree. The filtered and sorted results are stored in inModel's matchPFos array.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":419-439",
            "content": ":refFo.pointer protoOrRegroupFo:protoOrRegroupFo.pointer sumNear:sumNear nearCount:nearCount indexDic:indexDic cutIndex:cutIndex sumRefStrong:sumRefStrong baseFrameModel:inModel];\n                if (Log4MFo) NSLog(@\"\u65f6\u5e8f\u8bc6\u522bitemSUCCESS \u5339\u914d\u5ea6:%f %@->%@\",newMatchFo.matchFoValue,Fo2FStr(refFo),Mvp2Str(refFo.cmvNode_p));\n                //9. \u6536\u96c6\u5230pFos/rFos;\n                if (refFo.cmvNode_p) {\n                    [protoPModels addObject:newMatchFo];\n                } else {\n                    [protoRModels addObject:newMatchFo];\n                }\n            }\n        }\n    }\n    //10. \u8fc7\u6ee4\u5f3a\u5ea6\u524d20% (\u53c2\u800328111-todo1);\n    NSArray *filterPModels = [AIFilter recognitionFoFilter:protoPModels];\n    NSArray *filterRModels = [AIFilter recognitionFoFilter:protoRModels];\n    //10. \u6309\u7167 (\u5f3a\u5ea6x\u5339\u914d\u5ea6) \u6392\u5e8f,\u5f3a\u5ea6\u6700\u91cd\u8981,\u5305\u542b\u4e86\u4ef7\u503c\u521d\u59cb\u548c\u4f7f\u7528\u9891\u7387,\u5176\u6b21\u5339\u914d\u5ea6\u4e5f\u91cd\u8981 (\u53c2\u800323222-BUG2);\n    NSArray *sortPs = [AIRank recognitionFoRank:filterPModels];\n    NSArray *sortRs = [AIRank recognitionFoRank:filterRModels];\n    inModel.matchPFos = [[NSMutableArray alloc] initWithArray:sortPs];"
        },
        {
            "comment": "The code snippet is related to ASR (Automatic Speech Recognition) model for temporal speech recognition. It collects the match results from both P and R models, logs them, and associates the abstracted protoFo with the corresponding matchFo while strengthening the reference sequence and content of the indexDic. This helps improve the accuracy and performance of the ASR system.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":440-457",
            "content": "    inModel.matchRFos = [[NSMutableArray alloc] initWithArray:sortRs];\n    //11. \u8c03\u8bd5\u65e5\u5fd7;\n    NSArray *allMatchFos = [[SMGUtils collectArrA:inModel.matchPFos arrB:inModel.matchRFos] copy];\n    NSLog(@\"\\n\u65f6\u5e8f\u8bc6\u522b\u7ed3\u679c P(%ld\u6761) R(%ld\u6761)\",inModel.matchPFos.count,inModel.matchRFos.count);\n    if (debugMode) {\n        for (AIMatchFoModel *item in allMatchFos) {\n            AIFoNodeBase *matchFo = [SMGUtils searchNode:item.matchFo];\n            NSLog(@\"%@\u5f3a\u5ea6:(%ld)\\t> %@->{%.2f} (SP:%@) indexDic:%@ \u5339\u914d\u5ea6 => %.2f\",matchFo.cmvNode_p?@\"P\":@\"\",item.sumRefStrong,Fo2FStr(matchFo),[AIScore score4MV_v2FromCache:item],CLEANSTR(matchFo.spDic),CLEANSTR(item.indexDic2),item.matchFoValue);\n        }\n    }\n    //12. \u5173\u8054\u5904\u7406,\u76f4\u63a5protoFo\u62bd\u8c61\u6307\u5411matchFo,\u5e76\u6301\u4e45\u5316indexDic (\u53c2\u800327177-todo6);\n    for (AIMatchFoModel *item in allMatchFos) {\n        //4. \u8bc6\u522b\u5230\u65f6,refPorts -> \u66f4\u65b0/\u52a0\u5f3a\u5fae\u4fe1\u606f\u7684\u5f15\u7528\u5e8f\u5217\n        AIFoNodeBase *matchFo = [SMGUtils searchNode:item.matchFo];\n        [AINetUtils updateRefStrongByIndexDic:item.indexDic2 matchFo:item.matchFo];\n        [AINetUtils updateContentStrongByIndexDic:item.indexDic2 matchFo:item.matchFo];"
        },
        {
            "comment": "This code section is responsible for matching a \"protoFo\" with an \"assFo\" and determining if the \"protoFo\" fully contains the \"assFo\". It does this by checking if the last frame of the \"assFo\" is found in the \"protoFo\" and if all frames before the cut point are matched. If successful, it strengthens the link between the matched \"protoFo\" and \"matchAlg\". This code has gone through multiple updates and improvements since its initial implementation.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":459-482",
            "content": "        //5. \u5b58\u50a8matchFo\u4e0eprotoFo\u4e4b\u95f4\u7684indexDic\u6620\u5c04 (\u53c2\u800327177-todo5);\n        [protoOrRegroupFo updateIndexDic:matchFo indexDic:item.indexDic2];\n        //6. \u5bf9proto\u76f4\u63a5\u62bd\u8c61\u6307\u5411matchAlg,\u5e76\u589e\u5f3a\u5f3a\u5ea6\u503c (\u4e3a\u4fdd\u8bc1\u62bd\u8c61\u591a\u6837\u6027,\u6240\u4ee5\u76f8\u8fd1\u7684\u4e5f\u62bd\u5177\u8c61\u5173\u8054) (\u53c2\u800327153-3);\n        [AINetUtils relateFoAbs:matchFo conNodes:@[protoOrRegroupFo] isNew:false];\n    }\n}\n/**\n *  MARK:--------------------\u65f6\u5e8f\u8bc6\u522b\u4e4b: protoFo&assFo\u5339\u914d\u5224\u65ad--------------------\n *  \u8981\u6c42: protoFo\u5fc5\u987b\u5168\u542bassFo\u5bf9\u5e94\u7684last\u5339\u914d\u4e0b\u6807\u4e4b\u524d\u7684\u6240\u6709\u5143\u7d20,\u5373:\n *       1. proto\u7684\u672b\u5e27,\u5fc5\u987b\u5728assFo\u4e2d\u627e\u5230 (\u5e76\u8bb0\u5f55\u627e\u5230\u7684assIndex\u4e3acutIndex\u622a\u70b9);\n *       2. assFo\u5728cutIndex\u622a\u70b9\u524d\u7684\u90e8\u5206,\u5fc5\u987b\u5728protoFo\u4e2d\u627e\u5230 (\u627e\u5230\u5373\u5168\u542b,\u5426\u5219\u4e3a\u6574\u4f53\u5931\u8d25);\n *  \u4f8b\u5982: \u5982: protFo:[abcde] \u5168\u542b assFo:[acefg]\n *  \u540d\u8bcd\u8bf4\u660e:\n *      1. \u5168\u542b: \u6307\u4ecelastAssIndex\u5411\u524d,\u6240\u6709\u7684assItemAlg\u90fd\u5339\u914d\u6210\u529f;\n *      2. \u975e\u5168\u542b: \u6307\u4ecelastAssIndex\u5411\u524d,\u53ea\u8981\u6709\u4e00\u4e2aassItemAlg\u5339\u914d\u5931\u8d25,\u5219\u975e\u5168\u542b;\n *  _param outOfFos : \u7528\u4e8e\u8ba1\u7b97\u8870\u51cf\u503c; (\u672a\u77e5\u4f55\u65f6\u5df2\u5e9f\u5f03)\n *  @version\n *      2022.04.30: \u5c06\u6bcf\u5e27\u7684matchAlgs\u548cpartAlgs\u7528\u4e8e\u5168\u542b\u5224\u65ad,\u800c\u4e0d\u662f\u5355\u7eaf\u7528protoFo\u6765\u5224\u65ad (\u53c2\u800325234-6);\n *      2022.05.23: \u53cd\u601d\u65f6,\u6539\u56de\u65e7\u6709mIsC\u5224\u65ad\u65b9\u5f0f (\u53c2\u800326096-BUG6);\n *      2022.05.25: \u5c06\u8870\u540e\u7a33\u5b9a\u6027\u8ba1\u7b97\u96c6\u6210\u5230\u5168\u542b\u5224\u65ad\u65b9\u6cd5\u4e2d (\u8fd9\u6837\u6027\u80fd\u597d\u4e9b);\n *      2022.06.08: \u7a33\u5b9a\u6027\u4f4e\u7684\u4e0d\u8fc7\u6ee4\u4e86,\u56e0\u4e3a\u5b66\u65f6\u7edf\u8ba1,\u4e0d\u5173\u7a33\u5b9a\u6027(\u6982\u7387)\u7684\u4e8b\u513f (\u53c2\u800326222-TODO1);\n *      2022.06.08: \u6392\u5e8f\u516c\u5f0f\u6539\u4e3asumNear / nearCount (\u53c2\u800326222-TODO1);"
        },
        {
            "comment": "This code snippet is responsible for checking if a given \"assFo\" (audio speech frame object) is fully contained within the \"protoOrRegroupFo\" (prototype or regrouped audio speech frame object). It performs this check by creating an index dictionary that maps each \"assIndex\" to its corresponding \"protoIndex\". The code also considers special cases such as whether it should require the last frame of a normal protoFo to be contained or not, and returns an empty dictionary if the check fails. The logging is used for debugging purposes.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":483-497",
            "content": " *      2022.09.15: \u4fee\u590dindexDic\u6536\u96c6\u7684KV\u53cd\u4e86\u7684BUG (\u4e0epFo.indexDic\u7684\u5b9a\u4e49\u4e0d\u7b26);\n *      2022.11.10: \u590d\u7528alg\u76f8\u4f3c\u5ea6,\u4e14\u539f\u672c\u6bd4\u5bf9\u76f8\u4f3c\u5ea6\u7684\u6027\u80fd\u95ee\u9898\u81ea\u7136\u4e5fok\u4e86 (\u53c2\u800327175-5);\n *      2022.11.11: \u5168\u6539\u56de\u7528mIsC\u5224\u65ad,\u56e0\u4e3a\u7b49\u6548 (matchAlgs\u5168\u662fprotoAlg\u7684\u62bd\u8c61,\u4e14mIsC\u662f\u6709\u7f13\u5b58\u7684,\u65e0\u6027\u80fd\u95ee\u9898),\u4e14\u5168\u7528mIsC\u540e\u4ee3\u7801\u66f4\u7cbe\u7b80;\n *      2022.11.11: \u5c06\u627e\u672b\u4f4d,\u548c\u627e\u5168\u542b\u4e24\u4e2a\u90e8\u5206,\u5408\u800c\u4e3a\u4e00,\u4f7f\u7b97\u6cd5\u4ee3\u7801\u66f4\u7cbe\u7b80\u6613\u8bfb (\u53c2\u800327175-7);\n *      2022.11.11: BUG_indexDic\u4e2d\u6709\u91cd\u590d\u7684Value (\u4e00\u4e2aprotoA\u5bf9\u5e94\u591a\u4e2aassA): \u5c06nextMaxForProtoIndex\u6539\u4e3aprotoIndex-1\u540eok (\u53c2\u800327175-8);\n *      2022.11.13: \u8fed\u4ee3V2: \u4ec5\u8fd4\u56deindexDic (\u53c2\u800327177);\n *      2023.07.11: \u4ec5\u666e\u901a\u6b63\u5411protoFo\u65f6\u5e8f\u8bc6\u522b\u65f6,\u624d\u8981\u6c42\u672b\u5e27\u5fc5\u542b,regroup\u5219\u4e0d\u5fc5\u5982\u6b64 (\u53c2\u800330057-\u4fee\u590d);\n *  @result \u5224\u65adprotoFo\u662f\u5426\u5168\u542bassFo: \u6210\u529f\u65f6\u8fd4\u56deindexDic / \u5931\u8d25\u65f6\u8fd4\u56de\u7a7adic;\n */\n+(NSDictionary*) TIR_Fo_CheckFoValidMatchV2:(AIFoNodeBase*)assFo protoOrRegroupFo:(AIFoNodeBase*)protoOrRegroupFo fromRegroup:(BOOL)fromRegroup {\n    if (Log4MFo) NSLog(@\"------------------------ \u65f6\u5e8f\u5168\u542b\u68c0\u67e5 ------------------------\\nass:%@->%@\",Fo2FStr(assFo),Mvp2Str(assFo.cmvNode_p));\n    //1. \u6570\u636e\u51c6\u5907;\n    NSMutableDictionary *indexDic = [[NSMutableDictionary alloc] init]; //\u8bb0\u5f55protoIndex\u548cassIndex\u7684\u6620\u5c04\u5b57\u5178 <K:assIndex, V:protoIndex>;\n    //3. \u7528\u4e8e\u627e\u7740\u65f6:\u8bb0\u5f55\u4e0b\u8fdb\u5ea6,\u4e0b\u6b21\u5faa\u73af\u65f6,\u8fd9\u4e2a\u8fdb\u5ea6\u5df2\u5904\u7406\u8fc7\u7684\u4e0d\u518d\u5904\u7406;"
        },
        {
            "comment": "This code is iterating over two arrays of algorithms in reverse order to find matches. It checks if each algorithm in the second array \"matches\" with any algorithm in the first array based on a given condition (mIsC). If a match is found, it updates the nextMaxForProtoIndex and sets itemSuccess as true. It also records the indexDic mapping. The Log4MFo is used to log a message when an item is considered valid.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":498-522",
            "content": "    NSInteger nextMaxForProtoIndex = protoOrRegroupFo.count - 1;\n    //4. \u4ece\u540e\u5411\u524d\u5012\u7740\u4e00\u5e27\u5e27,\u627eassFo\u7684\u5143\u7d20,\u8981\u6c42\u5982\u4e0b:\n    for (NSInteger assIndex = assFo.count - 1; assIndex >= 0; assIndex--) {\n        AIKVPointer *assAlg_p = ARR_INDEX(assFo.content_ps, assIndex);\n        BOOL itemSuccess = false;\n        for (NSInteger protoIndex = nextMaxForProtoIndex; protoIndex >= 0; protoIndex--) {\n            //5. mIsC\u5224\u65ad\u5339\u914d\n            //\u6b64\u5904proto\u62bd\u8c61\u4ec5\u6307\u5411\u521a\u8bc6\u522b\u7684matchAlgs,\u6240\u4ee5\u4e0econtains\u7b49\u6548;\n            AIKVPointer *protoAlg_p = ARR_INDEX(protoOrRegroupFo.content_ps, protoIndex);\n            BOOL mIsC = [TOUtils mIsC_1:protoAlg_p c:assAlg_p];\n            if (mIsC) {\n                //7. \u5339\u914d\u65f6_\u8bb0\u5f55\u4e0b\u6b21\u5faa\u73afproto\u65f6,\u4ece\u54ea\u5e27\u5f00\u59cb\u5012\u5e8f\u5faa\u73af: nextMaxForProtoIndex\u8fdb\u5ea6\n                nextMaxForProtoIndex = protoIndex - 1;\n                //8. \u5339\u914d\u65f6_\u8bb0\u5f55\u672c\u6761\u6210\u529f\u6807\u8bb0;\n                itemSuccess = true;\n                //9. \u5339\u914d\u65f6_\u8bb0\u5f55indexDic\u6620\u5c04\n                [indexDic setObject:@(protoIndex) forKey:@(assIndex)];\n                if (Log4MFo)NSLog(@\"\u65f6\u5e8f\u8bc6\u522b: item\u6709\u6548+1\");\n                break;\n            } else {"
        },
        {
            "comment": "This code snippet is a part of the AIThinkingControl module in the AIFoundation framework. It contains functions for recognizing and analyzing Canset concepts within specific scenes. The first function checks if an item is successfully found in the proto sequence and returns a dictionary with success indexes or an empty dictionary on failure. The second part marks this function as deprecated, indicating it should not be used anymore.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":523-552",
            "content": "                //11. proto\u7684\u672b\u5e27\u5fc5\u987b\u627e\u5230,\u6240\u4ee5\u4e0d\u5339\u914d\u65f6,\u76f4\u63a5break,\u7ee7\u7eedass\u5faa\u73af\u627e\u5b83... (\u53c2\u8003: \u6ce8\u91ca\u8981\u6c421);\n                if (!fromRegroup && protoIndex == protoOrRegroupFo.count - 1) break;\n            }\n        }\n        //12. \u975e\u5168\u542b (\u4e00\u4e2a\u5931\u8d25,\u5168\u76d8\u7686\u8f93);\n        if (!itemSuccess) {\n            if (Log4MFo) NSLog(@\"\u672b\u5e27\u65f6,\u627e\u4e0d\u7740\u5219\u8054\u60f3\u65f6\u5c31:\u6709BUG === \u975e\u672b\u5e27\u65f6,\u5219ass\u672a\u5728proto\u4e2d\u627e\u5230:\u975e\u5168\u542b\");\n            return [NSMutableDictionary new];\n        }\n    }\n    //13. \u5230\u6b64\u5168\u542b\u6210\u529f: \u8fd4\u56desuccess\n    return indexDic;\n}\n//MARK:===============================================================\n//MARK:                     < Canset\u8bc6\u522b >\n//MARK:===============================================================\n/**\n *  MARK:--------------------Canset\u6982\u5ff5\u8bc6\u522b--------------------\n *  @desc Canset\u573a\u666f\u5185\u6982\u5ff5\u8bc6\u522b\u7b97\u6cd5 (\u53c2\u80033014a-\u65b9\u6848 & 3014b);\n *  @param sceneFo : \u5f53\u524dcanset\u6240\u5728\u7684sceneFo (cansetAlg\u8bc6\u522b\u662f\u8981\u9650\u5b9a\u4e8e\u573a\u666f\u5185\u7684,sceneFo\u5c31\u662f\u8fd9\u4e2a\u573a\u666f);\n *  @version\n *      2023.10.26: \u5e9f\u5f03 (\u53c2\u80033014a-\u8ffd\u52a0\u7ed3\u679c);\n */\n//+(void) recognitionCansetAlg:(AIAlgNodeBase*)protoAlg sceneFo:(AIFoNodeBase*)sceneFo inModel:(AIShortMatchModel*)inModel {\n//    //1. \u5173\u4e8e\u8c03\u7528\u8005:\n//    //  a. \u54ea\u91cc\u5728\u8c03\u7528cansetFo\u8bc6\u522b,\u54ea\u91cc\u5c31\u5728fo\u8bc6\u522b\u524d\u5148\u8c03\u7528\u4e0b\u8fd9\u4e2a;"
        },
        {
            "comment": "This code contains the logic for Canset serial recognition. It supports newCanset, feedback, and transfer scenarios. NewCanset triggers a Canset recognition, increasing Eff and potentially Effect (based on validity). Feedback triggers a Canset recognition without type comparison. Transfer triggers a Canset recognition with type comparison but does not affect Eff or Effect. The code has undergone several updates for improvements and bug fixes.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":553-573",
            "content": "//    //  b. \u6216\u8005\u518d\u63d0\u524d\u70b9,\u8c03\u7528\u666e\u901aalg\u8bc6\u522b\u65f6,\u7ed3\u5408\u4e0b\u5de5\u4f5c\u8bb0\u5fc6,\u987a\u5e26\u628a\u8fd9\u4e2a\u4e5f\u8dd1\u4e86;\n//}\n/**\n *  MARK:--------------------Canset\u65f6\u5e8f\u8bc6\u522b--------------------\n *  @desc \u529f\u80fd\u8bf4\u660e:\n *          1. \u8bc6\u522b: \u7528\u6761\u4ef6\u6ee1\u8db3\u6765\u5b9e\u73b0\u7c7b\u4f3c\u5168\u542b\u5224\u65ad\u529f\u80fd (\u53c2\u800328185-todo3);\n *          2. \u589e\u5f3a: \u8bc6\u522b\u7ed3\u679c\u589e\u5f3asp\u548ceff (\u53c2\u800328185-todo4);\n *        \u73b0\u72b6\u8bf4\u660e:\n *          \u8c03\u7528\u80051. newCanset\u6709\u6548\u65f6,\u4f1a\u8c03\u7528canset\u8bc6\u522b,\u7c7b\u6bd4,sp+1,eff+1;\n *          \u8c03\u7528\u80052. \u53cd\u9988canset\u65e0\u6548\u65f6,\u4f1a\u8c03\u7528canset\u8bc6\u522b,\u4e0d\u7c7b\u6bd4,sp+1,eff-1;\n *          \u8c03\u7528\u80053. \u8fc1\u79fb\u65f6,\u4f1a\u8c03\u7528canset\u8bc6\u522b,\u7c7b\u6bd4,sp+0,eff+0;\n *          \u6ce8: \u53cd\u9988\u65e0\u6548\u65f6,sp\u4e5f\u4f1a+1\u7684\u4ee3\u7801\u662f\u4ee5\u524d\u7684,\u6b64\u5904\u672a\u6539,\u4f46\u5b83\u662f\u5426\u5408\u7406,\u5f85\u6d4b\u51fa\u4e0d\u5408\u7406\u65f6\u518d\u6765\u6539\u6b63;\n *  @version\n *      2023.03.18: \u5931\u8d25\u65f6,\u4e5f\u8c03\u7528Canset\u8bc6\u522b,\u5e76\u5c06es\u8ba1\u8d1f\u5206 (\u53c2\u800328185-todo5);\n *      2023.03.30: \u652f\u6301\u8fc7\u6ee4\u5668 (\u53c2\u800329042);\n *      2023.04.04: \u5c06Canset\u8fc7\u6ee4\u5668\u6539\u4e3a\u6839\u636eindexDic\u6620\u5c04\u6570\u6765 (\u53c2\u800329055);\n *      2023.04.07: \u56e0\u4e3a\u6027\u80fd\u539f\u56e0,\u5e76\u4e14newCanset\u65f6\u5c31\u8bc6\u522b\u7c7b\u6bd4\u7684\u610f\u4e49\u4e5f\u6ca1\u627e\u7740,\u6240\u4ee5\u5173\u95edCanset\u8bc6\u522b (\u540e\u9762\u4f1a\u6539\u4e3a\u5728\u8fc1\u79fb\u65f6\u8fdb\u884c\u61d2\u8bc6\u522b\u7c7b\u6bd4) (\u53c2\u800329059-\u6539\u52a8 & 29067-todo2);\n *      2023.04.19: TCTransfer\u8fc1\u79fb\u540e\u8c03\u7528Canset\u8bc6\u522b\u7c7b\u6bd4,\u4f46\u4e0d\u5bf9SPEFF+1 (\u53c2\u800329069-todo12 & todo12.1);\n *      2023.09.01: \u56e0\u4e3a\u573a\u666f\u5355\u4e00\u65f6\u4e0d\u4f1a\u89e6\u53d1transfer\u5bfc\u81f4canset\u8bc6\u522b\u7c7b\u6bd4\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f,\u6240\u4ee5\u6539\u56denewCanset\u65f6\u5373\u523b\u89e6\u53d1canset\u8bc6\u522b\u7c7b\u6bd4 (\u53c2\u800330124-\u539f\u5219&todo1);\n *      2023.09.01: newCanset\u89e6\u53d1\u65f6,EFF\u6839\u636e\"\u6709\u6548\u6216\u65e0\u6548\",\u66f4\u65b0+-1,TCTransfer\u89e6\u53d1\u65f6EFF\u4e0d\u53d8 (\u53c2\u800330124-todo2&todo3);"
        },
        {
            "comment": "Function to perform canset recognition with parameter for the new canset, scene Fo, and effect status. Disables canset recognition as of 2023.10.26. Takes old cansets from sceneFo, logs details, and initializes a matchModels array. Skips self-recognition.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":574-594",
            "content": " *      2023.10.23: \u5173\u95edcanset\u8bc6\u522b\u548c\u7c7b\u6bd4 (\u53c2\u80033014b-\u65b9\u68485 & 3014c-todo2);\n *      2023.10.26: \u5e9f\u5f03canset\u8bc6\u522b (\u53c2\u80033014c-todo2);\n */\n//+(void) recognitionCansetFo:(AIKVPointer*)newCanset_p sceneFo:(AIKVPointer*)sceneFo_p es:(EffectStatus)es {\n//    if (!Switch4RecognitionCansetFo) return;\n//    //1. \u53d6\u51fa\u65e7\u6709\u5019\u9009\u96c6;\n//    AIFoNodeBase *newCanset = [SMGUtils searchNode:newCanset_p];\n//    AIFoNodeBase *sceneFo = [SMGUtils searchNode:sceneFo_p];\n//\n//    //TODO20231003: \u6b64\u5904\u4e3ahCanset\u65f6: (\u56e0canset\u8bc6\u522b\u88ab\u5173\u95ed,\u6b64todo\u5148\u4e0d\u505a)\n//    //1. \u53d6oldCanset\u7528\u7684index\u5e94\u8be5\u4e0d\u540c (\u968f\u540e\u505a\u4e0b\u5904\u7406);\n//    //2. \u6253\u65e5\u5fd7\u65f6,\u628a\u5f53\u524d\u662frCanset\u8fd8\u662fhCanset\u6253\u51fa\u6765,\u4ee5\u4fbf\u8c03\u8bd5canset\u7684\u7ade\u4e89\u6210\u957f\u76f8\u5173;\n//\n//    NSArray *oldCansets = [sceneFo getConCansets:sceneFo.count];\n//    NSLog(@\"\\n----------- Canset\u8bc6\u522b (EFF:%@ \u5019\u9009\u6570:%ld) -----------\\nnewCanset:%@\\nsceneFo:%@\",EffectStatus2Str(es),oldCansets.count,Fo2FStr(newCanset),Fo2FStr(sceneFo));\n//    NSMutableArray *matchModels = [[NSMutableArray alloc] init];\n//\n//    //2. \u65e7\u6709\u5019\u9009\u96c6: \u4f5c\u4e3a\u8bc6\u522b\u6c60;\n//    for (AIKVPointer *oldCanset in oldCansets) {\n//        //3. \u4e0d\u5e94\u671f (\u4e0d\u8bc6\u522b\u81ea\u8eab);\n//        if ([newCanset.pointer isEqual:oldCanset]) continue;"
        },
        {
            "comment": "This code is performing canset recognition and filtering. It searches for a node, checks if newCanset contains it, collects the results in matchModels, filters using AIFilter, logs the result with the count of filtered models, and then performs post-recognition processing on each filtered model by comparing the full containment and non-invalid newCanset.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":595-617",
            "content": "//        AIFoNodeBase *oldCansetFo = [SMGUtils searchNode:oldCanset];\n//\n//        //4. \u5224\u65adnewCanset\u5168\u542bcansetFo (\u8fd4\u56de\u5168\u542bindexDic) (\u53c2\u800329025-23c);\n//        NSDictionary *indexDic = [self checkFoValidMatch_NewCanset:newCanset oldCanset:oldCansetFo sceneFo:sceneFo];\n//        if (!DICISOK(indexDic)) continue;\n//\n//        //5. \u6536\u96c6;\n//        [matchModels addObject:[AIMatchCansetModel newWithMatchFo:oldCansetFo indexDic:indexDic]];\n//    }\n//\n//    //6. AIFilter\u8fc7\u6ee4 (\u53c2\u800329042);\n//    NSArray *filterModels = [AIFilter recognitionCansetFilter:matchModels sceneFo:sceneFo];\n//\n//    //7. \u65e5\u5fd7\n//    NSLog(@\"\\nCanset\u8bc6\u522b\u7ed3\u679c: %ld\u6761\",filterModels.count);\n//    for (AIMatchCansetModel *model in filterModels) {\n//        AIEffectStrong *eff = [sceneFo getEffectStrong:model.matchFo.count solutionFo:model.matchFo.pointer];\n//        NSLog(@\"-->>> %@ SP:%@ EFF:%@\",Fo2FStr(model.matchFo),CLEANSTR(model.matchFo.spDic),CLEANSTR(eff));\n//    }\n//\n//    //8. \u8bc6\u522b\u540e\u5904\u7406: \u5916\u7c7b\u6bd4 & \u589e\u5f3aSP & \u589e\u5f3aEFF;\n//    for (AIMatchCansetModel *model in filterModels) {\n//        //9. \u53ea\u8981\u5168\u542b & \u975e\u65e0\u6548newCanset => \u5bf9\u4e8c\u8005\u8fdb\u884c\u5916\u7c7b\u6bd4 (\u53c2\u800329025-24 & 29027-\u65b9\u68483);"
        },
        {
            "comment": "This code snippet is for updating the recognition result based on a specific es value. If es is not equal to ES_Default, it updates the strong and end values of the matchFo object and the effect strength and solutionFo of the sceneFo object. The code also defines a method called checkFoValidMatch_NewCanset that checks if newCanset contains oldCanset and returns a dictionary with the indexDic values if it is a full containment match.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":618-640",
            "content": "//        if (es != ES_NoEff) {\n//            [AIAnalogy analogyCansetFo:model.indexDic newCanset:newCanset oldCanset:model.matchFo sceneFo:sceneFo es:es];\n//        }\n//\n//        //10. \u6761\u4ef6\u6ee1\u8db3\u7684\u90fd\u7b97\u8bc6\u522b\u7ed3\u679c (\u66f4\u65b0sp\u548ceff) (\u53c2\u800328185-todo4);\n//        if (es != ES_Default) {\n//            [model.matchFo updateSPStrong:0 end:model.matchFo.count - 1 type:ATPlus];\n//            [sceneFo updateEffectStrong:sceneFo.count solutionFo:model.matchFo.pointer status:es];\n//        }\n//    }\n//}\n/**\n *  MARK:--------------------Canset\u7684\u5168\u542b\u5224\u65ad (\u53c2\u800329025-23)--------------------\n *  @desc \u5168\u542b\u8bf4\u660e: \u8981\u6c42newCanset\u5305\u542boldCanset,\u624d\u8fd4\u56de\u80af\u5b9a\u7ed3\u679c; \n *          \u793a\u4f8b: \u6bd4\u5982:\u65b0[1,3,5,7,9a]\u548c\u65e7[1,5,9b]\u548c\u573a\u666f[1,5] = \u662f\u5168\u542b\u7684,\u5e76\u6700\u7ec8\u8fd4\u56de<1:1, 2:3, 3:5>; //\u5176\u4e2d9a\u548c9b\u6709\u5171\u540c\u62bd\u8c61\n *  @version\n *      2023.04.10: \u573a\u666f\u5305\u542b\u5e27\u5224\u65ad\u5168\u542b\u65f6,\u6539\u7528mIsC\u800c\u4e0d\u662f\u7edd\u5bf9\u540c\u4e00\u4e2a\u8282\u70b9 (\u56e0\u4e3a\u573a\u666f\u5185canset\u53ef\u7c7b\u6bd4\u62bd\u8c61) (\u53c2\u800329067-todo1.1);\n *      2023.10.26: \u5e9f\u5f03canset\u8bc6\u522b (\u53c2\u80033014c-todo2);\n *  @result \u5168\u542b\u65f6,\u8fd4\u56de\u4e8c\u8005\u7684indexDic;\n */\n//+(NSDictionary*) checkFoValidMatch_NewCanset:(AIFoNodeBase*)newCanset oldCanset:(AIFoNodeBase*)oldCanset sceneFo:(AIFoNodeBase*)sceneFo {\n//    //1. \u6570\u636e\u51c6\u5907;"
        },
        {
            "comment": "This code is iterating through each frame in oldCanset and newCanset, comparing if the frames are included in the scene using indexDictionaries. If a frame from oldCanset is found in newCanset, it updates the protoMin variable to start checking from that index in newCanset for the next iteration. The code ensures that all frames in oldCanset are present in newCanset before considering the scene as valid.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":641-657",
            "content": "//    NSMutableDictionary *indexDic = [[NSMutableDictionary alloc] init];\n//    NSDictionary *newIndexDic = [sceneFo getConIndexDic:newCanset.pointer];\n//    NSDictionary *oldIndexDic = [sceneFo getConIndexDic:oldCanset.pointer];\n//\n//    //3. \u8bf4\u660e: \u6240\u6709\u5e27,\u90fd\u8981\u5224\u65ad\u65b0\u7684\u5168\u542b\u65e7\u7684,\u53ea\u8981\u6709\u4e00\u5e27\u5931\u8d25\u5c31\u5168\u5931\u8d25 (\u53c2\u800329025-23a);\n//    NSInteger protoMin = 0;\n//    for (NSInteger oldIndex = 0; oldIndex < oldCanset.count; oldIndex ++) {\n//        AIKVPointer *oldAlg = ARR_INDEX(oldCanset.content_ps, oldIndex);\n//        BOOL findItem = false;\n//        for (NSInteger newIndex = protoMin; newIndex < newCanset.count; newIndex++) {\n//            AIKVPointer *newAlg = ARR_INDEX(newCanset.content_ps, newIndex);\n//\n//            //4. \u5206\u522b\u5224\u65adold\u548cnew\u8fd9\u4e00\u5e27\u662f\u5426\u88absceneFo\u573a\u666f\u5305\u542b (\u53c2\u800329025-23b);\n//            NSNumber *oldKey = ARR_INDEX([oldIndexDic allKeysForObject:@(oldIndex)], 0);\n//            NSNumber *newKey = ARR_INDEX([newIndexDic allKeysForObject:@(newIndex)], 0);\n//\n//            //5. \u5982\u679c\u4e8c\u8005\u90fd\u5305\u542b=>\u5373\u573a\u666f\u5305\u542b\u5e27: (\u56e0\u4e3acanset\u90fd\u4f18\u5148\u53d6matchAlg,\u6240\u4ee5oldAlg\u548cnewAlg\u4e00\u822c\u662f\u540c\u4e00\u8282\u70b9) (\u53c2\u800329025-23b);"
        },
        {
            "comment": "This code is responsible for checking the similarity between two algorithms. It compares the new and old algorithms to determine if they are abstracts of each other, share common abstracts, or have a shared index. The code sets a flag indicating whether a match was found, updates the protoMin value, and stores the new index in the indexDic dictionary for the corresponding old index.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":658-681",
            "content": "//            if (oldKey && newKey) {\n//                //5. \u4f46\u56e0\u4e3a\u4f1a\u7c7b\u6bd4\u62bd\u8c61\u6240\u4ee5\u6709\u65f6\u4e0d\u662f\u540c\u4e00\u8282\u70b9: \u6b64\u65f6\u8981\u6c42new\u62bd\u8c61\u6307\u5411old: \u7b97\u5339\u914d\u6210\u529f (\u53c2\u800329067-todo1.1);\n//                if ([TOUtils mIsC_1:newAlg c:oldAlg]) {\n//                    findItem = true;\n//                }\n//            } else if (oldKey != newKey) {\n//                //6. \u5982\u679c\u4e8c\u8005\u6709\u4e00\u4e2a\u5305\u542b,\u5219\u6b64\u5e27\u5931\u8d25 (\u53c2\u800329025-23b2 & 23c3);\n//                break;\n//            } else {\n//                //7. \u5982\u679c\u4e8c\u8005\u90fd\u4e0d\u5305\u542b,\u5219\u5224\u65ad\u4e8c\u8005\u6709\u6ca1\u6709\u5171\u540c\u7684\u62bd\u8c61 (\u53c2\u800329025-23c);\n//                //2023.10.17: \u5173\u95edmc\u5171\u540c\u62bd\u8c61\u4e3a\u4f9d\u636e (\u53c2\u800330148-todo1.1);\n//                BOOL mcIsBro = false;//[TOUtils mcIsBro:newAlg c:oldAlg];\n//                if (mcIsBro) {\n//                    //8. \u6709\u5171\u540c\u62bd\u8c61=>\u5219\u6b64\u5e27\u6210\u529f (\u53c2\u800329025-23c);\n//                    findItem = true;\n//                } else {\n//                    //9. \u65e0\u5171\u540c\u62bd\u8c61,\u5219\u7ee7\u7eed\u627enewCanset\u7684\u4e0b\u5e27,\u770b\u80fd\u4e0d\u80fd\u6709\u5171\u540c\u62bd\u8c61 (\u53c2\u800329025-23c2);\n//                }\n//            }\n//\n//            //10. \u6b64\u5e27\u6210\u529f: \u8bb0\u5f55newIndex & \u5e76\u8bb0\u5f55protoMin (\u53c2\u800329025-23d);\n//            if (findItem) {\n//                protoMin = newIndex + 1;\n//                [indexDic setObject:@(newIndex) forKey:@(oldIndex)];"
        },
        {
            "comment": "This code is searching for a specific condition to be met in a scene. If the condition is not met, it returns nil; if the condition is met, it returns indexDic. The code also retrieves matchAlg_ps from frameModel.matchAlgs and collects Nodes2Pits from frameModel.partAlgs.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":682-706",
            "content": "//                if (Log4SceneIsOk) NSLog(@\"\\t\u7b2c%ld\u5e27,\u6761\u4ef6\u6ee1\u8db3\u901a\u8fc7 canset:%@ (fromProto:F%ldA%ld)\",oldIndex,Pit2FStr(oldAlg),newCanset.pointer.pointerId,newAlg.pointerId);\n//                break;\n//            }\n//        }\n//\n//        //11. \u6709\u4e00\u6761\u5931\u8d25,\u5219\u5168\u5931\u8d25 (\u53c2\u800329025-23e);\n//        if (!findItem) {\n//            if (Log4SceneIsOk) NSLog(@\"\\t\u7b2c%ld\u5e27,\u6761\u4ef6\u6ee1\u8db3\u672a\u901a\u8fc7 canset:%@ (fromProtoFo:F%ld)\",oldIndex,Pit2FStr(oldAlg),newCanset.pointer.pointerId);\n//            return nil;\n//        }\n//    }\n//\n//    //12. \u5168\u627e\u5230,\u5219\u6210\u529f;\n//    if (Log4SceneIsOk) NSLog(@\"\u6761\u4ef6\u6ee1\u8db3\u901a\u8fc7:%@ (fromProtoFo:%ld)\",Fo2FStr(oldCanset),newCanset.pointer.pointerId);\n//    return indexDic;\n//}\n/**\n *  MARK:--------------------\u83b7\u53d6\u67d0\u5e27shortModel\u7684matchAlgs+partAlgs--------------------\n */\n+(NSArray*) getMatchAndPartAlgPsByModel:(AIShortMatchModel*)frameModel {\n    NSArray *matchAlg_ps = [SMGUtils convertArr:frameModel.matchAlgs convertBlock:^id(AIMatchAlgModel *o) {\n        return o.matchAlg;\n    }];\n    return [SMGUtils collectArrA:matchAlg_ps arrB:Nodes2Pits(frameModel.partAlgs)];"
        },
        {
            "comment": "This code defines a method, `getMatchAndPartAlgPs:frameIndex`, that retrieves match and part algorithms for a given frame index from an input model. The method is marked as \"abandoned\" and will be deleted if not used by 2023.10.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/TIUtils.m\":707-718",
            "content": "}\n/**\n *  MARK:--------------------\u83b7\u53d6\u67d0\u5e27Index\u7684matchAlgs+partAlgs--------------------\n *  @status \u5e9f\u5f03\u72b6\u6001 (\u5982\u679c2023.10\u4e4b\u524d\u672a\u7528,\u5219\u5220\u9664);\n */\n+(NSArray*) getMatchAndPartAlgPs:(NSInteger)frameIndex {\n    AIShortMatchModel *inModel = [theTC.inModelManager getFrameModel:frameIndex];\n    return [self getMatchAndPartAlgPsByModel:inModel];\n}\n@end"
        }
    ]
}