{
    "summary": "This method retrieves delta times from conFos and an absFo, with potential issues, stores max delta time, and returns relevant information. It also handles simple objects by adding current time differences to a list for further processing.",
    "details": [
        {
            "comment": "This method retrieves deltaTimes from a list of conFos and an absFo object. It first prepares the data and then performs calculations based on certain conditions. The code contains various bug fixes and improvements, but it may still have issues with multiple conFos and incorrect extraction of deltaTimes in some cases. The method has been marked for potential future changes to improve its functionality.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsFoManager/AINetAbsFoUtils.m\":0-28",
            "content": "//\n//  AINetAbsUtils.m\n//  SMG_NothingIsAll\n//\n//  Created by iMac on 2018/6/6.\n//  Copyright \u00a9 2018\u5e74 XiaoGang. All rights reserved.\n//\n#import \"AINetAbsFoUtils.h\"\n@implementation AINetAbsFoUtils\n/**\n *  MARK:--------------------\u4ececonFos\u4e2d\u63d0\u53d6deltaTimes--------------------\n *  @result notnull\n *  @bug\n *      2020.09.01: \u8fd4\u56de\u7a7aresult\u7684BUG,\u53d1\u73b0\u662f\u6570\u636e\u51c6\u5907\u65f6,\u68c0\u67e5\u6761\u4ef6\u5224\u65ad\u9519\u8bef\u5bfc\u81f4 T;\n *      2020.09.10: findIndex\u6709\u65f6\u4f1a\u5931\u8d25 (\u56e0\u4e3aHNGL\u65f6,\u9700\u8981index\u5224\u65ad\u4e24\u5c42) T;\n *      2020.09.10: maxDeltaTime\u5728\u975e0\u4f4d\u65f6,\u6709\u53ef\u80fd\u53d6\u52300\u7684BUG (\u8bb0\u5f55lastIndex,\u4f46\u5e76\u672a\u5f7b\u5e95\u89e3\u51b3) (\u53d1\u73b0NL\u65f6\u4e3a0\u6b63\u5e38) T;\n *      2020.09.15: \u591a\u4e2aconFos,\u5374\u53ea\u8bb0\u5f55\u4e86\u4e00\u4e2alastIndex\u5bfc\u81f4\u9519\u4e71\u627e\u4e0d\u5230findIndex\u7684bug; T\n *      2023.11.18: \u4fee\u590d\u5224\u65adM1{\u2191\u997f-16}\u548cA13(\u997f16,7)\u7684\u62bd\u5177\u8c61\u5173\u7cfb\u56e0mIsC\u7b97\u6cd5BUG\u5bfc\u81f4\u603b\u5931\u8d25,\u5bfc\u81f4\u53d6deltaTime\u4e3a0;\n *  @todo\n *      2021.01.21: \u5f53\u6784\u5efaSPFo\u65f6,conFos\u4e2d\u53ef\u80fd\u4e0d\u5305\u542b\u6240\u6709\u7684deltaTime (\u6bd4\u5982\u4e4c\u9e26\u5e26\u4ea4\u8b66\u65f6,\u8f66\u4e0d\u6562\u649e,\u5177\u8c61\u65f6\u5e8f\u4e2d\u662f\u65e0\u4ea4\u8b66\u7684);\n *      2023.11.18: \u968f\u540e\u5e9f\u5f03\u6b64\u65b9\u6cd5,\u6539\u5230AIAbsFoManager.create_NoRepeat()\u4e2d\u6839\u636eindexDic\u8ba1\u7b97deltaTimes (\u73b0\u5728\u8fd9\u4e48\u505a\u4e5f\u6ca1\u5565\u95ee\u9898,\u5148\u4e0d\u6539,\u540e\u9700\u8981\u65f6\u518d\u6539);\n */\n+(NSMutableArray*) getDeltaTimes:(NSArray*)conFos absFo:(AIFoNodeBase*)absFo{\n    //1. \u6570\u636e\u51c6\u5907;\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    if (!ARRISOK(conFos) || !absFo) return result;"
        },
        {
            "comment": "Extracts the maximum delta time from each conFo and stores it in maxDeltaTime.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsFoManager/AINetAbsFoUtils.m\":30-47",
            "content": "    //2. \u63d0\u53d6 (absFo\u6709\u53ef\u80fd\u672c\u6765deltaTimes\u4e0d\u4e3a\u7a7a,\u4e5f\u8981\u53c2\u4e0e\u5230\u7ade\u4e89Max(A,B)\u4e2d\u6765;\n    NSMutableDictionary *lastIndexDic = [[NSMutableDictionary alloc] init];\n    for (NSInteger i = 0; i < absFo.count; i++) {\n        AIKVPointer *absAlg_p = ARR_INDEX(absFo.content_ps, i);\n        //3. \u4ece\u6bcf\u4e2aconFo\u4e2d\u627e\u5230\u5bf9\u5e94absAlg_p\u7684\u5143\u7d20\u4e0b\u6807;\n        double maxDeltaTime = 0;\n        for (AIFoNodeBase *conFo in conFos) {\n            //a. \u627e\u5230\u5f53\u524d\u6240\u5904\u4e0b\u6807;\n            NSData *lastIndexKey = OBJ2DATA(conFo.pointer);\n            NSInteger lastIndex = [NUMTOOK_DV([lastIndexDic objectForKey:lastIndexKey], -1) integerValue];\n            BOOL isHNGL = [TOUtils isHNGL:absAlg_p];\n            NSInteger findIndex = [TOUtils indexOfAbsItem:absAlg_p atConContent:conFo.content_ps layerDiff:isHNGL ? 2 : 1 startIndex:lastIndex + 1 endIndex:NSIntegerMax];\n            if (findIndex != -1) {\n                //b. \u5c06\u6709\u6548\u95f4\u9694\u53d6\u51fa,\u5e76\u63d0\u53d6\u6700\u5927\u7684deltaTime;\n                double sumDeltaTime = [TOUtils getSumDeltaTime:conFo startIndex:lastIndex endIndex:findIndex];\n                maxDeltaTime = MAX(maxDeltaTime, sumDeltaTime);"
        },
        {
            "comment": "This code is part of a function that appears to be comparing two arrays and tracking the indexes of found items. It sets a new record for the last index found and checks if there are any issues with delta time. If the index found is not zero, sum delta time is zero, and a certain condition is not met, it logs information about the current frame. Finally, it adds either 0 or the maximum delta time to an array of results depending on the iteration number.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsFoManager/AINetAbsFoUtils.m\":49-66",
            "content": "                //c. \u5c06\u65b0\u53d1\u73b0\u7684\u4e0b\u6807\u8bb0\u5f55 (1. lastIndex+1\u7528\u4e8eindexOfAbsItem 2. lastIndex\u7528\u4e8esumDeltaTime);\n                [lastIndexDic setObject:@(findIndex) forKey:lastIndexKey];\n                //deltaTime\u4e3a0\u7684BUG\u6d4b\u8bd5;\n                //BOOL nOk = [absFo.content_ps indexOfObject:absAlg_p] == absFo.content_ps.count - 1 && [TOUtils isN:conFo.pointer];\n                //if (findIndex != 0 && sumDeltaTime == 0 && !nOk) {\n                //    NSLog(@\"%@\",Fo2FStr(conFo));\n                //}\n            }else if(![TOUtils isN:absAlg_p] && ![TOUtils isL:absAlg_p]){\n                //NL\u627e\u4e0d\u5230,\u662f\u6b63\u5e38\u7684,\u56e0\u4e3a\"\u5185\u7c7b\u6bd4\u65e0/\u5c0f\"\u65f6,\u672c\u8eab\u5177\u8c61\u53ea\u662ffrontConAlg,\u5e76\u4e14\u672c\u6765\u5c31\u662f\u77ac\u95f4\u53d8\"\u65e0/\u5c0f\"\u7684;\n                if (![TOUtils isHNGL:absFo.pointer] && ([absFo.content_ps indexOfObject:absAlg_p] == absFo.count - 1))\n                    WLog(@\"\u672b\u5e27\u6ca1\u627e\u7740detailTime AbsA:%@ (%ld,%ld)\\n\\tAbsF:%@\\n\\tConF:%@\",AlgP2FStr(absAlg_p),(long)findIndex,(long)lastIndex,Fo2FStr(absFo),Fo2FStr(conFo));\n            }\n        }\n        //4. \u9996\u6761\u65f6\u52a0\u51650,\u5426\u5219\u52a0\u5165maxDeltaTime;\n        if (i == 0) {\n            [result addObject:@(0.0f)];"
        },
        {
            "comment": "The code converts an order array into three different types of output arrays: \"alg\" values, \"deltaTimes\", and \"maxDeltaTime\". It first prepares the data by initializing a result array and ensuring the input order array is not nil. Then it iterates through each element in the order array, extracting either the \"alg\" value or calculating the delta time between consecutive elements, adding them to the result array. Finally, it calls test31 function with the result array and returns it.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsFoManager/AINetAbsFoUtils.m\":67-104",
            "content": "        }else{\n            [result addObject:@(maxDeltaTime)];\n        }\n    }\n    [AITest test31:result];\n    return result;\n}\n+(NSMutableArray*) convertOrder2Alg_ps:(NSArray*)order{\n    //1. \u6570\u636e\u51c6\u5907\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    order = ARRTOOK(order);\n    //2. \u63d0\u53d6\u8fd4\u56de\n    for (AIShortMatchModel_Simple *simple in order) {\n        if (simple.alg_p) [result addObject:simple.alg_p];\n    }\n    return result;\n}\n/**\n *  MARK:--------------------\u5c06order\u8f6c\u6210deltaTimes--------------------\n *  @bug\n *      2020.08.21: \u5c06\u6536\u96c6inputTime\u4fee\u6b63\u6210\u6536\u96c6deltaTime;\n */\n+(NSMutableArray*) convertOrder2DeltaTimes:(NSArray*)order{\n    //1. \u6570\u636e\u51c6\u5907\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    order = ARRTOOK(order);\n    //2. \u63d0\u53d6\u8fd4\u56de\n    NSTimeInterval lastInputTime = 0;\n    for (NSInteger i = 0; i < order.count; i++) {\n        AIShortMatchModel_Simple *simple = ARR_INDEX(order, i);\n        if (i == 0) {\n            [result addObject:@(0)];\n        }else{\n            NSTimeInterval deltaTime = simple.isTimestamp ? MAX(simple.inputTime - lastInputTime, 0) : simple.inputTime;"
        },
        {
            "comment": "Iterates over simple objects, adds current time difference to a list, and returns the result. Finally, calls AITest with test31 and the result for further processing.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsFoManager/AINetAbsFoUtils.m\":105-114",
            "content": "            [result addObject:@(deltaTime)];\n        }\n        lastInputTime = simple.inputTime;\n    }\n    [AITest test31:result];\n    return result;\n}\n@end"
        }
    ]
}