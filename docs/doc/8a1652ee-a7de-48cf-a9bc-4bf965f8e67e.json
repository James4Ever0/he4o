{
    "summary": "This code defines the `NodeCompareModel` class, which compares two objects (a and b) against a stored big node data and small node data. It returns true if either object is equal to one of the stored node data, with a condition that if a is equal to big node data and b is equal to small node data or vice versa, then it returns true; otherwise, false.",
    "details": [
        {
            "comment": "This code defines the `NodeCompareModel` class, which compares two objects (a and b) against a stored big node data and small node data. It returns true if either object is equal to one of the stored node data, with a condition that if a is equal to big node data and b is equal to small node data or vice versa, then it returns true; otherwise, false.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/Model/NodeCompareModel.m\":0-32",
            "content": "//\n//  NodeCompareModel.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2019/6/14.\n//  Copyright \u00a9 2019\u5e74 XiaoGang. All rights reserved.\n//\n#import \"NodeCompareModel.h\"\n@implementation NodeCompareModel\n+(NodeCompareModel*) newWithBig:(id)big small:(id)small{\n    NodeCompareModel *model = [NodeCompareModel new];\n    model.bigNodeData = big;\n    model.smallNodeData = small;\n    return model;\n}\n-(BOOL)isA:(id)a andB:(id)b{\n    if (a && b) {\n        BOOL aIsBig = [a isEqual:self.bigNodeData];\n        BOOL aIsSmall = [a isEqual:self.smallNodeData];\n        BOOL bIsBig = [b isEqual:self.bigNodeData];\n        BOOL bIsSmall = [b isEqual:self.smallNodeData];\n        if ((aIsBig && bIsSmall) || (aIsSmall && bIsBig)) {\n            return true;\n        }\n    }\n    return false;\n}\n@end"
        }
    ]
}