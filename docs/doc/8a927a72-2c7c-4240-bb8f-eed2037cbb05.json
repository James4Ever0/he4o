{
    "summary": "RuntimeInvoker class handles NSInvocation object argument conversion and setup, creating an NSInvocation category for managing method invocations and handling return values based on argument types using a switch statement.",
    "details": [
        {
            "comment": "Code file \"RuntimeInvoker.m\" contains a class named RuntimeInvoker that includes method signature category, NSMethodSignature, and defines an array using NSMutableArray. It also utilizes Objective-C type encoding and uses va_list for variable arguments.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":0-38",
            "content": "//\n//  RuntimeInvoker.m\n//  RuntimeInvoker\n//\n//  Created by cyan on 16/5/27.\n//  Copyright \u00a9 2016\u5e74 cyan. All rights reserved.\n//\n#import \"RuntimeInvoker.h\"\n#import <UIKit/UIKit.h>\n#define _DEFINE_ARRAY(arg) \\\nNSMutableArray *array = [NSMutableArray arrayWithObject:arg];\\\nva_list args;\\\nva_start(args, arg);\\\nid next = nil;\\\nwhile ((next = va_arg(args,id))) {\\\n    [array addObject:next];\\\n}\\\nva_end(args);\\\n#pragma mark - NSMethodSignature Category\n//  Objective-C type encoding: http://nshipster.com/type-encodings/\ntypedef NS_ENUM(NSInteger, RIMethodArgumentType) {\n    RIMethodArgumentTypeUnknown             = 0,\n    RIMethodArgumentTypeChar,\n    RIMethodArgumentTypeInt,\n    RIMethodArgumentTypeShort,\n    RIMethodArgumentTypeLong,\n    RIMethodArgumentTypeLongLong,\n    RIMethodArgumentTypeUnsignedChar,\n    RIMethodArgumentTypeUnsignedInt,\n    RIMethodArgumentTypeUnsignedShort,\n    RIMethodArgumentTypeUnsignedLong,\n    RIMethodArgumentTypeUnsignedLongLong,\n    RIMethodArgumentTypeFloat,\n    RIMethodArgumentTypeDouble,\n    RIMethodArgumentTypeBool,"
        },
        {
            "comment": "This code is from the \"he4o/SMG_NothingIsAll\" project. It defines a set of argument types and implements two methods for retrieving the return type and encoding of an argument. The return type method returns the type of the return value using the \"methodReturnType\" property. The argument type with encode method takes an encode parameter, compares it to various data types using strcmp function, and returns a corresponding RIMethodArgumentType.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":39-77",
            "content": "    RIMethodArgumentTypeVoid,\n    RIMethodArgumentTypeCharacterString,\n    RIMethodArgumentTypeCGPoint,\n    RIMethodArgumentTypeCGSize,\n    RIMethodArgumentTypeCGRect,\n    RIMethodArgumentTypeUIEdgeInsets,\n    RIMethodArgumentTypeObject,\n    RIMethodArgumentTypeClass,\n    RIMethodArgumentTypeSEL,\n    RIMethodArgumentTypeIMP,\n};\n@implementation NSMethodSignature (RuntimeInvoker)\n/**\n *  Get type of return value\n *\n *  @return Return value type\n */\n- (RIMethodArgumentType)returnType {\n    return [NSMethodSignature argumentTypeWithEncode:[self methodReturnType]];\n}\n/**\n *  Type encoding for argument\n *\n *  @param encode Encode for argument\n *\n *  @return RIMethodArgumentType\n */\n+ (RIMethodArgumentType)argumentTypeWithEncode:(const char *)encode {\n    if (strcmp(encode, @encode(char)) == 0) {\n        return RIMethodArgumentTypeChar;\n    } else if (strcmp(encode, @encode(int)) == 0) {\n        return RIMethodArgumentTypeInt;\n    } else if (strcmp(encode, @encode(short)) == 0) {\n        return RIMethodArgumentTypeShort;\n    } else if (strcmp(encode, @encode(long)) == 0) {"
        },
        {
            "comment": "This code checks the string representation of a variable type and returns the corresponding RIMethodArgumentType enum value. It handles types such as long, unsigned char, float, double, BOOL, etc., and returns the appropriate type for further processing.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":78-97",
            "content": "        return RIMethodArgumentTypeLong;\n    } else if (strcmp(encode, @encode(long long)) == 0) {\n        return RIMethodArgumentTypeLongLong;\n    } else if (strcmp(encode, @encode(unsigned char)) == 0) {\n        return RIMethodArgumentTypeUnsignedChar;\n    } else if (strcmp(encode, @encode(unsigned int)) == 0) {\n        return RIMethodArgumentTypeUnsignedInt;\n    } else if (strcmp(encode, @encode(unsigned short)) == 0) {\n        return RIMethodArgumentTypeUnsignedShort;\n    } else if (strcmp(encode, @encode(unsigned long)) == 0) {\n        return RIMethodArgumentTypeUnsignedLong;\n    } else if (strcmp(encode, @encode(unsigned long long)) == 0) {\n        return RIMethodArgumentTypeUnsignedLongLong;\n    } else if (strcmp(encode, @encode(float)) == 0) {\n        return RIMethodArgumentTypeFloat;\n    } else if (strcmp(encode, @encode(double)) == 0) {\n        return RIMethodArgumentTypeDouble;\n    } else if (strcmp(encode, @encode(BOOL)) == 0) {\n        return RIMethodArgumentTypeBool;\n    } else if (strcmp(encode, @encode(void)) == 0) {"
        },
        {
            "comment": "This code compares the given \"encode\" parameter to various encoded types and returns the corresponding RIMethodArgumentType if a match is found. If no match is found, it returns RIMethodArgumentTypeUnknown.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":98-123",
            "content": "        return RIMethodArgumentTypeVoid;\n    } else if (strcmp(encode, @encode(char *)) == 0) {\n        return RIMethodArgumentTypeCharacterString;\n    } else if (strcmp(encode, @encode(id)) == 0) {\n        return RIMethodArgumentTypeObject;\n    } else if (strcmp(encode, @encode(Class)) == 0) {\n        return RIMethodArgumentTypeClass;\n    } else if (strcmp(encode, @encode(CGPoint)) == 0) {\n        return RIMethodArgumentTypeCGPoint;\n    } else if (strcmp(encode, @encode(CGSize)) == 0) {\n        return RIMethodArgumentTypeCGSize;\n    } else if (strcmp(encode, @encode(CGRect)) == 0) {\n        return RIMethodArgumentTypeCGRect;\n    } else if (strcmp(encode, @encode(UIEdgeInsets)) == 0) {\n        return RIMethodArgumentTypeUIEdgeInsets;\n    } else if (strcmp(encode, @encode(SEL)) == 0) {\n        return RIMethodArgumentTypeSEL;\n    }  else if (strcmp(encode, @encode(IMP))) {\n        return RIMethodArgumentTypeIMP;\n    } else {\n        return RIMethodArgumentTypeUnknown;\n    }\n}\n/**\n *  Get type of argument at index"
        },
        {
            "comment": "This code defines a class, RuntimeInvoker, which provides methods to retrieve and set up arguments for invocation. The argumentTypeAtIndex method returns the return value type based on the given index from the encoded string, while the invocationWithArguments method sets up an NSInvocation object using the provided arguments array. This class seems to be part of a larger system that involves setting up invocations with specific types of arguments.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":124-155",
            "content": " *\n *  @param index Argument index\n *\n *  @return Return value type\n */\n- (RIMethodArgumentType)argumentTypeAtIndex:(NSInteger)index {\n    const char *encode = [self getArgumentTypeAtIndex:index];\n    return [NSMethodSignature argumentTypeWithEncode:encode];\n}\n/**\n *  Setup arguments for invocation\n *\n *  @param arguments Arguments\n *\n *  @return NSInvocation\n */\n- (NSInvocation *)invocationWithArguments:(NSArray *)arguments {\n    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:self];\n    NSAssert(arguments == nil || [arguments isKindOfClass:[NSArray class]], @\"# RuntimeInvoker # arguments is not an array\");\n    [arguments enumerateObjectsUsingBlock:^(id  _Nonnull argument, NSUInteger idx, BOOL * _Nonnull stop) {\n        NSInteger index = idx + 2; // start with 2\n        RIMethodArgumentType type = [self argumentTypeAtIndex:index];\n        switch (type) {\n            case RIMethodArgumentTypeChar: {\n                char value = [argument charValue];\n                [invocation setArgument:&value atIndex:index];"
        },
        {
            "comment": "This code is handling different method argument types in a switch statement. It converts the argument to the appropriate data type (int, short, long, etc.) and sets it as an invocation argument at the specified index.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":156-178",
            "content": "            } break;\n            case RIMethodArgumentTypeInt: {\n                int value = [argument intValue];\n                [invocation setArgument:&value atIndex:index];\n            } break;\n            case RIMethodArgumentTypeShort: {\n                short value = [argument shortValue];\n                [invocation setArgument:&value atIndex:index];\n            } break;\n            case RIMethodArgumentTypeLong: {\n                long value = [argument longValue];\n                [invocation setArgument:&value atIndex:index];\n            } break;\n            case RIMethodArgumentTypeLongLong: {\n                long long value = [argument longLongValue];\n                [invocation setArgument:&value atIndex:index];\n            } break;\n            case RIMethodArgumentTypeUnsignedChar: {\n                unsigned char value = [argument unsignedCharValue];\n                [invocation setArgument:&value atIndex:index];\n            } break;\n            case RIMethodArgumentTypeUnsignedInt: {\n                unsigned int value = [argument unsignedIntValue];"
        },
        {
            "comment": "This code is handling different types of arguments for a method invocation. It checks the argument type and assigns corresponding values to the invocation using switch statements. Types handled include: BOOL, char, short, int, long, long long, float, and double. Each case sets the appropriate value for the given argument type in the invocation at the specified index.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":179-199",
            "content": "                [invocation setArgument:&value atIndex:index];\n            } break;\n            case RIMethodArgumentTypeUnsignedShort: {\n                unsigned short value = [argument unsignedShortValue];\n                [invocation setArgument:&value atIndex:index];\n            } break;\n            case RIMethodArgumentTypeUnsignedLong: {\n                unsigned long value = [argument unsignedLongValue];\n                [invocation setArgument:&value atIndex:index];\n            } break;\n            case RIMethodArgumentTypeUnsignedLongLong: {\n                unsigned long long value = [argument unsignedLongLongValue];\n                [invocation setArgument:&value atIndex:index];\n            } break;\n            case RIMethodArgumentTypeFloat: {\n                float value = [argument floatValue];\n                [invocation setArgument:&value atIndex:index];\n            } break;\n            case RIMethodArgumentTypeDouble: {\n                double value = [argument doubleValue];\n                [invocation setArgument:&value atIndex:index];"
        },
        {
            "comment": "This code is handling different types of method arguments and converting them for use in the invocation. It supports argument types such as int, bool, void, NSString, Class, IMP, and SEL, converting them to appropriate formats for passing to the invocation object. This ensures compatibility with various argument types in the invocation method.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":200-224",
            "content": "            } break;\n            case RIMethodArgumentTypeBool: {\n                BOOL value = [argument boolValue];\n                [invocation setArgument:&value atIndex:index];\n            } break;\n            case RIMethodArgumentTypeVoid: {\n            } break;\n            case RIMethodArgumentTypeCharacterString: {\n                const char *value = [argument UTF8String];\n                [invocation setArgument:&value atIndex:index];\n            } break;\n            case RIMethodArgumentTypeObject: {\n                [invocation setArgument:&argument atIndex:index];\n            } break;\n            case RIMethodArgumentTypeClass: {\n                Class value = [argument class];\n                [invocation setArgument:&value atIndex:index];\n            } break;\n            case RIMethodArgumentTypeIMP: {\n                IMP imp = [argument pointerValue];\n                [invocation setArgument:&imp atIndex:index];\n            } break;\n            case RIMethodArgumentTypeSEL: {\n                SEL sel = [argument pointerValue];"
        },
        {
            "comment": "This code defines a category on NSInvocation that allows invoking a selector and returns the result of the invocation for specific return types. It also implements boxing for different return types like char, int, etc. The invoke method is used to trigger the selector on the target object and returns the result using returnValueForType method based on the return type specified.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":225-275",
            "content": "                [invocation setArgument:&sel atIndex:index];\n            } break;\n            default: break;\n        }\n    }];\n    return invocation;\n}\n@end\n#pragma mark - NSInvocation Category\n@implementation NSInvocation (RuntimeInvoker)\n/**\n *  Invoke a selector\n *\n *  @param target   Target\n *  @param selector Selector\n *  @param type     Return value type\n *\n *  @return Return value\n */\n- (id)invoke:(id)target selector:(SEL)selector returnType:(RIMethodArgumentType)type {\n    self.target = target;\n    self.selector = selector;\n    [self invoke];\n    return [self returnValueForType:type];\n}\n/**\n *  Boxing returnType of NSMethodSignature\n *\n *  @param type Signature\n *\n *  @return Boxed value\n */\n- (id)returnValueForType:(RIMethodArgumentType)type {\n    __unsafe_unretained id returnValue;\n    switch (type) {\n        case RIMethodArgumentTypeChar: {\n            char value;\n            [self getReturnValue:&value];\n            returnValue = @(value);\n        } break;\n        case RIMethodArgumentTypeInt:  {\n            int value;"
        },
        {
            "comment": "This code handles different data types for return values in the runtime invoker. It uses switch cases to determine the appropriate data type and assigns values accordingly. The getReturnValue method is called to retrieve the value, which is then wrapped in an NSNumber object and assigned to returnValue.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":276-306",
            "content": "            [self getReturnValue:&value];\n            returnValue = @(value);\n        } break;\n        case RIMethodArgumentTypeShort:  {\n            short value;\n            [self getReturnValue:&value];\n            returnValue = @(value);\n        } break;\n        case RIMethodArgumentTypeLong:  {\n            long value;\n            [self getReturnValue:&value];\n            returnValue = @(value);\n        } break;\n        case RIMethodArgumentTypeLongLong:  {\n            long long value;\n            [self getReturnValue:&value];\n            returnValue = @(value);\n        } break;\n        case RIMethodArgumentTypeUnsignedChar:  {\n            unsigned char value;\n            [self getReturnValue:&value];\n            returnValue = @(value);\n        } break;\n        case RIMethodArgumentTypeUnsignedInt:  {\n            unsigned int value;\n            [self getReturnValue:&value];\n            returnValue = @(value);\n        } break;\n        case RIMethodArgumentTypeUnsignedShort:  {\n            unsigned short value;\n            [self getReturnValue:&value];"
        },
        {
            "comment": "This code handles method invocations and converts return values based on the argument type, using a switch statement for various types like unsigned long, double, bool, and character string.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":307-336",
            "content": "            returnValue = @(value);\n        } break;\n        case RIMethodArgumentTypeUnsignedLong:  {\n            unsigned long value;\n            [self getReturnValue:&value];\n            returnValue = @(value);\n        } break;\n        case RIMethodArgumentTypeUnsignedLongLong:  {\n            unsigned long long value;\n            [self getReturnValue:&value];\n            returnValue = @(value);\n        } break;\n        case RIMethodArgumentTypeFloat:  {\n            float value;\n            [self getReturnValue:&value];\n            returnValue = @(value);\n        } break;\n        case RIMethodArgumentTypeDouble:  {\n            double value;\n            [self getReturnValue:&value];\n            returnValue = @(value);\n        } break;\n        case RIMethodArgumentTypeBool: {\n            BOOL value;\n            [self getReturnValue:&value];\n            returnValue = @(value);\n        } break;\n        case RIMethodArgumentTypeCharacterString: {\n            const char *value;\n            [self getReturnValue:&value];"
        },
        {
            "comment": "This code block maps different argument types to their corresponding NSValue counterparts, using a switch statement based on the RIMethodArgumentType. It retrieves the value and creates an appropriate NSValue object for each case, then assigns it to returnValue.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":337-364",
            "content": "            returnValue = [NSString stringWithUTF8String:value];\n        } break;\n        case RIMethodArgumentTypeCGPoint: {\n            CGPoint value;\n            [self getReturnValue:&value];\n            returnValue = [NSValue valueWithCGPoint:value];\n        } break;\n        case RIMethodArgumentTypeCGSize: {\n            CGSize value;\n            [self getReturnValue:&value];\n            returnValue = [NSValue valueWithCGSize:value];\n        } break;\n        case RIMethodArgumentTypeCGRect: {\n            CGRect value;\n            [self getReturnValue:&value];\n            returnValue = [NSValue valueWithCGRect:value];\n        } break;\n        case RIMethodArgumentTypeUIEdgeInsets: {\n            UIEdgeInsets value;\n            [self getReturnValue:&value];\n            returnValue = [NSValue valueWithUIEdgeInsets:value];\n        } break;\n        case RIMethodArgumentTypeSEL: {\n            SEL sel;\n            [self getReturnValue:&sel];\n            returnValue = [NSValue valueWithPointer:sel];\n        } break;\n        case RIMethodArgumentTypeIMP: {"
        },
        {
            "comment": "The code defines an invocation method to call a selector on an object and pass in arguments, returning the return value. The implementation uses NSInvocation and method signatures for the invocation process. It handles various argument types and logs if a selector is not found.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":365-398",
            "content": "            IMP imp;\n            [self getReturnValue:&imp];\n            returnValue = [NSValue valueWithPointer:imp];\n        } break;\n        case RIMethodArgumentTypeObject:\n        case RIMethodArgumentTypeClass:\n            [self getReturnValue:&returnValue];\n            break;\n        default: break;\n    }\n    return returnValue;\n}\n@end\n#pragma mark - NSObject Category\n@implementation NSObject (RuntimeInvoker)\nid _invoke(id target, NSString *selector, NSArray *arguments) {\n    SEL sel = NSSelectorFromString(selector);\n    NSMethodSignature *signature = [target methodSignatureForSelector:sel];\n    if (signature) {\n        NSInvocation *invocation = [signature invocationWithArguments:arguments];\n        id returnValue = [invocation invoke:target selector:sel returnType:signature.returnType];\n        return returnValue;\n    } else {\n        NSLog(@\"# RuntimeInvoker # selector: \\\"%@\\\" NOT FOUND\", selector);\n        return nil;\n    }\n}\n- (id)invoke:(NSString *)selector arguments:(NSArray *)arguments {\n    return _invoke(self, selector, arguments);"
        },
        {
            "comment": "The code defines methods for invoking instance and class methods with optional arguments. It provides convenience methods to invoke methods on objects, including class methods using NSClassFromString, with the ability to pass in nil or a defined array of arguments.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":399-437",
            "content": "}\n- (id)invoke:(NSString *)selector {\n    return [self invoke:selector arguments:nil];\n}\n- (id)invoke:(NSString *)selector args:(id)arg, ... {\n    _DEFINE_ARRAY(arg);\n    return [self invoke:selector arguments:array];\n}\n+ (id)invoke:(NSString *)selector {\n    return [self.class invoke:selector arguments:nil];\n}\n+ (id)invoke:(NSString *)selector args:(id)arg, ... {\n    _DEFINE_ARRAY(arg);\n    return [self.class invoke:selector arguments:array];\n}\n+ (id)invoke:(NSString *)selector arguments:(NSArray *)arguments {\n    return _invoke(self.class, selector, arguments);\n}\n@end\n@implementation NSString (RuntimeInvoker)\n- (id)invokeClassMethod:(NSString *)selector {\n    return [self invokeClassMethod:selector arguments:nil];\n}\n- (id)invokeClassMethod:(NSString *)selector args:(id)arg, ... {\n    _DEFINE_ARRAY(arg);\n    return [self invokeClassMethod:selector arguments:array];\n}\n- (id)invokeClassMethod:(NSString *)selector arguments:(NSArray *)arguments {\n    return [NSClassFromString(self) invoke:selector arguments:arguments];"
        },
        {
            "comment": "This code snippet marks the end of a class or block of code within the \"RuntimeInvoker.m\" file in the SMG_NothingIsAll project's Demo/Extension folder.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/Extension/RuntimeInvoker.m\":438-440",
            "content": "}\n@end"
        }
    ]
}