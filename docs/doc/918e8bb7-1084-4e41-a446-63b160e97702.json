{
    "summary": "The code initializes a TVPanelView, handles video playback updates and speed settings, updates models, compares frames, limits frame arrays, and refreshes displays. It introduces the `TVPanelView` class for UI actions, view controller for list management, and exception handling within blocks.",
    "details": [
        {
            "comment": "TVPanelView class properties and delegate set for TVideoWindow. Contains various UI elements including UISlider, UILabels, UISegmentedControl, and buttons, as well as a TVideoWindow object.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVPanelView.m\":0-29",
            "content": "//\n//  TVPanelView.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2022/3/18.\n//  Copyright \u00a9 2022\u5e74 XiaoGang. All rights reserved.\n//\n#import \"TVPanelView.h\"\n#import \"MASConstraint.h\"\n#import \"View+MASAdditions.h\"\n#import \"TOMVisionItemModel.h\"\n#import \"PINDiskCache.h\"\n#import \"TVideoWindow.h\"\n#import \"TVSettingWindow.h\"\n#import \"TVUtil.h\"\n@interface TVPanelView () <TVideoWindowDelegate>\n@property (strong, nonatomic) IBOutlet UIView *containerView;\n@property (weak, nonatomic) IBOutlet UISlider *sliderView;\n@property (weak, nonatomic) IBOutlet UIButton *playBtn;\n@property (weak, nonatomic) IBOutlet UISegmentedControl *speedSegment;\n@property (weak, nonatomic) IBOutlet UILabel *changeLab;\n@property (weak, nonatomic) IBOutlet UILabel *frameLab;\n@property (weak, nonatomic) IBOutlet UILabel *timeLab;\n@property (weak, nonatomic) IBOutlet UILabel *loopLab;\n@property (weak, nonatomic) IBOutlet UIButton *plusBtn;\n@property (weak, nonatomic) IBOutlet UIButton *subBtn;\n@property (strong, nonatomic) TVideoWindow *tvideoWindow;"
        },
        {
            "comment": "This code initializes a TVPanelView by setting its frame, loading the nib file, adding it as a subview, and setting constraints for layout.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVPanelView.m\":30-61",
            "content": "@property (assign, nonatomic) BOOL playing;             //\u64ad\u653e\u4e2d;\n@property (assign, nonatomic) CGFloat speed;            //\u64ad\u653e\u901f\u5ea6 (\u5176\u4e2d0\u4e3a\u76f4\u64ad);\n@property (strong, nonatomic) NSTimer *timer;           //\u7528\u4e8e\u64ad\u653e\u65f6\u8ba1\u65f6\u89e6\u53d1\u5668;\n@property (assign, nonatomic) NSInteger changeIndex;            //\u5f53\u524d\u64ad\u653e\u4e2d\u53d8\u6570\u4e0b\u6807\n@property (strong, nonatomic) NSMutableDictionary *changeDic;   //\u53d8\u5316\u6570\u5b57\u5178 <K:\u540e\u5e27\u4e0b\u6807, V:\u53d8\u5316\u6570\u7ec4>;\n@end\n@implementation TVPanelView\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initView];\n        [self initData];\n        [self initDisplay];\n    }\n    return self;\n}\n-(void) initView{\n    //self\n    [self setFrame:CGRectMake(0, ScreenHeight - 40, ScreenWidth, 40)];\n    //containerView\n    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self.class) owner:self options:nil];\n    [self addSubview:self.containerView];\n    [self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.leading.mas_equalTo(self);\n        make.trailing.mas_equalTo(self);\n        make.top.mas_equalTo(self);\n        make.bottom.mas_equalTo(self);"
        },
        {
            "comment": "This code initializes the TVPanelView class, sets up delegate objects, and initializes various properties. The initData method sets up data structures, while initDisplay and refreshDisplay are left blank for future implementation. The refreshDisplay: method takes a boolean parameter and refreshes the display using this parameter.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVPanelView.m\":62-97",
            "content": "    }];\n    //tvideoWindow\n    self.tvideoWindow = [[TVideoWindow alloc] init];\n    self.tvideoWindow.delegate = self;\n    //settingWindow\n    self.settingWindow = [[TVSettingWindow alloc] init];\n}\n-(void) initData{\n    self.models = [[NSMutableArray alloc] init];\n    self.changeDic = [[NSMutableDictionary alloc] init];\n    self.playing = true;\n    self.speed = 0;\n    self.changeIndex = 0;\n    self.stop = !tomV2Switch;\n}\n-(void) initDisplay{\n}\n-(void) refreshDisplay{\n    [self refreshDisplay:true];\n}\n-(void) refreshDisplay:(BOOL)refreshSlider{\n    //1. \u53d6model\n    NSRange index = [TVUtil indexOfChangeIndex:self.changeIndex changeDic:self.changeDic];\n    NSInteger mainIndex = index.location;\n    NSInteger changeCount = [TVUtil countOfChangeDic:self.changeDic];\n    TOMVisionItemModel *playModel = ARR_INDEX(self.models, mainIndex);\n    TOMVisionItemModel *lastModel = ARR_INDEX_REVERSE(self.models, 0);\n    self.changeIndex = MAX(MIN(self.changeIndex, changeCount - 1), 0);\n    //2. \u64ad\u653e\n    [self.delegate panelPlay:self.changeIndex];"
        },
        {
            "comment": "This code updates the frame progress, loop progress, slider value and progress bar, time progress, and variable count in a video playback interface. It also handles cases where the speed is 0 and updates the time label accordingly.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVPanelView.m\":99-124",
            "content": "    //3. \u66f4\u65b0\u5e27\u8fdb\u5ea6\u548c\u5faa\u73af\u6570\u8fdb\u5ea6;\n    self.frameLab.text = STRFORMAT(@\"\u5e27\u6570: %ld/%ld\",mainIndex + 1,self.models.count);\n    self.loopLab.text = STRFORMAT(@\"\u5faa\u73af: %ld/%ld\",playModel ? playModel.loopId : 0,lastModel ? lastModel.loopId : 0);\n    //4. \u66f4\u65b0\u8fdb\u5ea6\u6761 (\u5f53\u524dsliderValue\u4e0echangeIndex\u4e0d\u5339\u914d\u65f6,\u66f4\u65b0\u8fdb\u5ea6\u6761);\n    // 2022.03.26: \u5206\u6bcd-1,\u4e0d\u7136slider\u6c38\u8fdc\u663e\u793a\u4e0d\u52301\u7684\u4f4d\u7f6e (\u56e0\u4e3achangeIndex\u6700\u5927\u4e3achangeCount - 1);\n    if (refreshSlider) {\n        CGFloat sliderValue = self.changeIndex / ((float)changeCount - 1);\n        [self.sliderView setValue:sliderValue];\n    }\n    //5. \u66f4\u65b0\u65f6\u95f4\u8fdb\u5ea6;\n    if (self.speed == 0) {\n        self.timeLab.text = @\"\u65f6\u957f: --/--\";\n    }else{\n        NSInteger allS = changeCount / self.speed;\n        NSInteger curS = (self.changeIndex + 1) / self.speed;\n        NSString *timeStr = STRFORMAT(@\"\u65f6\u957f: %ld:%ld/%ld:%ld\",curS / 60,curS % 60,allS / 60,allS % 60);\n        self.timeLab.text = timeStr;\n    }\n    //6. \u66f4\u65b0\u53d8\u6570;\n    self.changeLab.text = STRFORMAT(@\"\u53d8\u6570: %ld/%ld\", self.changeIndex + 1, changeCount);\n}\n//MARK:==============================================================="
        },
        {
            "comment": "This code adds a new frame to the models array if there are any changes since the last frame. It checks for data integrity, gets a new snapshot of the model manager's demands, and compares the current and previous frames to determine if any changes have occurred. If no changes have occurred, the new frame is not added. The code also maintains a limit of 300 frames in the array by removing old frames.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVPanelView.m\":125-157",
            "content": "//MARK:                     < publicMethod >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u6dfb\u52a0\u65b0\u5e27--------------------\n *  @version\n *      2022.05.04: \u5185\u5b58\u4f18\u5316_\u51cf\u5c11\u65e0\u7528\u5e27 (\u65e0\u53d8\u5316\u4e0d\u8bb0\u5f55 & \u4ec5\u4fdd\u7559300\u5e27);\n */\n-(void) updateFrame{\n    //1. \u6570\u636e\u68c0\u67e5;\n    if (self.stop || theTC.outModelManager.getAllDemand.count <= 0) {\n        return;\n    }\n    //2. \u65b0\u5feb\u7167;\n    TOMVisionItemModel *newFrame = [[TOMVisionItemModel alloc] init];\n    newFrame.roots = CopyByCoding(theTC.outModelManager.getAllDemand);\n    //2. \u65e0\u53d8\u5316\u65f6,\u4e0d\u8bb0\u5f55;\n    TOMVisionItemModel *lastFrame = ARR_INDEX_REVERSE(self.models, 0);\n    NSInteger changeCount = [TVUtil getChange_Item:lastFrame itemB:newFrame].count;\n    if (changeCount <= 0) {\n        return;\n    }\n    //2. \u8bb0\u5f55\u5feb\u7167\n    [self.models addObject:newFrame];\n    //3. \u4ec5\u4fdd\u7559\u540ex00\u5e27;\n    NSInteger limit = self.stop ? 0 : 300;\n    NSArray *subModels = ARR_SUB(self.models, self.models.count - limit, limit);\n    [self.models removeAllObjects];\n    [self.models addObjectsFromArray:ARRTOOK(subModels)];"
        },
        {
            "comment": "1. Update loopId if last frame has a lower loopId than the current one.\n2. Recalculate changes by removing all objects from changeDic and setting it to TVUtil's getChange_List result with models.\n3. If playing and speed is 0, update the changeIndex and call refreshDisplay.\n4. Get changeIndex from changeDic using indexOfChangeIndex method.\n5. Get change array from changeDic using objectForKey method.\n6. Return frame show time based on speed value.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVPanelView.m\":159-191",
            "content": "    //3. \u65b0\u8f6e\u5faa\u73afId;\n    if (lastFrame && lastFrame.loopId < theTC.getLoopId) {\n        newFrame.loopId = theTC.getLoopId;\n    }\n    //4. \u8ba1\u7b97\u53d8\u5316\u6570 (\u4e5f\u4e0d\u5927\u8017\u80fd,\u5c31\u5168\u91cd\u7b97\u5427);\n    [self.changeDic removeAllObjects];\n    [self.changeDic setDictionary:[TVUtil getChange_List:self.models]];\n    //5. \u5f53\u524d\u76f4\u64ad\u64ad\u653e\u4e2d,\u5219\u5b9e\u65f6\u66f4\u65b0;\n    if (self.playing && self.speed == 0) {\n        self.changeIndex = [TVUtil countOfChangeDic:self.changeDic] - 1;\n        [self refreshDisplay];\n    }\n}\n-(void) getModel:(NSInteger)changeIndex complete:(void(^)(TOMVisionItemModel*,TOModelBase*))complete{\n    //1. \u53d6\u4e0b\u6807;\n    NSRange index = [TVUtil indexOfChangeIndex:changeIndex changeDic:self.changeDic];\n    //2. \u53d6change\u53d8\u6570\u7ec4;\n    NSArray *changes = [self.changeDic objectForKey:@(index.location)];\n    //3. \u5c06\u6a21\u578b\u548c\u53d8\u6570\u8fd4\u56de;\n    TOMVisionItemModel *frameModel = ARR_INDEX(self.models, index.location);\n    TOModelBase *changeModel = ARR_INDEX(changes, index.length);\n    complete(frameModel,changeModel);\n}\n//\u8fd4\u56de\u5355\u5e27\u5c55\u793a\u65f6\u957f;\n-(CGFloat) getFrameShowTime{\n    if (self.speed != 0) {\n        return 1.0f / self.speed;"
        },
        {
            "comment": "This code sets and gets the speed and playing status of a video player. The speed value is used to adjust the playback interval, and the playing status updates the button's title accordingly. A timer is used for continuous playback and counting the number of changes in the video.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVPanelView.m\":192-223",
            "content": "    }\n    return 0;\n}\n//MARK:===============================================================\n//MARK:                     < getset >\n//MARK:===============================================================\n-(void)setSpeed:(CGFloat)speed{\n    //1. set\n    _speed = speed;\n    //2. \u901f\u5ea6\u53d8\u5316\u65f6,\u8c03\u6574\u64ad\u653e\u5668\u64ad\u653e\u95f4\u9694;\n    if (self.timer) [self.timer invalidate];\n    if (speed > 0) {\n        dispatch_async(dispatch_get_main_queue(), ^{\n            self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0f / speed target:self selector:@selector(timeBlock) userInfo:nil repeats:true];\n        });\n    }\n}\n-(void) setPlaying:(BOOL)playing{\n    _playing = playing;\n    [self.playBtn setTitle:(self.playing ? @\"||\" : @\"\u25b6\") forState:UIControlStateNormal];\n}\n//MARK:===============================================================\n//MARK:                     < block >\n//MARK:===============================================================\n-(void) timeBlock {\n    if (self.playing) {\n        //1. \u64ad\u653e\u4e2d\u65f6,\u64ad\u653e\u4e0b\u5e27;\n        NSInteger changeCount = [TVUtil countOfChangeDic:self.changeDic];"
        },
        {
            "comment": "This code handles the playback of a video and adjustments to its speed. The `sliderChanged` method updates the current change index based on the slider's value and refreshes the display. The `speedSegmentChanged` method sets the playback speed based on the selected segment in a UISegmentedControl. If the number of changes is greater than the current index, it increments the index and calls `refreshDisplay`. Otherwise, it stops the timer, playback, and logs \"\u64ad\u653e\u5b8c\u6210\".",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVPanelView.m\":224-253",
            "content": "        if (self.changeIndex < changeCount - 1) {\n            self.changeIndex ++;\n            [self refreshDisplay];\n        }else{\n            //2. \u64ad\u653e\u5b8c\u6210\u65f6,\u505c\u6b62\u8ba1\u65f6\u5668,\u505c\u6b62\u64ad\u653e;\n            self.playing = false;\n            NSLog(@\"\u64ad\u653e\u5b8c\u6210\");\n        }\n    }\n}\n//MARK:===============================================================\n//MARK:                     < onclick >\n//MARK:===============================================================\n- (IBAction)sliderChanged:(UISlider*)sender {\n    NSInteger changeCount = [TVUtil countOfChangeDic:self.changeDic];\n    self.changeIndex = (changeCount - 1) * sender.value;\n    [self refreshDisplay:false];\n}\n- (IBAction)speedSegmentChanged:(UISegmentedControl*)sender {\n    if (sender.selectedSegmentIndex == 0) {\n        self.speed = 0.25f;\n    }else if (sender.selectedSegmentIndex == 1) {\n        self.speed = 0.5f;\n    }else if (sender.selectedSegmentIndex == 2) {\n        self.speed = 1;\n    }else if (sender.selectedSegmentIndex == 3) {\n        self.speed = 2.0f;\n    }else if (sender.selectedSegmentIndex == 4) {"
        },
        {
            "comment": "This code appears to be part of a user interface. The `TVPanelView` class handles button actions for selecting different speeds, adjusting scale, playing/pausing, and navigating through changes. Speed is set based on the selected segment index in a UISegmentedControl. The `scaleSegmentChanged` method updates the scale value based on the selected segment index as well. PlayBtnClicked toggles the `playing` flag between true and false. PlusBtnClicked increments the changeIndex if there are changes to cycle through.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVPanelView.m\":254-288",
            "content": "        self.speed = 3.0f;\n    }else if (sender.selectedSegmentIndex == 5) {\n        self.speed = 4.0f;\n    }else if (sender.selectedSegmentIndex == 6) {\n        self.speed = 0;\n    }\n    [self refreshDisplay];\n}\n- (IBAction)scaleSegmentChanged:(UISegmentedControl*)sender {\n    CGFloat scale = 1.0f;\n    if (sender.selectedSegmentIndex == 0) {\n        scale = 0.25f;\n    }else if (sender.selectedSegmentIndex == 1) {\n        scale = 0.5f;\n    }else if (sender.selectedSegmentIndex == 2) {\n        scale = 1;\n    }else if (sender.selectedSegmentIndex == 3) {\n        scale = 2.0f;\n    }else if (sender.selectedSegmentIndex == 4) {\n        scale = 3.0f;\n    }else if (sender.selectedSegmentIndex == 5) {\n        scale = 4.0f;\n    }\n    [self.delegate panelScaleChanged:scale];\n}\n- (IBAction)playBtnClicked:(id)sender {\n    self.playing = !self.playing;\n}\n- (IBAction)plusBtnClicked:(id)sender {\n    NSInteger changeCount = [TVUtil countOfChangeDic:self.changeDic];\n    if (self.changeIndex < changeCount - 1) {\n        self.changeIndex++;"
        },
        {
            "comment": "This code defines methods for a view controller, including actions for buttons and delegate methods for a TVideoWindow. The view controller manages a list of models, and has methods to clear the models, save videos, and refresh the display. The code also includes constants and paths for file storage.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVPanelView.m\":289-330",
            "content": "        [self refreshDisplay];\n    }\n}\n- (IBAction)subBtnClicked:(id)sender {\n    if (self.changeIndex > 0) {\n        self.changeIndex--;\n        [self refreshDisplay];\n    }\n}\n- (IBAction)closeBtnClicked:(id)sender {\n    [self.delegate panelCloseBtnClicked];\n}\n- (IBAction)saveBtnOnClicked:(id)sender {\n    [self.tvideoWindow open];\n}\n- (IBAction)settingBtnClick:(id)sender {\n    [self.settingWindow open];\n}\n//MARK:===============================================================\n//MARK:                     < TVideoWindowDelegate >\n//MARK:===============================================================\n-(void) tvideo_ClearModels{\n    [self.models removeAllObjects];\n    [self.changeDic removeAllObjects];\n    [self refreshDisplay];\n}\n/**\n *  MARK:--------------------\u5b58\u89c6\u9891--------------------\n *  @version\n *      2022.10.12: \u4fee\u590d\u56e0\u6587\u4ef6\u5939\u4e3a\u7a7a\u5b58\u50a8\u5931\u8d25\u7684BUG;\n */\n-(void) tvideo_Save:(NSString*)fileName{\n    //1. \u6570\u636e\u51c6\u5907;\n    NSString *cachePath = kCachePath;\n    NSString *folder = STRFORMAT(@\"%@/tvideo\",cachePath);\n    NSURL *fileURL = [NSURL fileURLWithPath:STRFORMAT(@\"%@/%@.tv\",folder,fileName)];"
        },
        {
            "comment": "This code snippet is responsible for storing and retrieving data from a file. It begins by preparing the necessary variables, such as the file URL, cache path, and model objects. Then, it creates a folder if it doesn't exist yet. The code uses asynchronous queues to write the data to the file and updates the models upon successful reading of the data on the main thread.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVPanelView.m\":331-356",
            "content": "    NSData *data = OBJ2DATA(self.models);\n    //2. \u65b0\u5efa\u6587\u4ef6\u5939\n    [[NSFileManager defaultManager] createDirectoryAtPath:folder withIntermediateDirectories:false attributes:nil error:nil];\n    BOOL success = [data writeToURL:fileURL options:NSDataWritingAtomic error:nil];\n    NSLog(@\"======> \u5b58\u50a8\u601d\u7ef4\u5f55\u50cf\u300a%@.tv\u300b%@\",fileName,success ? @\"\u6210\u529f\" : @\"\u5931\u8d25\");\n}\n-(void) tvideo_Read:(NSString*)fileName{\n    //1. \u6570\u636e\u51c6\u5907\n    NSString *cachePath = kCachePath;\n    NSURL *fileURL = [NSURL fileURLWithPath:STRFORMAT(@\"%@/tvideo/%@\",cachePath,fileName)];\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        @try {\n            //2. \u5f02\u6b65\u53d6\u6570\u636e;\n            NSArray *object = [NSKeyedUnarchiver unarchiveObjectWithFile:[fileURL path]];\n            //3. \u4e3b\u7ebf\u7a0b\u540c\u6b65\u6570\u636e\u548cUI;\n            dispatch_async(dispatch_get_main_queue(), ^{\n                //4. \u66f4\u65b0models\n                [self.models removeAllObjects];\n                [self.models addObjectsFromArray:object];\n                //5. \u8ba1\u7b97\u53d8\u5316\u6570;\n                [self.changeDic removeAllObjects];"
        },
        {
            "comment": "Updates the UI after setting a new dictionary in self.changeDic and retrieving data from TVUtil. This is done within a block to handle any exceptions that may occur.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/Panel/TVPanelView.m\":357-366",
            "content": "                [self.changeDic setDictionary:[TVUtil getChange_List:self.models]];\n                //6. \u66f4\u65b0UI;\n                [self refreshDisplay];\n            });\n        }@catch (NSException *exception) {}\n    });\n}\n@end"
        }
    ]
}