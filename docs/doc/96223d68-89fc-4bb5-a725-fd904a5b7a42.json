{
    "summary": "The create function in AIAbsCMVManager validates input, determines algorithm type and data source, constructs a General object, and creates a new AIAbsCMVNode by sorting, checking duplicates, inserting ports, relating to conMvs, and updating references.",
    "details": [
        {
            "comment": "Class AIAbsCMVManager implements a function create:, which takes two AIKVPointer objects as arguments and returns an instance of AIAbsCMVNode. The function first checks if the input data is valid and if the algType of both pointers match. If not valid or types don't match, it returns nil. If valid, it proceeds to call another create method with a NSArray of AIKVPointer objects. The algorithm type and datasource are determined by iterating through each pointer in the array and taking the first non-nil value encountered.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsCMVManager/AIAbsCMVManager.m\":0-38",
            "content": "//\n//  AIAbsCMVManager.m\n//  SMG_NothingIsAll\n//\n//  Created by iMac on 2018/7/27.\n//  Copyright \u00a9 2018\u5e74 XiaoGang. All rights reserved.\n//\n#import \"AIAbsCMVManager.h\"\n#import \"AINetAbsCMVUtil.h\"\n/**\n *  MARK:--------------------\u751f\u6210AINetAbsCMVNode--------------------\n */\n@implementation AIAbsCMVManager\n-(AIAbsCMVNode*) create:(AIKVPointer*)absFo_p aMv_p:(AIKVPointer*)aMv_p bMv_p:(AIKVPointer*)bMv_p {\n    //1. \u6570\u636e\n    BOOL valid = ISOK(aMv_p, AIKVPointer.class) && ISOK(bMv_p, AIKVPointer.class) && [STRTOOK(aMv_p.algsType) isEqualToString:bMv_p.algsType];\n    if (!valid) {\n        return nil;\n    }\n    return [self create:absFo_p conMvPs:@[aMv_p,bMv_p]];\n}\n-(AIAbsCMVNode*) create:(AIKVPointer*)absFo_p conMvPs:(NSArray*)conMv_ps{\n    //1. \u6570\u636e\n    if (!ARRISOK(conMv_ps)) {\n        return nil;\n    }\n    //2. \u53d6algsType & dataSource (\u6bcf\u4e00\u4e2aconMv\u90fd\u4e00\u81f4,\u5219\u7ee7\u627f,\u5426\u5219\u4f7f\u7528cMvNoneIdent)\n    NSString *algsType = nil;\n    NSString *dataSource = nil;\n    for (AIKVPointer *mv_p in conMv_ps) {\n        if (algsType == nil) {\n            algsType = mv_p.algsType;"
        },
        {
            "comment": "The code checks the algsType and dataSource to determine if they match the previous values. If not, it sets them to \"cMvNoneIdent\". It then retrieves the conMvs from conMv_ps, gets the absUrgentTo and absDelta using AINetAbsCMVUtil. Finally, it creates NetDataPointers for urgentTo_p and delta_p, and constructs a General object using create_General method with passed parameters.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsCMVManager/AIAbsCMVManager.m\":39-64",
            "content": "        }else if(![algsType isEqualToString:mv_p.algsType]){\n            algsType = cMvNoneIdent;\n        }\n        if (dataSource == nil) {\n            dataSource = mv_p.dataSource;\n        }else if(![dataSource isEqualToString:mv_p.dataSource]){\n            dataSource = cMvNoneIdent;\n        }\n    }\n    //3. \u5c06conMv_ps\u8f6c\u6362\u4e3aconMvs\n    NSArray *conMvs = [SMGUtils searchNodes:conMv_ps];\n    //4. \u53d6absUrgentTo & absDelta;\n    NSInteger absUrgentTo = [AINetAbsCMVUtil getAbsUrgentTo:conMvs];\n    NSInteger absDelta = [AINetAbsCMVUtil getAbsDelta:conMvs];\n    AIKVPointer *urgentTo_p = [theNet getNetDataPointerWithData:@(absUrgentTo) algsType:algsType dataSource:dataSource isOut:false];\n    AIKVPointer *delta_p = [theNet getNetDataPointerWithData:@(absDelta) algsType:algsType dataSource:dataSource isOut:false];\n    //5. \u6784\u5efa\u8fd4\u56de\n    return [self create_General:absFo_p conMvs:conMvs at:algsType ds:dataSource urgentTo_p:urgentTo_p delta_p:delta_p];\n}\n/**\n *  MARK:--------------------\u901a\u7528absMv\u6784\u5efa\u65b9\u6cd5--------------------\n *  @param absFo_p  : \u6307\u5411\u6b64absMv\u7684\u65f6\u5e8f\u6307\u9488;"
        },
        {
            "comment": "This method creates a new AIAbsCMVNode object, optionally using existing nodes to avoid duplicates. The input parameters include an array of value nodes (conMvs), their pointers (absFo_p), and other related information like at, ds, urgentTo_p, delta_p. The method first checks the validity of these inputs and then sorts them for potential duplicate checking. It also utilizes AINetIndexUtils to retrieve an existing node or create a new one if none are found.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsCMVManager/AIAbsCMVManager.m\":65-88",
            "content": " *  @param conMvs   : \u6b64absMv\u7684\u5177\u8c61\u4ef7\u503c\u8282\u70b9\u4eec;\n *  @version\n *      2023.08.09: \u652f\u6301\u5168\u5c40\u9632\u91cd (\u53c2\u800330095-\u65b9\u68483);\n */\n-(AIAbsCMVNode*) create_General:(AIKVPointer*)absFo_p conMvs:(NSArray*)conMvs at:(NSString*)at ds:(NSString*)ds urgentTo_p:(AIKVPointer*)urgentTo_p delta_p:(AIKVPointer*)delta_p{\n    //1. \u6570\u636e\n    if (!ARRISOK(conMvs) || !urgentTo_p || !delta_p) {\n        return nil;\n    }\n    at = STRTOOK(at);\n    ds = STRTOOK(ds);\n    NSArray *content_ps = @[urgentTo_p, delta_p];\n    NSArray *sort_ps = [SMGUtils sortPointers:content_ps];\n    //2. \u5168\u5c40\u9632\u91cd;\n    AIAbsCMVNode *result = [AINetIndexUtils getAbsoluteMatching_General:content_ps sort_ps:sort_ps except_ps:nil getRefPortsBlock:^NSArray *(AIKVPointer *item_p) {\n        return [SMGUtils filterArr:[AINetUtils refPorts_All4Value:item_p] checkValid:^BOOL(AIPort *item) {\n            return [kPN_ABS_CMV_NODE isEqualToString:item.target_p.folderName];\n        }];\n    } at:at ds:ds type:ATDefault];\n    //3. \u65e0\u5219\u65b0\u6784\u5efa;\n    if (!ISOK(result, AICMVNodeBase.class)) {\n        result = [[AIAbsCMVNode alloc] init];"
        },
        {
            "comment": "Creates a pointer and assigns values to urgentTo_p and delta_p. Inserts reference ports for the result, relates the result with given conMvs, sets default strong index, and updates the direction reference in the net. Returns the result.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsCMVManager/AIAbsCMVManager.m\":89-106",
            "content": "        result.pointer = [SMGUtils createPointer:kPN_ABS_CMV_NODE algsType:at dataSource:ds isOut:false type:ATDefault];\n        result.urgentTo_p = urgentTo_p;\n        result.delta_p = delta_p;\n    }\n    //4. \u62bd\u5177\u8c61\u5173\u8054\u63d2\u7ebf & \u5b58\u50a8\u62bd\u5177\u8c61\u8282\u70b9;\n    [AINetUtils insertRefPorts_AllMvNode:result value_p:result.urgentTo_p difStrong:1];//\u5f15\u7528\u63d2\u7ebf\n    [AINetUtils insertRefPorts_AllMvNode:result value_p:result.delta_p difStrong:1];//\u5f15\u7528\u63d2\u7ebf\n    [AINetUtils relateMvAbs:result conNodes:conMvs isNew:true];\n    //4. \u65b9\u5411\u7d22\u5f15\n    NSInteger indexStrong = [AINetAbsCMVUtil getDefaultStrong_Index:result conMvs:conMvs];\n    [theNet setMvNodeToDirectionReference:result difStrong:indexStrong];\n    return result;\n}\n@end"
        }
    ]
}