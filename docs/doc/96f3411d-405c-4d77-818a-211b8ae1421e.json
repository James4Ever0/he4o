{
    "summary": "This code includes SMGUtils and AIKVPointer classes with factory methods, sorting, searching, and Redis/SQL utilities for asynchronous object storage. It also uses XGWedis, AsyncMutableDictionary, and PINDiskCache for handling large datasets with array manipulation in SMGUtils. The code contains utility methods for filtering arrays and combining them without duplicates, along with helper functions for searching nodes, filtering arrays, validating array elements, and looping with customizable range and callback function.",
    "details": [
        {
            "comment": "This code file SMGUtils.m defines a class SMGUtils and provides several utility functions for creating, updating, and retrieving pointer IDs based on the algorithm type and data source. It also imports other necessary header files.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":0-31",
            "content": "//\n//  SMGUtils.m\n//  SMG_NothingIsAll\n//\n//  Created by \u8d3e  on 2017/4/19.\n//  Copyright \u00a9 2017\u5e74 XiaoGang. All rights reserved.\n//\n#import \"SMGUtils.h\"\n#import \"PINCache.h\"\n#import \"XGRedisUtil.h\"\n#import \"XGRedis.h\"\n@implementation SMGUtils\n//MARK:===============================================================\n//MARK:                     < PointerId >\n//MARK:===============================================================\n+(NSInteger) createPointerId:(NSString*)algsType dataSource:(NSString*)dataSource{\n    return [self createPointerId:true algsType:algsType dataSource:dataSource];\n}\n+(NSInteger) createPointerId:(BOOL)updateLastId algsType:(NSString*)algsType dataSource:(NSString*)dataSource{\n    NSInteger lastId = [SMGUtils getLastNetNodePointerId:algsType dataSource:dataSource];\n    if (updateLastId) {\n        [SMGUtils setNetNodePointerId:1 algsType:algsType dataSource:dataSource];\n    }\n    return lastId + 1;\n}\n+(NSInteger) getLastNetNodePointerId:(NSString*)algsType dataSource:(NSString*)dataSource{\n    ret"
        },
        {
            "comment": "This code retrieves the last net node pointer ID for a specific algorithm type and data source from user defaults, increments it by a given count, and then stores it back in the user defaults. It also creates a new AI key-value pointer using a helper function to generate a unique pointer ID based on the algorithm type and data source.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":31-48",
            "content": "urn [[NSUserDefaults standardUserDefaults] integerForKey:STRFORMAT(@\"AIPointer_LastNetNodePointerId_KEY_%@_%@\",algsType,dataSource)];\n}\n+(void) setNetNodePointerId:(NSInteger)count algsType:(NSString*)algsType dataSource:(NSString*)dataSource{\n    NSInteger lastPId = [self getLastNetNodePointerId:algsType dataSource:dataSource];\n    [[NSUserDefaults standardUserDefaults] setInteger:lastPId + count forKey:STRFORMAT(@\"AIPointer_LastNetNodePointerId_KEY_%@_%@\",algsType,dataSource)];\n    [[NSUserDefaults standardUserDefaults] synchronize];\n}\n//MARK:===============================================================\n//MARK:                     < AIPointer >\n//MARK:===============================================================\n//General\u6307\u9488\n+(AIKVPointer*) createPointer:(NSString*)folderName algsType:(NSString*)algsType dataSource:(NSString*)dataSource isOut:(BOOL)isOut type:(AnalogyType)type{\n    NSInteger pointerId = [SMGUtils createPointerId:algsType dataSource:dataSource];\n    //TODOTOMORROW: \u67e520151-BUG9 (\u6b64\u5904\u65b0\u6307\u9488\u6709\u91cd\u590d,\u5bfc\u81f4\u95ee\u9898);"
        },
        {
            "comment": "This code defines a class AIKVPointer and provides methods to create different types of pointers based on parameters such as folder name, algorithm type, data source, and whether it's an output pointer. These methods are used to generate pointers for direction, cerebel can out, and index value respectively.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":49-70",
            "content": "    if ([kPN_CMV_NODE isEqualToString:folderName] || [kPN_ABS_CMV_NODE isEqualToString:folderName]) {\n        WLog(@\"---------\u5f15\u7528\u5f3a\u5ea6BUG-mv\u65b0\u6307\u9488:%ld\",pointerId);\n    }\n    AIKVPointer *kvPointer = [AIKVPointer newWithPointerId:pointerId folderName:folderName algsType:algsType dataSource:dataSource isOut:isOut type:type];\n    return kvPointer;\n}\n//Direction\u7684mv\u5206\u533apointer;(\u5b58\u5f15\u7528\u5e8f\u5217)\n+(AIKVPointer*) createPointerForDirection:(NSString*)mvAlgsType direction:(MVDirection)direction{\n    NSInteger pointerId = 0;\n    AIKVPointer *kvPointer = [AIKVPointer newWithPointerId:pointerId folderName:kPN_DIRECTION((long)direction) algsType:mvAlgsType dataSource:DefaultDataSource isOut:false type:ATDefault];\n    return kvPointer;\n}\n//\u751f\u6210\u5c0f\u8111CanOut\u6307\u9488;\n+(AIKVPointer*) createPointerForCerebelCanOut{\n    AIKVPointer *pointer = [AIKVPointer newWithPointerId:0 folderName:kPN_CEREBEL_CANOUT algsType:DefaultAlgsType dataSource:DefaultDataSource isOut:false type:ATDefault];\n    return pointer;\n}\n//\u751f\u6210indexValue\u7684\u6307\u9488;\n+(AIKVPointer*) createPointerForValue:(NSString*)algsType dataSource:(NSString*)dataSource isOut:(BOOL)isOut{"
        },
        {
            "comment": "This code defines various factory methods for creating `AIKVPointer` objects. Each method creates a new instance of the class with specific parameters such as pointer ID, folder name, algorithms type, data source, and whether it is an output pointer or not. These methods are used to create different types of pointers like value, index, and data pointers.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":71-89",
            "content": "    NSInteger pointerId = [self createPointerId:algsType dataSource:dataSource];\n    return [AIKVPointer newWithPointerId:pointerId folderName:kPN_VALUE algsType:algsType dataSource:dataSource isOut:isOut type:ATDefault];\n}\n+(AIKVPointer*) createPointerForValue:(NSInteger)pointerId algsType:(NSString*)algsType dataSource:(NSString*)dataSource isOut:(BOOL)isOut{\n    return [AIKVPointer newWithPointerId:pointerId folderName:kPN_VALUE algsType:algsType dataSource:dataSource isOut:isOut type:ATDefault];\n}\n+(AIKVPointer*) createPointerForIndex{\n    NSInteger pointerId = 0;\n    return [AIKVPointer newWithPointerId:pointerId folderName:kPN_INDEX algsType:DefaultAlgsType dataSource:DefaultDataSource isOut:false type:ATDefault];\n}\n+(AIKVPointer*) createPointerForData:(NSString*)algsType dataSource:(NSString*)dataSource isOut:(BOOL)isOut{\n    NSInteger pointerId = 0;\n    return [AIKVPointer newWithPointerId:pointerId folderName:kPN_DATA algsType:algsType dataSource:dataSource isOut:isOut type:ATDefault];\n}\n/**"
        },
        {
            "comment": "This code defines methods for creating AIKVPointer objects for alg and fo in SMGUtils class. The alg pointer creation method takes folderName, at, dataSource, isOut, and type as parameters, while the fo pointer creation method only requires folderName, at, ds, and type. The methods use SMGUtils' createPointerId and createPointer helper methods.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":90-115",
            "content": " *  MARK:--------------------\u751f\u6210alg\u6307\u9488--------------------\n *  @version\n *      2021.09.25: \u5c06algsType\u7531pointerId\u6539\u4e3a\" \";\n *      2021.09.25: \u5c06at\u7531\u53c2\u6570\u4f20\u5165,\u56e0\u4e3a\u6709\u4e9b\u7a00\u758f\u7801\u6ca1\u6709ds(\u5982FLY_RDS),\u6b64\u65f6\u6784\u5efaglAlg,\u5c31\u53ea\u80fd\u4f20\u6765at (\u53c2\u800324021-\u6982\u5ff5\u90e8\u5206-4);\n */\n+(AIKVPointer*) createPointerForAlg:(NSString*)folderName at:(NSString*)at dataSource:(NSString*)dataSource isOut:(BOOL)isOut type:(AnalogyType)type{\n    NSInteger pointerId = [SMGUtils createPointerId:DefaultAlgsType dataSource:dataSource];\n    return [AIKVPointer newWithPointerId:pointerId folderName:folderName algsType:at dataSource:dataSource isOut:isOut type:type];\n}\n/**\n *  MARK:--------------------\u751f\u6210fo\u6307\u9488--------------------\n *  @version\n *      2021.09.25: \u5c06at\u7531\u53c2\u6570\u4f20\u5165,\u56e0\u4e3a\u6709\u4e9b\u7a00\u758f\u7801\u6ca1\u6709ds(\u5982FLY_RDS),\u6b64\u65f6\u6784\u5efaglFo,\u5c31\u53ea\u80fd\u4f20\u6765at (\u53c2\u800324021-\u65f6\u5e8f\u90e8\u5206-3);\n */\n+(AIKVPointer*) createPointerForFo:(NSString*)folderName at:(NSString*)at ds:(NSString*)ds type:(AnalogyType)type{\n    return [self createPointer:folderName algsType:at dataSource:ds isOut:false type:type];\n}\n@end\n/**\n *  MARK:--------------------\u6bd4\u8f83--------------------\n */\n@implementation SMGUtils (Compare)"
        },
        {
            "comment": "This method compares two objects (itemA and itemB) for equality, considering their type and using appropriate comparison methods. If both objects are nil, it returns true; otherwise, it checks the object's type and uses isKindOfClass to determine which comparison method to use. It supports comparing NSString, NSNumber, NSValue, NSArray, NSDictionary, and NSSet objects.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":117-133",
            "content": "//+(BOOL) compareItemA:(id)itemA itemB:(id)itemB{\n//    if (itemA == nil && itemB == nil) {\n//        return true;\n//    }else if(itemA == nil || itemB == nil || ![self compareKindClassWithItemA:itemA itemB:itemB]){\n//        return false;\n//    }else{\n//        if ([itemA isKindOfClass:[NSString class]]) {\n//            return [(NSString*)itemA isEqualToString:itemB];        //NSString\n//        }else if ([itemA isKindOfClass:[NSNumber class]]) {\n//            return [itemA isEqualToNumber:itemB];                   //NSNumber\n//        }else if ([itemA isKindOfClass:[NSValue class]]) {\n//            return [itemA isEqualToValue:itemB];                    //NSValue\n//        }else if ([itemA isKindOfClass:[NSArray class]]) {\n//            return [itemA isEqualToArray:itemB];                    //NSArray\n//        }else if ([itemA isKindOfClass:[NSDictionary class]]) {\n//            return [itemA isEqualToDictionary:itemB];               //NSDictionary\n//        }else if ([itemA isKindOfClass:[NSSet class]]) {"
        },
        {
            "comment": "The code is performing a series of type checks to determine the most appropriate comparison method for two objects. It uses \"isKindOfClass\" to check if the first object (itemA) belongs to any of several specific classes (NSSet, NSData, etc.), and then returns a corresponding equality check method (isEqualToSet, isEqualToData, etc.) based on which class it matches.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":134-147",
            "content": "//            return [itemA isEqualToSet:itemB];                      //NSSet\n//        }else if ([itemA isKindOfClass:[NSData class]]) {\n//            return [itemA isEqualToData:itemB];                     //NSData\n//        }else if ([itemA isKindOfClass:[NSDate class]]) {\n//            return [itemA isEqualToDate:itemB];                     //NSDate\n//        }else if ([itemA isKindOfClass:[NSAttributedString class]]) {\n//            return [itemA isEqualToAttributedString:itemB];         //NSAttributedString\n//        }else if ([itemA isKindOfClass:[NSIndexSet class]]) {\n//            return [itemA isEqualToIndexSet:itemB];                 //NSIndexSet\n//        }else if ([itemA isKindOfClass:[NSTimeZone class]]) {\n//            return [itemA isEqualToTimeZone:itemB];                 //NSTimeZone\n//        }else if ([itemA isKindOfClass:[NSHashTable class]]) {\n//            return [itemA isEqualToHashTable:itemB];                //NSHashTable\n//        }else if ([itemA isKindOfClass:[NSOrderedSet class]]) {"
        },
        {
            "comment": "The code defines methods to compare arrays and check if one item contains another. It uses conditional statements to determine the type of items in the array and compare them accordingly. The `compareArrayA:arrayB:` method checks if two arrays have the same elements, while the `compareItemA:containsItemB:` method checks if one item contains another.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":148-180",
            "content": "//            return [itemA isEqualToOrderedSet:itemB];               //NSOrderedSet\n//        }else if ([itemA isKindOfClass:[NSDateInterval class]]) {\n//            return [itemA isEqualToDateInterval:itemB];             //NSDateInterval\n//        }else{\n//            return [itemA isEqual:itemB];                           //\u4e0d\u8bc6\u522b\u7684\u7c7b\u578b\n//        }\n//    }\n//}\n//\n//+(BOOL) compareArrayA:(NSArray*)arrA arrayB:(NSArray*)arrB{\n//    if (arrA == nil && arrB == nil) {\n//        return true;\n//    }else if(!ARRISOK(arrA) || !ARRISOK(arrB)){\n//        return false;\n//    }else{\n//        for (NSObject *itemA in arrA) {\n//            BOOL find = false;\n//            for (NSObject *itemB in arrB) {\n//                if ([itemA isEqual:itemB]) {\n//                    find = true;\n//                    break;\n//                }\n//            }\n//            if (!find) {\n//                return false;\n//            }\n//        }\n//        return true;\n//    }\n//}\n//\n//+(BOOL) compareItemA:(id)itemA containsItemB:(id)itemB{\n//    if (itemB == nil) {"
        },
        {
            "comment": "This method compares an itemA with itemB to determine if itemB is contained in itemA. If both items are NSString, it checks if itemA contains itemB using the containsString method. If itemA is an NSArray and itemB is an object inside the array, it sets a flag to true for that object. If any of these objects do not match with itemB, it sets the flag to false. Finally, it returns the flag's status representing whether itemB is contained in itemA or not.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":181-202",
            "content": "//        return true;\n//    }else if(itemA == nil || ![self compareKindClassWithItemA:itemA itemB:itemB]){\n//        return false;\n//    }else{\n//        if ([itemA isKindOfClass:[NSString class]]) {\n//            return [(NSString*)itemA containsString:itemB];        //NSString\n//        }else if ([itemA isKindOfClass:[NSArray class]]) {\n//            BOOL itemAContainsItemB = true;//\u9ed8\u8ba4true;\u67e5\u5230\u4e00\u4e2a\u4e0d\u5305\u542b\u8bbe\u4e3afalse;\n//            for (id bItem in itemB) {\n//                BOOL aItemContainsBItem = false;//\u9ed8\u8ba4fale;\u67e5\u5230\u4e00\u4e2a\u5305\u542b\u8bbe\u4e3atrue;\n//                for (id aItem in itemA) {\n//                    if ([self compareItemA:aItem containsItemB:bItem]) {\n//                        aItemContainsBItem = true;\n//                        break;\n//                    }\n//                }\n//                if (!aItemContainsBItem) {\n//                    itemAContainsItemB = false;\n//                }\n//            }\n//            //return [itemA containsObject:itemB];\n//            return itemAContainsItemB;                    //NSArray"
        },
        {
            "comment": "The code checks if 'itemA' and 'itemB' are of different types, and for each type it applies the appropriate comparison method to determine if 'itemA' contains or is equal to 'itemB'. If any comparison returns false, the function returns false. Otherwise, if all comparisons pass, the function returns true.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":203-218",
            "content": "//        }else if ([itemA isKindOfClass:[NSDictionary class]]) {\n//            for (NSString *key in [(NSDictionary*)itemB allKeys]) { //NSDictionary\n//                if(![SMGUtils compareItemA:[(NSDictionary*)itemA objectForKey:key] containsItemB:[(NSDictionary*)itemB objectForKey:key]]){\n//                    return false;\n//                }\n//            }\n//            return true;\n//        }else if ([itemA isKindOfClass:[NSSet class]]) {\n//            return [itemA containsObject:itemB];                      //NSSet\n//        }else if ([itemA isKindOfClass:[NSDate class]]) {\n//            return [itemA containsDate:itemB];                     //NSDate\n//        }else if ([itemA isKindOfClass:[NSIndexSet class]]) {\n//            return [itemA containsIndexes:itemB];                 //NSIndexSet\n//        }else if ([itemA isKindOfClass:[NSHashTable class]]) {\n//            return [itemA containsObject:itemB];                //NSHashTable\n//        }else if ([itemA isKindOfClass:[NSOrderedSet class]]) {"
        },
        {
            "comment": "This code is comparing two objects, itemA and itemB. It first checks if both are nil and returns true if so. Then it checks if either of them is nil and returns false. Afterwards, it checks if itemA is an NSArray or a NSString or a NSDictionary and compares itemB accordingly. Finally, it compares the classes of itemA and itemB to determine if they are the same class or have an inheritance relationship.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":219-244",
            "content": "//            return [itemA containsObject:itemB];               //NSOrderedSet\n//        }else{\n//            return [SMGUtils compareItemA:itemA itemB:itemB];       //\u4e0d\u8bc6\u522b\u7684\u7c7b\u578b\n//        }\n//    }\n//}\n//\n//\n///**\n// *  MARK:--------------------\u5bf9\u6bd4itemA\u548citemB\u662f\u5426\u6709\u7ee7\u627f\u5173\u7cfb\u6216\u540c\u7c7b\u578b(NSObject\u9664\u5916)--------------------\n// */\n//+(BOOL) compareKindClassWithItemA:(id)itemA itemB:(id)itemB{\n//    if (itemA == nil && itemB == nil) {\n//        return true;\n//    }else if(itemA == nil || itemB == nil){\n//        return false;\n//    }else{\n//        if ([itemA isKindOfClass:[NSArray class]]) {\n//            return [itemB isKindOfClass:[NSArray class]];\n//        }else if([itemA isKindOfClass:[NSString class]]){\n//            return [itemB isKindOfClass:[NSString class]];\n//        }else if([itemA isKindOfClass:[NSDictionary class]]){\n//            return [itemB isKindOfClass:[NSDictionary class]];\n//        }else{\n//            BOOL isSeem = ([itemA class] == [itemB class]);\n//            BOOL isKind = ([itemA isKindOfClass:[itemB class]] || [itemB isKindOfClass:[itemA class]]);"
        },
        {
            "comment": "This function compares two NSArray objects refsA and refsB, checks if they have the same length, and returns a comparison result of their elements. If the lengths are different, it returns the difference as the result. If the lengths are the same, it iterates through each item in the arrays, retrieves the value associated with each pointer, compares the values, and returns the comparison result if they differ. If all items have the same value, it returns NSOrderedSame.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":245-274",
            "content": "//            return isSeem || isKind;\n//        }\n//    }\n//}\n/**\n *  MARK:--------------------\u6bd4\u8f83refsA\u662f\u5426\u6bd4refsB\u5927--------------------\n */\n//+(NSComparisonResult) compareRefsA_p:(NSArray*)refsA_p refsB_p:(NSArray*)refsB_p{\n//    //1. \u6570\u636e\u68c0\u67e5 & \u51c6\u5907\n//    refsA_p = ARRTOOK(refsA_p);\n//    refsB_p = ARRTOOK(refsB_p);\n//    NSInteger aLength = refsA_p.count;\n//    NSInteger bLength = refsB_p.count;\n//    \n//    //2. \u6bd4\u8f83\u5927\u5c0f\n//    for (NSInteger i = 0; i < MIN(aLength, bLength); i++) {\n//        AIKVPointer *itemA = ARR_INDEX(refsA_p, i);\n//        AIKVPointer *itemB = ARR_INDEX(refsB_p, i);\n//        NSNumber *aNum = [SMGUtils searchObjectForPointer:itemA fileName:kFNValue];\n//        NSNumber *bNum = [SMGUtils searchObjectForPointer:itemB fileName:kFNValue];\n//        NSComparisonResult result = [NUMTOOK(aNum) compare:NUMTOOK(bNum)] ;\n//        if (result != NSOrderedSame) {\n//            return result;\n//        }\n//    }\n//    \n//    //3. \u524d\u9762\u90fd\u4e00\u6837\n//    return aLength > bLength ? NSOrderedAscending : aLength < bLength ? NSOrderedDescending : NSOrderedSame;"
        },
        {
            "comment": "This code compares two objects: AIPointer and AIPort. It first checks if the object is valid, then compares their PointerId or StrongValue (for AIPort), sorting them either by PointerId (AIPointer) or StrongValue (AIPort) in ascending order.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":275-305",
            "content": "//}\n+(NSComparisonResult) comparePointerA:(AIPointer*)pA pointerB:(AIPointer*)pB{\n    //1. \u6570\u636e\u68c0\u67e5\n    BOOL aIsOk = ISOK(pA, AIKVPointer.class);\n    BOOL bIsOk = ISOK(pB, AIKVPointer.class);\n    if (!aIsOk || !bIsOk) {\n        return (aIsOk == bIsOk) ? NSOrderedSame : (aIsOk ? NSOrderedAscending : NSOrderedDescending);\n    }\n    //2. PointerId\u8d8a\u5c0f\u8d8a\u6392\u524d\u9762\n    if (pA.pointerId > pB.pointerId) {\n        return NSOrderedDescending;\n    }else if(pA.pointerId < pB.pointerId){\n        return NSOrderedAscending;\n    }else{\n        return [XGRedisUtil compareStrA:pA.identifier strB:pB.identifier];\n    }\n}\n+(NSComparisonResult) comparePortA:(AIPort*)pA portB:(AIPort*)pB{\n    //1. \u6570\u636e\u68c0\u67e5\n    BOOL aIsOk = ISOK(pA, AIPort.class);\n    BOOL bIsOk = ISOK(pB, AIPort.class);\n    if (!aIsOk || !bIsOk) {\n        return (aIsOk == bIsOk) ? NSOrderedSame : (aIsOk ? NSOrderedAscending : NSOrderedDescending);\n    }\n    //2. \u9ed8\u8ba4\u6309StrongValue\u4ece\u5c0f\u5230\u5927\u6392\u5e8f (self.strongValue\u8d8a\u5c0f\u8d8a\u6392\u524d\u9762)\n    if (pA.strong.value > pB.strong.value) {\n        return NSOrderedDescending;"
        },
        {
            "comment": "This code compares two values, pA and pB, for different data types such as strings, integers, and floating-point numbers. It returns the comparison result (NSOrderedAscending, NSOrderedDescending, or NSOrderedSame) based on their values. The code also includes functions to compare int and float values specifically.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":306-342",
            "content": "    }else if(pA.strong.value < pB.strong.value){\n        return NSOrderedAscending;\n    }else{\n        return [SMGUtils comparePointerA:pA.target_p pointerB:pB.target_p];\n    }\n}\n/**\n *  MARK:--------------------\u6bd4\u8f83intA\u662f\u5426\u6bd4intB\u5927--------------------\n */\n+(NSComparisonResult) compareIntA:(NSInteger)intA intB:(NSInteger)intB{\n    return intA > intB ? NSOrderedAscending : intA < intB ? NSOrderedDescending : NSOrderedSame;\n}\n/**\n *  MARK:--------------------\u6bd4\u8f83floatA\u662f\u5426\u6bd4floatB\u5927--------------------\n *  @desc \u4ece\u5927\u5230\u5c0f\u6392\u5e8f,\u524d\u5927\u540e\u5c0f;\n */\n+(NSComparisonResult) compareFloatA:(CGFloat)floatA floatB:(CGFloat)floatB{\n    return floatA > floatB ? NSOrderedAscending : floatA < floatB ? NSOrderedDescending : NSOrderedSame;\n}\n+(NSComparisonResult) compareDoubleA:(CGFloat)doubleA doubleB:(CGFloat)doubleB{\n    return doubleA > doubleB ? NSOrderedAscending : doubleA < doubleB ? NSOrderedDescending : NSOrderedSame;\n}\n@end\n@implementation SMGUtils (DB)\n/**\n *  MARK:--------------------SQL\u8bed\u53e5\u4e4browId--------------------\n */\n+(NSString*) sqlWhere_RowId:(NSInteger)rowid{"
        },
        {
            "comment": "This code defines methods for searching objects using pointers or file paths, and retrieves data from various sources like Redis. It includes utilities for creating SQL WHERE clauses and checking file paths.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":343-373",
            "content": "    return [NSString stringWithFormat:@\"rowid='%ld'\",(long)rowid];\n}\n//+(NSString*) sqlWhere_K:(id)columnName V:(id)value{\n//    return [NSString stringWithFormat:@\"%@='%@'\",columnName,value];\n//}\n//\n//+(NSDictionary*) sqlWhereDic_K:(id)columnName V:(id)value{\n//    if (value) {\n//        return [[NSDictionary alloc] initWithObjectsAndKeys:value,STRTOOK(columnName), nil];\n//    }\n//    return nil;\n//}\n+(id) searchObjectForPointer:(AIPointer*)pointer fileName:(NSString*)fileName{\n    return [self searchObjectForPointer:pointer fileName:fileName time:0];\n}\n+(id) searchObjectForPointer:(AIPointer*)pointer fileName:(NSString*)fileName time:(double)time{\n    if (ISOK(pointer, AIPointer.class)) {\n        return [self searchObjectForFilePath:pointer.filePath fileName:fileName time:time];\n    }\n    return nil;\n}\n+(id) searchObjectForFilePath:(NSString*)filePath fileName:(NSString*)fileName time:(double)time{\n    //1. \u6570\u636e\u68c0\u67e5\n    filePath = STRTOOK(filePath);\n    //2. \u4f18\u5148\u53d6redis\n    NSString *key = STRFORMAT(@\"%@/%@\",filePath,fileName);//\u968f\u540e\u53bb\u6389\u524d\u8f8d"
        },
        {
            "comment": "This code checks for an object with the given key in Redis, then falls back to Wedis and finally Disk if not found. It also allows inserting objects into Redis or Disk depending on the input parameters. The code also increments a debug counter and calls DebugR function after retrieving data from disk.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":374-403",
            "content": "    id result = [[XGRedis sharedInstance] objectForKey:key];\n    NSString *fromType = @\"XGRedis\";\n    //3. \u518d\u53d6wedis\n    if (result == nil) {\n        result = [[XGWedis sharedInstance] objectForKey:key];\n        fromType = @\"XGWedis\";\n        //4. \u6700\u540e\u53d6disk\n        if (result == nil) {\n            PINDiskCache *cache = [[PINDiskCache alloc] initWithName:@\"\" rootPath:filePath];\n            result = [cache objectForKey:fileName];\n            fromType = @\"Disk\";\n            DebugR();\n            theTC.tcDebug.lastRCount++;\n        }\n        //5. \u5b58\u5230redis (wedis/disk)\n        if (time > 0 && result) {\n            [[XGRedis sharedInstance] setObject:result forKey:key time:time];\n        }\n    }\n    return result;\n}\n//+(void) insertObject:(NSObject*)obj rootPath:(NSString*)rootPath fileName:(NSString*)fileName{\n//    [self insertObject:obj rootPath:rootPath fileName:fileName time:0 saveDB:true];\n//}\n+(void) insertObject:(NSObject*)obj pointer:(AIPointer*)pointer fileName:(NSString*)fileName time:(double)time{\n    if (ISOK(pointer, AIPointer.class)) {"
        },
        {
            "comment": "This code inserts an object into disk storage asynchronously and optionally saves it to the database. It uses XGWedis shared instance for key-value storage, AsyncMutableDictionary for persistence, and PINDiskCache for local disk caching. The save block iterates over all keys in the dictionary, extracts file name and root path, creates a new PINDiskCache object, and saves the object to disk.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":404-422",
            "content": "        [self insertObject:obj rootPath:pointer.filePath fileName:fileName time:time saveDB:true];\n    }\n}\n+(void) insertObject:(NSObject*)obj rootPath:(NSString*)rootPath fileName:(NSString*)fileName time:(double)time saveDB:(BOOL)saveDB{\n    //1. \u5b58disk (\u5f02\u6b65\u6301\u4e45\u5316)\n    NSString *key = STRFORMAT(@\"%@/%@\",rootPath,fileName);\n    if (saveDB) {\n        [[XGWedis sharedInstance] setObject:obj forKey:key];\n        //2. \u6301\u4e45\u5316block;\n        //2023.07.21: TC\u7ebf\u7a0b\u6539\u4e3a\u4e32\u884c\u4e86,\u6240\u4ee5\u6b64\u5904\u4e0d\u518d\u8c03\u7528\u4e3b\u7ebf\u7a0b\u6301\u4e45\u5316;\n        Act1 saveBlock = ^(AsyncMutableDictionary *dic) {\n            for (NSString *saveKey in dic.allKeys) {\n                id saveObj = [dic objectForKey:saveKey];\n                NSString *sep = @\"/\";\n                NSString *saveFileName = STRTOOK(ARR_INDEX_REVERSE(STRTOARR(saveKey, sep), 0));\n                NSString *saveRootPath = STRTOOK(SUBSTR2INDEX(saveKey, (saveKey.length - saveFileName.length - 1)));\n                PINDiskCache *cache = [[PINDiskCache alloc] initWithName:@\"\" rootPath:saveRootPath];\n                [cache setObject:saveObj forKey:saveFileName];"
        },
        {
            "comment": "This code seems to be implementing functionality related to searching and inserting nodes in a data structure. It includes methods for searching objects by file path and time, as well as searching and inserting multiple nodes at once. The code also sets up save blocks and interacts with Redis.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":423-461",
            "content": "                DebugW();\n                theTC.tcDebug.lastWCount++;\n            }\n            if (dic.count > 0) {\n                NSLog(@\">>>>>>>>>WriteDisk,%lu\",(unsigned long)dic.count);\n            }\n        };\n        [[XGWedis sharedInstance] setSaveBlock:saveBlock];\n    }\n    //2. \u5b58redis\n    [[XGRedis sharedInstance] setObject:obj forKey:key time:time];//\u968f\u540e\u53bb\u6389(redisKey)\u524d\u8f8d\n}\n+(id) searchNode:(AIKVPointer*)pointer {\n    if (ISOK(pointer, AIKVPointer.class)) {\n        return [self searchObjectForFilePath:pointer.filePath fileName:kFNNode time:cRTNode(pointer)];\n    }\n    return nil;\n}\n/**\n *  MARK:--------------------\u641c\u7d22\u8282\u70b9\u7ec4--------------------\n *  @result notnull\n */\n+(NSArray*) searchNodes:(NSArray*)ps {\n    //1. \u6570\u636e\u51c6\u5907\n    ps = ARRTOOK(ps);\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    //2. search\n    for (AIKVPointer *item_p in ps) {\n        AINodeBase *itemNode = [SMGUtils searchNode:item_p];\n        if (itemNode) [result addObject:itemNode];\n    }\n    return result;\n}\n+(void) insertNode:(AINodeBase*)node{"
        },
        {
            "comment": "This code contains functions to check if an array of sub-pointers (sub_ps) exists within another array of parent pointers (parent_ps). The `containsSub_ps` function takes in two arrays, checks if each sub-pointer is present in the parent pointers, and returns true if all are found. The `containsSub_p` function compares a single sub-pointer with the parent pointers to see if it exists within the array. The third function, `containsSub_p:parentPorts`, converts port objects into pointer objects and calls `containsSub_p` for comparison.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":462-497",
            "content": "    if (ISOK(node, AINodeBase.class)) {\n        [self insertObject:node pointer:node.pointer fileName:kFNNode time:cRTNode(node.pointer)];\n    }\n}\n@end\n//MARK:===============================================================\n//MARK:                     < SMGUtils (Contains) >\n//MARK:===============================================================\n@implementation SMGUtils (Contains)\n+(BOOL) containsSub_ps:(NSArray*)sub_ps parent_ps:(NSArray*)parent_ps{\n    sub_ps = ARRTOOK(sub_ps);\n    for (AIPointer *sub_p in sub_ps) {\n        if (![self containsSub_p:sub_p parent_ps:parent_ps]) {\n            return false;\n        }\n    }\n    return true;\n}\n+(BOOL) containsSub_p:(AIPointer*)sub_p parent_ps:(NSArray*)parent_ps{\n    if (ISOK(sub_p, AIPointer.class) && ARRISOK(parent_ps)) {\n        for (AIPointer *parent_p in parent_ps) {\n            if ([sub_p isEqual:parent_p]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n+(BOOL) containsSub_p:(AIPointer*)sub_p parentPorts:(NSArray*)parentPorts{\n    NSArray *parent_ps = [SMGUtils convertPointersFromPorts:parentPorts];"
        },
        {
            "comment": "This code is implementing a class named SMGUtils which has two functions - convertPointersFromPorts and convertPointersFromNodes. The function convertPointersFromPorts receives an array of ports as input and returns a new array containing only the pointers from those ports. Similarly, convertPointersFromNodes takes in an array of nodes and outputs a new array with only the pointers from those nodes. Finally, there is a function named convertPointers2String which converts an array of pointers to a string format.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":498-530",
            "content": "    return [SMGUtils containsSub_p:sub_p parent_ps:parent_ps];\n}\n@end\n//MARK:===============================================================\n//MARK:                     < SMGUtils (convert) >\n//MARK:===============================================================\n@implementation SMGUtils (Convert)\n+(NSMutableArray*) convertPointersFromPorts:(NSArray*)ports{\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    for (AIPort *port in ARRTOOK(ports)) {\n        if (ISOK(port, AIPort.class) && ISOK(port.target_p, AIPointer.class)) {\n            [result addObject:port.target_p];\n        }\n    }\n    return result;\n}\n+(NSMutableArray*) convertPointersFromNodes:(NSArray*)nodes{\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    for (AINodeBase *node in ARRTOOK(nodes)) {\n        if (ISOK(node, AINodeBase.class)) {\n            [result addObject:node.pointer];\n        }\n    }\n    return result;\n}\n+(NSString*) convertPointers2String:(NSArray*)pointers{\n    NSMutableString *mStr = [[NSMutableString alloc] init];"
        },
        {
            "comment": "The code contains three functions. The first function, starting at line 531, takes an array of AIPointers and concatenates their identifiers with their pointer ids, separated by commas. It returns a string containing this information.\n\nThe second function, marked with the comment \"2021.02.05: \u6982\u5ff5\u5d4c\u5957\u65e9\u5df2\u5e9f\u5f03\", converts an array of AIKVPointers into an array of MicroValuePs. It first checks if any pointer's folder name matches 'kPN_ALG_ABS_NODE'. If it does, the function calls [SMGUtils searchNode:value_p] to retrieve a corresponding algNode and adds its content_ps (if not null) to the result array. For all other pointers in the input array, it simply adds them to the result array.\n\nThe third function converts an array of any object type into an array of the specified convertBlock type. It first takes the non-null input array and initializes an empty NSMutableArray called 'result'. Then, for each element obj in arr, it applies the given convertBlock to obj and adds the resulting value to result. The function returns this populated result array.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":531-565",
            "content": "    for (AIPointer *p in ARRTOOK(pointers)) {\n        [mStr appendFormat:@\"%@_%ld,\",p.identifier,(long)p.pointerId];\n    }\n    return mStr;\n}\n//2021.02.05: \u6982\u5ff5\u5d4c\u5957\u65e9\u5df2\u5e9f\u5f03\n//+(NSMutableArray*) convertValuePs2MicroValuePs:(NSArray*)value_ps{\n//    //1. \u6570\u636e\u51c6\u5907\n//    NSMutableArray *mic_ps = [[NSMutableArray alloc] init];\n//\n//    //2. \u9010\u4e2a\u6536\u96c6\n//    for (AIKVPointer *value_p in value_ps) {\n//\n//        //3. \u6982\u5ff5\u5d4c\u5957\u65f6\n//        if ([kPN_ALG_ABS_NODE isEqualToString:value_p.folderName]) {\n//            AIAlgNodeBase *algNode = [SMGUtils searchNode:value_p];\n//\n//            //4. \u9012\u5f52\u53d6\u5d4c\u5957\u7684value_ps\n//            if (ISOK(algNode, AIAlgNodeBase.class)) {\n//                [mic_ps addObjectsFromArray:[self convertValuePs2MicroValuePs:algNode.content_ps]];\n//            }\n//        }\n//\n//        //5. \u975e\u6982\u5ff5\u5d4c\u5957\u65f6,\u76f4\u63a5\u6536\u96c6;\n//        [mic_ps addObject:value_p];\n//    }\n//    return mic_ps;\n//}\n//\u4efb\u610farr\u5143\u7d20\u7c7b\u578b\u8f6c\u6362 notnull\n+(NSMutableArray*) convertArr:(NSArray*)arr convertBlock:(id(^)(id obj))convertBlock{\n    //1. \u6570\u636e\u51c6\u5907;\n    arr = ARRTOOK(arr);\n    NSMutableArray *result = [[NSMutableArray alloc] init];"
        },
        {
            "comment": "This code contains several methods for converting and manipulating arrays. The first method loops through an array, applying a block to each object, and adds the converted objects to a new array. The second method accepts an array and a block, converts each object using the block, and returns a new array of the converted objects. The third method takes an array and a block, creates a dictionary from the objects in the array using the key-value pairs provided by the block, and returns the dictionary. The final section is unrelated to the previous code and seems to search for elements containing a specific value identifier in a \"foPorts\" list.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":567-602",
            "content": "    //2. \u8f6c\u6362\n    for (id obj in arr) {\n        id convertItem = convertBlock(obj);\n        if (convertItem) [result addObject:convertItem];\n    }\n    return result;\n}\n+(NSMutableArray*) convertArr:(NSArray*)arr convertItemArrBlock:(NSArray*(^)(id obj))convertItemArrBlock{\n    //1. \u6570\u636e\u51c6\u5907;\n    arr = ARRTOOK(arr);\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    //2. \u8f6c\u6362\n    for (id obj in arr) {\n        NSArray *convertItemArr = convertItemArrBlock(obj);\n        if (ARRISOK(convertItemArr)) [result addObjectsFromArray:convertItemArr];\n    }\n    return result;\n}\n/**\n *  MARK:--------------------\u5c06arr\u8f6c\u6210dic--------------------\n */\n+(NSDictionary*) convertArr2Dic:(NSArray*)objs kvBlock:(NSArray*(^)(id obj))kvBlock {\n    NSMutableDictionary *result = [[NSMutableDictionary alloc] init];\n    for (id obj in objs) {\n        NSArray *kvArr = kvBlock(obj);\n        id k = ARR_INDEX(kvArr, 0), v = ARR_INDEX(kvArr, 1);\n        if (k && v) [result setObject:v forKey:k];\n    }\n    return result;\n}\n/**\n *  MARK:--------------------\u4ecefoPorts\u4e2d\u627e\u51fa\u542bvalueIden\u7684\u5143\u7d20\u5e76\u8fd4\u56de--------------------"
        },
        {
            "comment": "This function `convertAlgPsFromFoPorts` takes an array of `foPorts` and a `valueIden` as input. It checks the first matching `alg` element in each `fo` and returns the first matching one, while it returns nil if no match is found. The code also includes functions for sorting pointers from largest to smallest.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":603-635",
            "content": " *  @desc \u6bcf\u4e2afo,\u4ec5\u5224\u65ad\u9996\u6761\u7b26\u5408\u7684alg;\n */\n+(NSMutableArray*) convertAlgPsFromFoPorts:(NSArray*)foPorts valueIden:(NSString*)valueIden{\n    return [SMGUtils convertArr:foPorts convertBlock:^id(AIPort *item) {\n        //1. \u4ecefo\u4e2d\u68c0\u67e5alg\u5143\u7d20\u662f\u5426\u5305\u542b\u540c\u533a\u7801 (\u5c06\u9996\u6761\u7b26\u5408\u7684\u8fd4\u56de);\n        AIFoNodeBase *fo = [SMGUtils searchNode:item.target_p];\n        NSArray *validAlg_ps = [SMGUtils filterAlg_Ps:fo.content_ps valueIdentifier:valueIden itemValid:nil];\n        if (ARRISOK(validAlg_ps)) {\n            return ARR_INDEX(validAlg_ps, 0);\n        }\n        //2. \u627e\u4e0d\u5230\u8fd4\u7a7a;\n        return nil;\n    }];\n}\n@end\n//MARK:===============================================================\n//MARK:                     < SMGUtils (Sort) >\n//MARK:===============================================================\n@implementation SMGUtils (Sort)\n+(NSArray*) sortPointers:(NSArray*)ps{\n    ps = ARRTOOK(ps);\n    return [ps sortedArrayUsingComparator:^NSComparisonResult(id  _Nonnull obj1, id  _Nonnull obj2) {\n        return [SMGUtils comparePointerA:obj1 pointerB:obj2];\n    }];\n}\n/**\n *  MARK:--------------------\u4ece\u5927\u5230\u5c0f\u6392\u5e8f--------------------"
        },
        {
            "comment": "This code defines a sorting method that takes an array and optional comparison blocks to sort the elements from big to small. The code performs three levels of comparison, prioritizing the first comparison block provided. It checks the input data, then applies the comparator function to sort the array in descending order.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":636-654",
            "content": " */\n+(NSArray*) sortBig2Small:(NSArray*)arr compareBlock:(double(^)(id obj))compareBlock{\n    return [SMGUtils sortBig2Small:arr compareBlock1:compareBlock compareBlock2:nil];\n}\n+(NSArray*) sortBig2Small:(NSArray*)arr compareBlock1:(double(^)(id obj))compareBlock1 compareBlock2:(double(^)(id obj))compareBlock2{\n    return [SMGUtils sortBig2Small:arr compareBlock1:compareBlock1 compareBlock2:compareBlock2 compareBlock3:nil];\n}\n+(NSArray*) sortBig2Small:(NSArray*)arr compareBlock1:(double(^)(id obj))compareBlock1 compareBlock2:(double(^)(id obj))compareBlock2 compareBlock3:(double(^)(id obj))compareBlock3 {\n    //1. \u6570\u636e\u68c0\u67e5;\n    arr = ARRTOOK(arr);\n    //2. \u6392\u5e8f\u8fd4\u56de;\n    return [arr sortedArrayUsingComparator:^NSComparisonResult(id  _Nonnull obj1, id  _Nonnull obj2) {\n        //3. \u4e00\u7ea7\u5bf9\u6bd4;\n        NSComparisonResult result = NSOrderedSame;\n        if (compareBlock1) result = [SMGUtils compareDoubleA:compareBlock1(obj1) doubleB:compareBlock1(obj2)];\n        //4. \u4e8c\u7ea7\u5bf9\u6bd4;\n        if (result == NSOrderedSame && compareBlock2) result = [SMGUtils compareDoubleA:compareBlock2(obj1) doubleB:compareBlock2(obj2)];"
        },
        {
            "comment": "This code snippet includes a method for sorting an array of objects in descending order using a provided comparison block, as well as methods for removing elements from arrays based on specific conditions. The SMGUtils class contains utility functions for various operations such as sorting and array manipulation.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":656-685",
            "content": "        //5. \u4e09\u7ea7\u5bf9\u6bd4;\n        if (result == NSOrderedSame && compareBlock3) result = [SMGUtils compareDoubleA:compareBlock3(obj1) doubleB:compareBlock3(obj2)];\n        return result;\n    }];\n}\n//\u4ece\u5c0f\u5230\u5927,\u5c31\u662f\u5927\u5230\u5c0f\u7684\u503c\u53d6\u8d1f (\u53cd\u8fc7\u6765);\n+(NSArray*) sortSmall2Big:(NSArray*)arr compareBlock:(double(^)(id obj))compareBlock{\n    return [SMGUtils sortBig2Small:arr compareBlock:^double(id obj) {\n        return -compareBlock(obj);\n    }];\n}\n@end\n//MARK:===============================================================\n//MARK:                     < SMGUtils (Remove) >\n//MARK:===============================================================\n@implementation SMGUtils (Remove)\n+(NSMutableArray*) removeSub_ps:(NSArray*)sub_ps parent_ps:(NSArray*)parent_ps{\n    sub_ps = ARRTOOK(sub_ps);\n    NSMutableArray *result = [[NSMutableArray alloc] initWithArray:parent_ps];\n    for (AIPointer *sub_p in sub_ps) {\n        result = [self removeSub_p:sub_p parent_ps:result];\n    }\n    return result;\n}\n+(NSMutableArray*) removeSub_p:(AIPointer*)sub_p parent_ps:(NSArray*)parent_ps{"
        },
        {
            "comment": "This code defines a series of methods for manipulating arrays, such as removing items and preventing duplicates. The methods take in an array as input and return a new array with specified modifications. The performance consideration is mentioned for the \"removeRepeat\" method when handling large datasets.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":686-716",
            "content": "    NSMutableArray *result_ps = [[NSMutableArray alloc] initWithArray:parent_ps];\n    if (ISOK(sub_p, AIPointer.class)) {\n        [result_ps removeObject:sub_p];\n    }\n    return result_ps;\n}\n/**\n *  MARK:--------------------\u79fb\u9664--------------------\n *  @param checkValid : \u5c06\u8981\u79fb\u9664\u7684item\u8fd4\u56detrue,\u4fdd\u7559\u7684\u8fd4\u56defalse;\n */\n+(NSMutableArray*) removeArr:(NSArray *)arr checkValid:(BOOL(^)(id item))checkValid {\n    NSMutableArray *result = [[NSMutableArray alloc] initWithArray:arr];\n    NSArray *removeItems = [SMGUtils filterArr:arr checkValid:checkValid limit:NSIntegerMax];\n    [result removeObjectsInArray:removeItems];\n    return result;\n}\n/**\n *  MARK:--------------------\u9632\u91cd--------------------\n *  _param convertBlock : \u7528\u4e8e\u8f6c\u6362\"\u5224\u65ad\u9632\u91cd\u7684\u6570\u636e\u7c7b\u578b\";\n *  @desc \u6027\u80fd\u8bf4\u660e: \u5f53AIPort\u7c7b\u578b\u65f6,\u9632\u91cd5000\u6761\u4ee5\u4e0a\u65f6,\u7528\u65f6\u7ecf\u5e381.5s\u4ee5\u4e0a (\u6240\u4ee5\u6b64\u65b9\u6cd5\u5c3d\u91cf\u5c11\u7528);\n *  @result notnull\n */\n+(NSMutableArray*) removeRepeat:(NSArray*)protoArr{\n    return [self removeRepeat:protoArr convertBlock:^id(id obj) {\n        return obj;\n    }];\n}\n+(NSMutableArray*) removeRepeat:(NSArray*)protoArr convertBlock:(id(^)(id obj))convertBlock{"
        },
        {
            "comment": "This code filters and collects unique proto objects from an array (protoArr) by converting them into their respective types using the convertBlock function. It then checks if each converted proto object is already in the resultConverteds array, and adds it to both the result and resultConverteds arrays if not. Additionally, there are two other methods, filterSameIdentifier_p and filterSameIdentifier_Dic, that help filter AIKVPointer objects based on their identifiers. The code also includes a commented out method filterSameIdentifier_Arr for filtering proto objects based on validity checks.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":717-746",
            "content": "    //1. \u6570\u636e\u51c6\u5907\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    NSMutableArray *resultConverteds = [[NSMutableArray alloc] init];\n    protoArr = ARRTOOK(protoArr);\n    //2. \u9632\u91cd\u6536\u96c6\n    for (id proto in protoArr) {\n        //3. \u5c06\u5df2\u6536\u96c6\u90e8\u5206\u548c\u5f53\u524dproto\u8f6c\u4e3aconverted\u540e\u7684\u7c7b\u578b;\n        id protoConverted = convertBlock(proto);\n        //4. \u5224\u65ad\u662f\u5426\u5df2\u5305\u542b (\u672a\u5305\u542b\u5219\u6536\u96c6);\n        if (![resultConverteds containsObject:protoConverted]) {\n            [result addObject:proto];\n            [resultConverteds addObject:protoConverted];\n        }\n    }\n    return result;\n}\n+(AIKVPointer*) filterSameIdentifier_p:(AIKVPointer*)a_p b_ps:(NSArray*)b_ps{\n    if (!a_p) return nil;\n    return ARR_INDEX([self filterSameIdentifier_Dic:@[a_p] b_ps:b_ps].allValues, 0);\n}\n+(NSMutableDictionary*) filterSameIdentifier_Dic:(NSArray*)a_ps b_ps:(NSArray*)b_ps{\n    return [SMGUtils filterPointers:a_ps b_ps:b_ps checkItemValid:^BOOL(AIKVPointer *a_p, AIKVPointer *b_p) {\n        return a_p ? [a_p.identifier isEqualToString:b_p.identifier] : false;\n    }];\n}\n//+(NSArray*) filterSameIdentifier_Arr:(NSArray*)from_ps valid_ps:(NSArray*)valid_ps{"
        },
        {
            "comment": "This code filters a list of AIKVPointer objects based on their identifiers. It returns the objects that have the same identifier but different pointer IDs, and also provides methods to filter by arrays or specific pointers with checkValid functions.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":747-769",
            "content": "//    NSMutableArray *result = [[NSMutableArray alloc] init];\n//    [SMGUtils foreach:from_ps b_ps:valid_ps tryOut:^(AIKVPointer *a_p, AIKVPointer *b_p) {\n//        if ([a_p.identifier isEqualToString:b_p.identifier]) {\n//            [result addObject:a_p];\n//        }\n//    }];\n//    return result;\n//}\n+(AIKVPointer*) filterSameIdentifier_DiffId_p:(AIKVPointer*)a_p b_ps:(NSArray*)b_ps{\n    if (! a_p) return nil;\n    return ARR_INDEX([SMGUtils filterSameIdentifier_DiffId_ps:@[a_p] b_ps:b_ps].allValues, 0);\n}\n+(NSMutableDictionary*) filterSameIdentifier_DiffId_ps:(NSArray*)a_ps b_ps:(NSArray*)b_ps{\n    return [SMGUtils filterPointers:a_ps b_ps:b_ps checkItemValid:^BOOL(AIKVPointer *a_p, AIKVPointer *b_p) {\n        if (a_p && b_p) {\n            return [a_p.identifier isEqualToString:b_p.identifier] && a_p.pointerId != b_p.pointerId;\n        }\n        return false;\n    }];\n}\n+(NSArray*) filterPointers:(NSArray *)from_ps checkValid:(BOOL(^)(AIKVPointer *item_p))checkValid {\n    return [self filterArr:from_ps checkValid:checkValid];"
        },
        {
            "comment": "This method takes two arrays, `a_ps` and `b_ps`, and filters them based on a given condition specified by the `checkItemValid` block. It returns a dictionary (`result`) where the keys are objects from array `a_ps` and the values are objects from array `b_ps` that pass the `checkItemValid` condition.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":770-799",
            "content": "}\n+(NSMutableDictionary*) filterPointers:(NSArray *)a_ps b_ps:(NSArray*)b_ps checkItemValid:(BOOL(^)(AIKVPointer *a_p,AIKVPointer *b_p))checkItemValid {\n    //1. \u6570\u636e\u51c6\u5907\n    NSMutableDictionary *result = [[NSMutableDictionary alloc] init];\n    a_ps = ARRTOOK(a_ps);\n    b_ps = ARRTOOK(b_ps);\n    for (AIKVPointer *a_p in a_ps) {\n        for (AIKVPointer *b_p in b_ps) {\n            if (checkItemValid && checkItemValid(a_p,b_p)) {\n                [result setObject:b_p forKey:OBJ2DATA(a_p)];\n            }\n        }\n    }\n    return result;\n}\n/**\n *  MARK:--------------------\u4ea4\u96c6--------------------\n *  @version\n *      2020.12.13: \u4f7f\u4e4b\u6539\u4e3a\u4fdd\u6301parent_ps\u6709\u5e8f (\u4ee5\u524d\u7684\u65e7\u6709\u65b9\u5f0f\u662fdic\u7b5b\u9009,\u4f1a\u4f7f\u65e0\u5e8f,\u5bfc\u81f4\u539f\u6709\u5e8f\u88ab\u6253\u4e71,\u6bd4\u5982\u53c2\u800321194\u7684BUG);\n *  @result notnull\n */\n+(NSArray*) filterArrA:(NSArray*)arrA arrB:(NSArray*)arrB {\n    return [self filterArr:arrB checkValid:^BOOL(id item) {\n        return [arrA containsObject:item];\n    }];\n}\n+(NSMutableArray*) filterArr:(NSArray *)arr checkValid:(BOOL(^)(id item))checkValid {\n    return [SMGUtils filterArr:arr checkValid:checkValid limit:NSIntegerMax];"
        },
        {
            "comment": "This code contains two methods, `filterArr` and `filterDic`, for filtering arrays and dictionaries respectively based on a given condition. It also has a method `filterPorts_Normal` which filters ports using the `analogyType`. The code performs data preparation, iterates over the input array or dictionary, checks the validity of each item, and stops when reaching the specified limit.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":800-834",
            "content": "}\n+(NSMutableArray*) filterArr:(NSArray *)arr checkValid:(BOOL(^)(id item))checkValid limit:(NSInteger)limit{\n    //1. \u6570\u636e\u51c6\u5907\n    arr = ARRTOOK(arr);\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    //2. \u7b5b\u9009\n    for (id item in arr) {\n        if (checkValid && checkValid(item)) {\n            [result addObject:item];\n            if (result.count >= limit) break;\n        }\n    }\n    return result;\n}\n+(NSMutableDictionary*) filterDic:(NSDictionary *)dic checkValid:(BOOL(^)(id key,id value))checkValid {\n    //1. \u6570\u636e\u51c6\u5907\n    dic = DICTOOK(dic);\n    NSMutableDictionary *result = [[NSMutableDictionary alloc] init];\n    //2. \u7b5b\u9009\n    for (id key in dic.allKeys) {\n        id value = [dic objectForKey:key];\n        if (checkValid && checkValid(key,value)) {\n            [result setObject:value forKey:key];\n        }\n    }\n    return result;\n}\n//\u7528analogyType\u6765\u7b5b\u9009ports\n+(NSArray*) filterPorts_Normal:(NSArray*)ports{\n    NSArray *noTypes = @[@(ATGreater),@(ATLess),@(ATHav),@(ATNone),\n                         @(ATPlus),@(ATSub),@(ATDiff),@(ATSame)];"
        },
        {
            "comment": "This code filters ports based on specified type arrays. It first checks if the input data is valid, and then filters the ports array based on two conditions: whether they are included in a given \"havTypes\" array (if not empty) or not included in a given \"noTypes\" array (if not empty). The function returns either the filtered ports array or a single valid port, depending on the usage of the function.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":835-865",
            "content": "    return [SMGUtils filterPorts:ports havTypes:nil noTypes:noTypes];\n}\n+(NSArray*) filterPorts:(NSArray*)ports havTypes:(NSArray*)havTypes noTypes:(NSArray*)noTypes{\n    //1. \u6570\u636e\u68c0\u67e5\n    havTypes = ARRTOOK(havTypes);\n    noTypes = ARRTOOK(noTypes);\n    ports = ARRTOOK(ports);\n    //3. \u7b5b\u9009\u7c7b\u578b\n    return [SMGUtils filterArr:ports checkValid:^BOOL(AIPort *item) {\n        //a. hav\u7b5b\u9009 (\u5fc5\u987b\u88abhavDSArr\u5305\u542b);\n        if (ARRISOK(havTypes) && ![havTypes containsObject:@(item.target_p.type)]) return false;\n        //b. no\u7b5b\u9009 (\u5fc5\u987b\u4e0d\u88abnoDSArr\u5305\u542b);\n        if (ARRISOK(noTypes) && [noTypes containsObject:@(item.target_p.type)]) return false;\n        //c. \u5e72\u4e0d\u6b7b\u7684,\u6709\u6548;\n        return true;\n    }];\n}\n+(id) filterSingleFromArr:(NSArray *)arr checkValid:(BOOL(^)(id item))checkValid {\n    arr = ARRTOOK(arr);\n    for (id item in arr) {\n        if (checkValid && checkValid(item)) return item;\n    }\n    return nil;\n}\n/**\n *  MARK:--------------------\u7b5b\u9009alg by \u6307\u5b9a\u6807\u8bc6--------------------\n *  @desc \u4ecealg_ps\u4e2d\u67e5\u627e\u542bvalueIdentifier\u6807\u8bc6\u7a00\u758f\u7801\u7684\u6982\u5ff5\u5e76\u8fd4\u56de;\n *  @result \u9010\u6761\u8fd4\u56de + \u4e2d\u65ad\u524d\u6240\u6709\u6536\u96c6\u5168\u8fd4\u56de;"
        },
        {
            "comment": "This code defines two methods: `filterAlg_Ps` and `filterPointers`. The first method filters an array of AI algorithm pointers based on a specified value identifier, executing a block for each valid pointer found. The second method filters an array of pointers based on whether they are marked as \"out\" or not. Both methods use the `SMGUtils` class to perform the filtering operations.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":866-895",
            "content": " */\n+(NSArray*) filterAlg_Ps:(NSArray*)alg_ps valueIdentifier:(NSString*)valueIdentifier itemValid:(void(^)(AIAlgNodeBase *alg,AIKVPointer *value_p))itemValid{\n    return [SMGUtils filterPointers:alg_ps checkValid:^BOOL(AIKVPointer *item_p) {\n        AIAlgNodeBase *alg = [SMGUtils searchNode:item_p];\n        if (alg) {\n            for (AIKVPointer *itemValue_p in alg.content_ps) {\n                if ([valueIdentifier isEqualToString:itemValue_p.identifier]) {\n                    if (itemValid) itemValid(alg,itemValue_p);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }];\n}\n/**\n *  MARK:--------------------\u7b5b\u9009\u6307\u9488 by isOut--------------------\n *  @param proto_ps : \u4ece\u4e2d\u7b5b\u9009\n *  @param isOut : false\u65f6\u7b5b\u9009\u51fa\u975eout\u7684pointers\n *  \u6ce8:\u672a\u5224\u5b9a\u662f\u5426\u8fde\u7eed;\n */\n+(NSArray*) filterPointers:(NSArray*)proto_ps isOut:(BOOL)isOut{\n    return [SMGUtils filterPointers:proto_ps checkValid:^BOOL(AIKVPointer *item_p) {\n        return item_p.isOut == isOut;\n    }];\n}\n/**\n *  MARK:--------------------\u7b5b\u9009\u6307\u9488 by \u6307\u5b9a\u6807\u8bc6--------------------"
        },
        {
            "comment": "The code defines three utility methods for filtering arrays of pointers, algorithm ports, and foreign ports based on specified identifiers. It uses other helper functions from the SMGUtils class to search nodes, filter arrays, and check array elements' validity. The filterAlgPorts and filterFoPorts methods take advantage of these utility methods to perform specific filtering tasks in their respective contexts.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":896-917",
            "content": " */\n+(NSArray*) filterPointers:(NSArray*)from_ps identifier:(NSString*)identifier{\n    return [SMGUtils filterPointers:from_ps checkValid:^BOOL(AIKVPointer *item_p) {\n        return [identifier isEqualToString:item_p.identifier];\n    }];\n}\n/**\n *  MARK:--------------------\u7b5b\u9009\u7aef\u53e3 by \u6307\u5b9a\u6807\u8bc6--------------------\n */\n+(NSArray*) filterAlgPorts:(NSArray*)algPorts valueIdentifier:(NSString*)valueIdentifier{\n    return [SMGUtils filterArr:algPorts checkValid:^BOOL(AIPort *item) {\n        AIAlgNodeBase *alg = [SMGUtils searchNode:item.target_p];\n        return ARRISOK([SMGUtils filterPointers:alg.content_ps identifier:valueIdentifier]);\n    }];\n}\n//\u7b5b\u9009foPorts\u4e2d,\u5305\u542b\u7a00\u758f\u7801\u540c\u533a\u7801\u7684;\n+(NSArray*) filterFoPorts:(NSArray*)foPorts valueIdentifier:(NSString*)valueIdentifier{\n    return [SMGUtils filterArr:foPorts checkValid:^BOOL(AIPort *item) {\n        //\u68c0\u67e5fo.content\u662f\u5426\u5305\u542b\u67d0\u540c\u533a\u7801\u7a00\u758f\u7801;\n        AIFoNodeBase *fo = [SMGUtils searchNode:item.target_p];\n        return ARRISOK([SMGUtils filterAlg_Ps:fo.content_ps valueIdentifier:valueIdentifier itemValid:nil]);"
        },
        {
            "comment": "The code contains two functions: `filterFos` and methods in the `Collect` category of `SMGUtils`. The `filterFos` function filters `fos` array, keeping only elements that contain certain sparse code and dense code. In the `Collect` category, there are two methods: `collectArrA` adds all elements from `arrB` to `arrA`, resulting in a new mutable array; `collectArrA_NoRepeat` collects both `arrA` and `arrB`, ignoring any duplicates and returning the result.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":918-947",
            "content": "    }];\n}\n//\u7b5b\u9009fos\u4e2d,\u5305\u542b\u7a00\u758f\u7801\u540c\u533a\u7801\u7684;\n+(NSArray*) filterFos:(NSArray*)fos valueIdentifier:(NSString*)valueIdentifier{\n    return [SMGUtils filterArr:fos checkValid:^BOOL(AIFoNodeBase *fo) {\n        //\u68c0\u67e5fo.content\u662f\u5426\u5305\u542b\u67d0\u540c\u533a\u7801\u7a00\u758f\u7801;\n        return ARRISOK([SMGUtils filterAlg_Ps:fo.content_ps valueIdentifier:valueIdentifier itemValid:nil]);\n    }];\n}\n@end\n//MARK:===============================================================\n//MARK:                     < SMGUtils (Collect) >\n//MARK:===============================================================\n@implementation SMGUtils (Collect)\n+(NSMutableArray *) collectArrA:(NSArray*)arrA arrB:(NSArray*)arrB{\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    [result addObjectsFromArray:arrA];\n    [result addObjectsFromArray:arrB];\n    return result;\n}\n//\u4e0d\u7ba1\u987a\u5e8f: \u5148\u6536\u96c6bigArr\u518d\u6536\u96c6littleArr\n+(NSMutableArray *) collectArrA_NoRepeat:(NSArray*)arrA arrB:(NSArray*)arrB{\n    //1. \u6570\u636e\u51c6\u5907;\n    arrA = ARRTOOK(arrA);\n    arrB = ARRTOOK(arrB);\n    NSArray *litArr = arrA.count < arrB.count ? arrA : arrB;"
        },
        {
            "comment": "The code collects two arrays, firstArr and secondArr, in order, without duplicates. It first arranges the larger array and then processes the smaller one, ensuring the order is maintained. The function collects firstArr elements into a result array and then iteratively adds elements from secondArr if they are not already present in the result array.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":948-982",
            "content": "    NSArray *bigArr = arrA.count < arrB.count ? arrB : arrA;\n    //2. \u5148\u6536\u96c6\u5927\u7684,\u518d\u6536\u96c6\u5c0f\u7684;\n    return [SMGUtils collectArrA_NoRepeat_Sort:bigArr arrB:litArr];\n}\n//\u4fdd\u6301\u987a\u5e8f: \u5148\u6536\u96c6first\u518d\u6536\u96c6second\n+(NSMutableArray *) collectArrA_NoRepeat_Sort:(NSArray*)firstArr arrB:(NSArray*)secondArr{\n    //1. \u6570\u636e\u51c6\u5907;\n    firstArr = ARRTOOK(firstArr);\n    secondArr = ARRTOOK(secondArr);\n    //2. \u5148\u6536\u96c6\u5927\u7684;\n    NSMutableArray *result = [[NSMutableArray alloc] initWithArray:firstArr];\n    //3. \u518d\u6536\u96c6\u5c0f\u7684;\n    for (id second in secondArr) {\n        if (![result containsObject:second]) {\n            [result addObject:second];\n        }\n    }\n    return result;\n}\n@end\n//MARK:===============================================================\n//MARK:                     < SMGUtils (Other) >\n//MARK:===============================================================\n@implementation SMGUtils (Other)\n//+(void) foreach:(NSArray *)a_ps b_ps:(NSArray*)b_ps tryOut:(void(^)(AIKVPointer *a_p,AIKVPointer *b_p))tryOut {\n//    a_ps = ARRTOOK(a_ps);\n//    b_ps = ARRTOOK(b_ps);\n//    for (AIKVPointer *a_p in a_ps) {"
        },
        {
            "comment": "The code is a method named 'fori' that takes an array, minimum and maximum values, and a callback function. It performs a loop iterating through the array from the minimum to the maximum value (in reverse order if 'forward' parameter is set to false). The callback function is executed for each item in the array and can interrupt the loop if it returns true.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIClass/Utils/SMGUtils.m\":983-1007",
            "content": "//        for (AIKVPointer *b_p in b_ps) {\n//            if (tryOut) tryOut(a_p,b_p);\n//        }\n//    }\n//}\n/**\n *  MARK:--------------------for\u6b63\u53cd\u5e8f\u6267\u884c--------------------\n *  @param min : \u5faa\u73af\u542bmin\n *  @param max : \u6267\u884c\u5230max-1 (\u4e0d\u542bmax);\n *  @param run : \u6bcf\u6761\u56de\u8c03,\u8fd4\u56detrue\u65f6,\u4e2d\u65ad\u5faa\u73af;\n */\n+(void) fori:(NSArray *)arr min:(NSInteger)min max:(NSInteger)max run:(BOOL(^)(id item,NSInteger i))run forward:(BOOL)forward{\n    //1. \u6570\u636e\u68c0\u67e5;\n    arr = ARRTOOK(arr);\n    if (!forward) return;\n    //2. \u6267\u884c\u5faa\u73af;\n    for (NSInteger i = min; i < max; i++) {\n        NSInteger index = forward ? i : max - i - 1;\n        if (run(ARR_INDEX(arr, index),index)) return;\n    }\n}\n@end"
        }
    ]
}