{
    "summary": "The TCDebug class is used for iOS app debugging, tracking operation time, detecting freezes, and allowing log categories. The code checks execution thresholds, logs information, switches to \"plant mode\" if criteria are met, and manages last operation times.",
    "details": [
        {
            "comment": "This code defines a class TCDebug, which helps analyze and report the debugging process. It tracks the operation time, detects if the app is stuck, and allows specifying specific log categories to print. The class also has properties for storing the last few operations' time, the most recent operation time, loop time, and operator.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TCDebug/TCDebug.m\":0-43",
            "content": "//\n//  TCDebug.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2022/8/20.\n//  Copyright \u00a9 2022\u5e74 XiaoGang. All rights reserved.\n//\n#import \"TCDebug.h\"\n//\u5224\u65ad\u5361\u4e86\u529f\u80fd->\u5f00\u5173\n#define TCDebugKaleSwitch false\n//\u8c03\u8bd5\u4e2d\u7684TC\u540d\u79f0 (\u5f53\u524d\u8c03\u8bd5\u54ea\u4e2a,\u5c31\u6539\u6210\u54ea\u4e2a\u540d\u79f0);\n#define DebugingTC @\"TCRecognition.m\"\n//\u7ed3\u679c\u6253\u5370\u7684TC\u540d\u79f0\u4eec (\u5f53\u524d\u8981\u6253\u5370\u54ea\u4e9b\u7ed3\u679c,\u5c31\u7eb3\u5165\u54ea\u4e9b\u540d\u79f0);\n#define LogingTCs @[@\"TCRecognition.m\", @\"TIUtils.m\",@\"AINetUtils.m\",@\"SMGUtils.m\"]\n//\u5bf9\u6700\u540e\u591a\u5c11\u6761\u65f6\u95f4\u6c47\u603b\u5206\u6790\n#define DebugLastOperesNum 3\n//\u5224\u65ad\u4e3a\u5361\u72b6\u6001\u7684\u9608\u503c (\u5355\u4f4d:ms)\n#define DebugKaleTime 1600\n@interface TCDebug()\n//\u6700\u540e\u51e0\u6b21\u8c03\u8bd5\u4e2d\u64cd\u4f5c\u7528\u65f6\u8bb0\u5f55;\n@property (strong, nonatomic) NSMutableArray *lastOperesTimeArr;\n@property (assign, nonatomic) NSTimeInterval lastOperTime;\n@property (assign, nonatomic) NSTimeInterval lastLoopTime;\n@property (strong, nonatomic) NSString *lastOperater;\n@end\n@implementation TCDebug\n/**\n *  MARK:--------------------\u4ee3\u7801\u5757\u62a5\u544a--------------------\n *  @desc \u8bf4\u660e:\n *          1. \u8c03\u8bd5\u7528\u65f6: \u5927\u4e8emin\u65f6,\u624d\u7b97\u8fbe\u5230\"\u5206\u6790\u8868\"\u5165\u95e8\u8d44\u683c;\n *          2. \u8c03\u8bd5\u5361\u987f:\n *              a. \u8bb0\u5f55\u5f53\u524d\u6b63\u5728\u8c03\u8bd5\u7684DebugingTC\u6700\u540eDebugLastOperesNum(10\u6761);\n *              b. \u5e73\u5747\u7528\u65f6\u8d85\u8fc7DebugKaleTime(800ms)\u65f6,\u5219\u5224\u5b9a\u4e3a\u5361\u987f\u72b6\u6001;"
        },
        {
            "comment": "This code snippet is part of a debugging function for TC (possibly Thinking Creature) in an iOS app. It updates the operation count and checks if the execution time exceeds a given threshold. If it does, it logs information about the operation count, execution time, and reading/writing counts. Additionally, it monitors for any potential freezes by checking if the previous operation is related to debugging TC and storing the operation times in an array.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TCDebug/TCDebug.m\":44-67",
            "content": " *              c. \u5224\u65ad\u5361\u987f\u65f6,\u8f6c\u4e3a\u690d\u7269\u72b6\u6001,\u5e76\u6682\u505c\u5f3a\u5316\u8bad\u7ec3;\n *  @use \u4f7f\u7528\u8bf4\u660e:\n *          1. \u8c03\u8bd5TC\u7684\u64cd\u4f5c (\u7528\u4e8e\u6bcf\u4e2a\u601d\u7ef4TC\u6a21\u5757\u5f00\u59cb\u65f6\u8c03\u7528);\n *          2. \u8c03\u8bd5\u4ee3\u7801\u5757\u7684\u64cd\u4f5c (\u6bcf\u6b21\u4ee3\u7801\u5757\u6267\u884c\u7684\u6027\u80fd\u62a5\u544a);\n *  @param min : Oper\u64cd\u4f5c\u5254\u9664\u6700\u5c0f\u6570\u7684\u9608\u503c (\u5355\u4f4d:ms) (\u8d85\u8fc7\u8fd9\u4e2a\u503c\u65f6\u4f1a\u6253\u5370,\u4e0d\u8d85\u8fc7\u4e0d\u6253\u5370);\n */\n-(void) updateOperCount:(NSString*)operater min:(NSInteger)min {\n    //\u529f\u80fd1: ============ \u8c03\u8bd5\u7528\u65f6 ============\n    NSTimeInterval now = [NSDate new].timeIntervalSince1970 * 1000;\n    NSTimeInterval useTime = now - self.lastOperTime;\n    BOOL thanMin = useTime > min;\n    if (self.lastOperTime > 0 && thanMin) {\n        //1. \u6253\u5370\u8ba1\u6570\u65e5\u5fd7;\n        NSString *useTimeStr = @\"\";\n        for (int i = 0; i < (int)(useTime / 100); i++) {useTimeStr = STRFORMAT(@\"%@*\",useTimeStr);}\n        NSLog(@\"[%@ => %@] \u64cd\u4f5c\u8ba1\u6570:%lld \u7528\u65f6:%@ (%.0f) (\u8bfb:%ld \u5199:%ld)\",self.lastOperater,operater,theTC.getOperCount,useTimeStr,useTime,self.lastRCount,self.lastWCount);\n    }\n    //\u529f\u80fd2: ============ \u5224\u65ad\u5361\u987f ============\n    if (TCDebugKaleSwitch && thanMin && [self.lastOperater containsString:DebugingTC]) {\n        //1. \u5b5810\u6761;\n        [self.lastOperesTimeArr addObject:@(useTime)];"
        },
        {
            "comment": "Code snippet checks if the count of `lastOperesTimeArr` is greater than a predefined limit, calculates the total time spent in `self.lastOperesTimeArr`, and determines if the average usage time exceeds a specified threshold (800ms). If the count is sufficient and the average time meets the criteria, it switches to \"plant mode\" and pauses training. Additionally, it debugs specific slow reasons for performance.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TCDebug/TCDebug.m\":68-102",
            "content": "        if (self.lastOperesTimeArr.count > DebugLastOperesNum) {\n            [self.lastOperesTimeArr removeObjectAtIndex:0];\n        }\n        //2. \u7b97\u51fa10\u6761\u603b\u8017\u65f6;\n        double sumUseTime = 0;\n        for (NSNumber *item in self.lastOperesTimeArr) {\n            sumUseTime += item.doubleValue;\n        }\n        //3. \u5e73\u5747\u8017\u65f6>800ms\u65f6,\u5c5e\u4e8e\u5361\u987f\u72b6\u6001;\n        BOOL lastKale = sumUseTime > DebugKaleTime * self.lastOperesTimeArr.count;\n        //4. \u8fbe\u523010\u6b21,\u624d\u5224\u65ad\u662f\u5426\u5361;\n        BOOL lastLimited = self.lastOperesTimeArr.count >= DebugLastOperesNum;\n        //5. \u601d\u7ef4\u63a7\u5236\u5668\u5de5\u4f5c\u6b63\u5e38,\u4e14\u5224\u65ad\u5361\u4f4f\u65f6,\u8f6c\u5165\u690d\u7269\u72b6\u6001;\n        if (theTC.thinkMode == 0 && lastLimited && lastKale) {\n            //a. \u8bbe\u4e3a\u690d\u7269\u6a21\u5f0f;\n            NSLog(@\"\u64cd\u4f5c\u8ba1\u6570\u5224\u65ad\u5f53\u524d\u4e3a: \u5361\u987f\u72b6\u6001,\u8f6c\u4e3a\u690d\u7269\u6a21\u5f0f\");\n            theTC.thinkMode = 2;\n            //b. \u5e76\u6682\u505c\u5f3a\u5316\u8bad\u7ec3;\n            [theRT setPlaying:false];\n            //d. \u8c03\u8bd5\u5177\u4f53\u6162\u539f\u56e0\u6027\u80fd;\n            for (NSString *logingTC in LogingTCs) {\n                [theDebug print:TCDebugPrefixV2(logingTC) rmPrefix:TCDebugRMPrefixV2(logingTC)];\n            }\n        }\n    }\n    //5. \u8bb0\u5f55lastOperater\n    self.lastOperTime = now;"
        },
        {
            "comment": "This code snippet initializes a class instance and provides a method for updating the loop ID. It also includes a private method for managing an array of last operation times.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TCDebug/TCDebug.m\":103-130",
            "content": "    self.lastOperater = operater;\n    self.lastRCount = 0;\n    self.lastWCount = 0;\n}\n/**\n *  MARK:--------------------\u8c03\u8bd5TC\u7684\u5faa\u73af--------------------\n */\n-(void) updateLoopId {\n    //\u8c03\u8bd5\u7528\u65f6\n    NSTimeInterval now = [NSDate new].timeIntervalSince1970 * 1000;\n    NSTimeInterval useTime = now - self.lastLoopTime;\n    if (self.lastLoopTime > 0 && useTime > 2000)\n        NSLog(@\"\u5faa\u73af\u8ba1\u6570\u66f4\u65b0:%lld \u7528\u65f6:%.0f ========================================\",theTC.getLoopId,useTime);\n    self.lastLoopTime = now;\n}\n//MARK:===============================================================\n//MARK:                     < privateMethod >\n//MARK:===============================================================\n-(NSMutableArray*) lastOperesTimeArr {\n    if (!_lastOperesTimeArr) {\n        _lastOperesTimeArr = [[NSMutableArray alloc] init];\n    }\n    return _lastOperesTimeArr;\n}\n@end"
        }
    ]
}