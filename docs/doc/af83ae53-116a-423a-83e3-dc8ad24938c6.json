{
    "summary": "This code initializes a singleton XGConfig instance, sets default config values, creates directories, logs file paths, and handles configuration changes. It defines methods for obtaining key values, URLs, and folders from the config dictionary, reloading if necessary.",
    "details": [
        {
            "comment": "This code initializes a singleton instance of the XGConfig class, sets default config values, and creates the necessary directory for storing configuration files. The code also logs the path to the current file and writes the default config values to disk atomically.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGConfig/XGConfig.m\":0-36",
            "content": "//\n//  XGConfig.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2022/8/25.\n//  Copyright \u00a9 2022\u5e74 XiaoGang. All rights reserved.\n//\n#import \"XGConfig.h\"\n@interface XGConfig ()\n@property (strong, nonatomic) NSString *lastReloadIden;         //\u52a0\u8f7d\u6807\u8bc6 (\u5f53\u6807\u8bc6\u53d8\u5316\u65f6,\u4f1a\u89e6\u53d1\u91cd\u65b0\u52a0\u8f7d);\n@property (strong, nonatomic) NSMutableDictionary *configDic;   //\u914d\u7f6e\u5b57\u5178;\n@end\n@implementation XGConfig\nstatic id mInstance;\n+(XGConfig*) instance{\n    if (mInstance == nil) mInstance = [[XGConfig alloc] init];\n    return mInstance;\n}\n/**\n *  MARK:--------------------\u521d\u59cb\u914d\u7f6e--------------------\n */\n-(void) initConfig{\n    self.configDic = [[NSMutableDictionary alloc] initWithObjectsAndKeys:\n                      @(false),xgConfigKeyZiWuMode,\n                      @(true),xgConfigKeyTest,\n                      @(false),xgConfigKeyPauseRLT,\n                      nil];\n    NSLog(@\"%@\",[self url].path);\n    [[NSFileManager defaultManager] createDirectoryAtPath:[self folder] withIntermediateDirectories:false attributes:nil error:nil];\n    BOOL success = [self.configDic writeToURL:[self url] atomically:true];"
        },
        {
            "comment": "This code initializes XGConfig, responds to configuration changes by updating the system and temporarily pausing reinforcement learning training. It also allows setting and writing values into the configuration dictionary and logging success or failure of these operations.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGConfig/XGConfig.m\":37-76",
            "content": "    NSLog(@\"======> XGConfig\u521d\u59cb\u5316%@\",success ? @\"\u6210\u529f\" : @\"\u5931\u8d25\");\n}\n/**\n *  MARK:--------------------\u54cd\u5e94\u914d\u7f6e\u53d8\u5316\u5230\u7cfb\u7edf--------------------\n */\n-(void) responseXGConfig2HE {\n    //1. \u91cd\u52a0\u8f7d\n    [self reloadConfigDic];\n    //2. \u66f4\u65b0\u914d\u7f6e\u5bfc\u81f4\u7684\u53d8\u5316\u5230\u7cfb\u7edf;\n    if (NUMTOOK([self.configDic objectForKey:xgConfigKeyZiWuMode]).boolValue) {\n        theTC.thinkMode = 2;\n        NSLog(@\"======> XGConfig\u54cd\u5e94: \u8fdb\u5165\u690d\u7269\u6a21\u5f0f\");\n    }\n    //b. \u6682\u505c\u5f3a\u5316\u8bad\u7ec3;\n    if (NUMTOOK([self.configDic objectForKey:xgConfigKeyPauseRLT]).boolValue) {\n        [theRT setPlaying:false];\n        NSLog(@\"======> XGConfig\u54cd\u5e94: \u6682\u505c\u5f3a\u5316\u8bad\u7ec3\");\n    }\n}\n/**\n *  MARK:--------------------\u5199\u914d\u7f6e--------------------\n */\n-(void) setValue:(id)value forKey:(NSString*)key{\n    //1. \u672a\u52a0\u8f7d\u8fc7,\u5219\u5148\u521d\u59cb\u5316\u52a0\u8f7d;\n    if (!self.configDic) {\n        [self reloadConfigDic];\n    }\n    //2. \u65b0\u503c\u5199\u5165;\n    [self.configDic setObject:value forKey:key];\n    BOOL success = [self.configDic writeToURL:[self url] atomically:true];\n    NSLog(@\"======> \u914d\u7f6e\u5199\u5165K:%@ V:%@ (%@)\",key,value,success ? @\"\u6210\u529f\" : @\"\u5931\u8d25\");\n}\n/**\n *  MARK:--------------------\u8bfb\u914d\u7f6e--------------------"
        },
        {
            "comment": "This code defines a method for retrieving the value of a key from a configuration dictionary. If the reloadIden has changed, it reloads the config dictionary. The class also includes methods for obtaining the URL and folder associated with the configuration.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/XGConfig/XGConfig.m\":77-110",
            "content": " */\n-(id) valueForKey:(NSString*)key reloadIden:(NSString*)reloadIden{\n    if (![STRTOOK(self.lastReloadIden) isEqualToString:reloadIden]) {\n        [self reloadConfigDic];\n    }\n    id value = [self.configDic objectForKey:key];\n    NSLog(@\"======> \u914d\u7f6e\u53d6\u503cK:%@ V:%@\",key,value);\n    return value;\n}\n//MARK:===============================================================\n//MARK:                     < privateMethod >\n//MARK:===============================================================\n//\u91cd\u52a0\u8f7d\u6570\u636e;\n-(void) reloadConfigDic{\n    //1. \u53d6\u6570\u636e;\n    @try {\n        NSDictionary *db = DICTOOK([NSDictionary dictionaryWithContentsOfURL:[self url]]);\n        self.configDic = [[NSMutableDictionary alloc] initWithDictionary:db];\n    }@catch (NSException *exception) {}\n}\n// notnull\n-(NSURL*) url{\n    return [NSURL fileURLWithPath:STRFORMAT(@\"%@/%@\",[self folder],xgConfigFile)];\n}\n-(NSString*) folder{\n    NSString *cachePath = kCachePath;\n    return STRFORMAT(@\"%@/%@\",cachePath,xgConfigPath);\n}\n@end"
        }
    ]
}