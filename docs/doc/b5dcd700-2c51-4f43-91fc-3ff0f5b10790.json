{
    "summary": "The code defines classes for module-related data display and node views with default values, click event methods, delegate interface, and interaction. It handles subviews, sorts algorithms, calculates coordinates, tracks nodes, collects relationships, and draws network connections.",
    "details": [
        {
            "comment": "Initializing the NVModuleView, setting background color to clear, loading nib and adding subview, applying constraints for leading edge alignment.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVModuleView.m\":0-44",
            "content": "//\n//  NVModuleView.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2019/6/12.\n//  Copyright \u00a9 2019\u5e74 XiaoGang. All rights reserved.\n//\n#import \"NVModuleView.h\"\n#import \"MASConstraint.h\"\n#import \"View+MASAdditions.h\"\n#import \"NVNodeView.h\"\n#import \"NodeCompareModel.h\"\n#import \"NVViewUtil.h\"\n#import \"NVModuleUtil.h\"\n#import \"NVConfig.h\"\n@interface NVModuleView ()<NVNodeViewDelegate>\n@property (strong,nonatomic) IBOutlet UIView *containerView;\n@property (weak, nonatomic) IBOutlet UILabel *titleLab;\n@end\n@implementation NVModuleView\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initView];\n        [self initData];\n        [self initDisplay];\n    }\n    return self;\n}\n-(void) initView{\n    //self\n    [self setBackgroundColor:[UIColor clearColor]];\n    //containerView\n    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self.class) owner:self options:nil];\n    [self addSubview:self.containerView];\n    [self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.leading.mas_equalTo(self);"
        },
        {
            "comment": "This code defines a class, likely for displaying data related to modules. It initializes the data array and provides methods to set the module ID or node data for this view. The setDataWithNodeDatas: method filters out any duplicate node data in order to only add unique items to the nodeArr array. Finally, it calls refreshDisplayWithNodeDatas: method with the valid datas.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVModuleView.m\":45-82",
            "content": "        make.trailing.mas_equalTo(self);\n        make.top.mas_equalTo(self);\n        make.bottom.mas_equalTo(self);\n    }];\n}\n-(void) initData{\n    _nodeArr = [[NSMutableArray alloc] init];\n}\n-(void) initDisplay{\n}\n//MARK:===============================================================\n//MARK:                     < method >\n//MARK:===============================================================\n-(void) setDataWithModuleId:(NSString*)moduleId{\n    _moduleId = moduleId;\n    [self.titleLab setText:STRTOOK(self.moduleId)];\n}\n-(void) setDataWithNodeData:(id)nodeData{\n    if (nodeData) {\n        [self setDataWithNodeDatas:@[nodeData]];\n    }\n}\n-(void) setDataWithNodeDatas:(NSArray*)nodeDatas{\n    NSMutableArray *validDatas = [[NSMutableArray alloc] init];\n    if (ARRISOK(nodeDatas)) {\n        for (id item in nodeDatas) {\n            if (![self.nodeArr containsObject:item]) {\n                [self.nodeArr addObject:item];\n                [validDatas addObject:item];\n            }\n        }\n        [self refreshDisplayWithNodeDatas:validDatas];"
        },
        {
            "comment": "This code is responsible for displaying new nodes, rearranging existing nodes with layout algorithms, and removing specified nodes from the view. It uses a containerView to manage subviews of type NVNodeView and maintains an internal array of node data called \"nodeArr\". The code includes methods to refresh the display with new or updated node data (refreshDisplayWithNodeDatas) and remove specific node data from the view (removeNodeDatas).",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVModuleView.m\":83-119",
            "content": "    }\n}\n-(void) refreshDisplayWithNodeDatas:(NSArray*)nodeDatas{\n    //1. \u663e\u793a\u65b0\u8282\u70b9\n    for (id nodeData in ARRTOOK(nodeDatas)) {\n        NVNodeView *nodeView = [[NVNodeView alloc] init];\n        nodeView.delegate = self;\n        [nodeView setDataWithNodeData:nodeData];\n        [self.containerView addSubview:nodeView];\n    }\n    //2. \u8282\u70b9\u6392\u7248\u7b97\u6cd5,\u91cd\u7f6e\u8ba1\u7b97\u6240\u6709\u8282\u70b9\u5750\u6807;\n    [self refreshDisplay_Node];\n    //3. \u91cd\u7ed8\u5173\u8054\u7ebf\n    [self refreshDisplay_Line:nodeDatas];\n}\n/**\n *  MARK:--------------------\u79fb\u9664\u8282\u70b9--------------------\n *  @version\n *      2021.08.13: \u4fee\u590dremoveArr\u65b9\u6cd5\u9519\u8bef,\u5bfc\u81f4\u79fb\u9664\u4e0d\u5168\u9762,\u6539\u7528removeSub_ps\u65b9\u6cd5\u540eok;\n */\n-(void) removeNodeDatas:(NSArray*)nodeDatas{\n    //1. \u6570\u636e\u68c0\u67e5;\n    nodeDatas = ARRTOOK(nodeDatas);\n    //2. \u53d6\u5230\u7b26\u5408\u7684NodeView\n    NSArray *allNode = [self.containerView subViews_AllDeepWithClass:NVNodeView.class];\n    allNode = [SMGUtils filterArr:allNode checkValid:^BOOL(NVNodeView *item) {\n        return [nodeDatas containsObject:item.data];\n    }];\n    //3. \u5220\u9664\u6570\u636e,\u5220\u9664NodeView;\n    _nodeArr = [SMGUtils removeSub_ps:nodeDatas parent_ps:self.nodeArr];\n    for (UIView *view in allNode) {"
        },
        {
            "comment": "This code appears to be implementing a node layout algorithm for a view, involving clearing and refreshing the display of nodes and lines. It also has methods for handling nodes and clearing data. The code contains functions for getting sort groups, converting index dictionaries with compare models, and retrieving all subviews of a specific class.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVModuleView.m\":120-154",
            "content": "        [view removeFromSuperview];\n    }\n    //4. \u8282\u70b9\u6392\u7248\u7b97\u6cd5,\u91cd\u7f6e\u8ba1\u7b97\u6240\u6709\u8282\u70b9\u5750\u6807;\n    [self refreshDisplay_Node];\n    //5. \u5237\u65b0\u5373\u6709\u7ebf\u7684\u5750\u6807;\n    [self refreshDisplay_Line:self.nodeArr];\n}\n-(void) clear{\n    //1. \u6e05\u6570\u636e\n    [self.nodeArr removeAllObjects];\n    //2. \u6e05\u8282\u70b9\n    NSArray *nodeViews = ARRTOOK([self subViews_AllDeepWithClass:NVNodeView.class]);\n    for (NVNodeView *nodeView in nodeViews) {\n        [nodeView removeFromSuperview];\n    }\n}\n//MARK:===============================================================\n//MARK:                     < Node >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u8282\u70b9\u6392\u7248\u7b97\u6cd5--------------------\n *  1. \u6709\u53ef\u80fd,a\u7ec4\u4e0eb\u7ec4\u95f4\u6ca1\u62bd\u5177\u8c61\u5173\u7cfb;\u6b64\u65f6\u53ea\u80fd\u9ed8\u8ba4\u5f80\u5e95\u90e8\u6392;\n */\n-(void) refreshDisplay_Node{\n    //1. \u627e\u51fa\u6240\u6709\u6709\u5173\u7cfb\u7684NodeCompareModel\n    NSArray *compareModels = [self getNodeCompareModels];\n    NSDictionary *indexDic = [NVModuleUtil convertIndexDicWithCompareModels:compareModels];\n    //2. \u83b7\u53d6\u5206\u7ec4\u6570\u636e;\n    NSArray *sortGroups = [NVModuleUtil getSortGroups:self.nodeArr compareModels:compareModels indexDic:indexDic];"
        },
        {
            "comment": "This code iterates through an array of nodes and their corresponding positions, calculating x and y coordinates for each node view based on the input data. It also keeps track of the number of nodes in the same layer to calculate the correct y-coordinate offsets.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVModuleView.m\":156-177",
            "content": "    //3. \u6839\u636e\u7f16\u53f7\u8ba1\u7b97\u5750\u6807;\n    NSArray *nodeViews = ARRTOOK([self subViews_AllDeepWithClass:NVNodeView.class]);\n    //4. \u540c\u5c42\u8ba1\u6570\u5668 (\u672c\u5c42\u8282\u70b9\u4e2a\u6570)\n    NSMutableDictionary *yLayerCountDic = [[NSMutableDictionary alloc] init];\n    int curX = -1;\n    for (NSArray *sortGroup in sortGroups) {\n        for (id sortItem in sortGroup) {\n            for (NVNodeView *nodeView in nodeViews) {\n                if ([nodeView.data isEqual:sortItem]) {\n                    //5. \u53d6xIndex\u548cyIndex;\n                    NSData *key = OBJ2DATA(nodeView.data);\n                    NSInteger x = ++curX;\n                    NSInteger y = [NUMTOOK([indexDic objectForKey:key]) integerValue];\n                    //6. \u540c\u5c42y\u503c\u504f\u79fb\u91cf (\u4ea4\u95193 & \u504f\u79fb8)\n                    NSInteger layerCount = [NUMTOOK([yLayerCountDic objectForKey:@(y)]) intValue];\n                    [yLayerCountDic setObject:@(layerCount + 1) forKey:@(y)];\n                    //7. \u8282\u70b9\u5750\u6807\n                    float spaceX = MIN(cXSpace, (self.width - cNodeSize) / nodeViews.count);\n                    nodeView.x = x * spaceX;"
        },
        {
            "comment": "This code is part of a view implementation for an object called SMGNetVision. It collects relationships between nodes in the form of NodeCompareModels. The outer loop iterates over each node, and the inner loop compares it with all subsequent nodes. For each pair, it checks if one node abstractly points to the other or if one node concretely points to the other, adding a NodeCompareModel instance to the result array if necessary.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVModuleView.m\":178-204",
            "content": "                    nodeView.y = (self.height - cNodeSize) - (y * cLayerSpace) - (layerCount % 3) * cYSpace;\n                }\n            }\n        }\n    }\n}\n/**\n *  MARK:--------------------\u6536\u96c6\u6240\u6709nodeData\u7684\u5173\u7cfb\u6a21\u578b--------------------\n */\n-(NSArray*)getNodeCompareModels {\n    //1. \u8fdb\u884c\u4e00\u4e00\u6bd4\u8f83,\u5e76\u6536\u96c6;\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    for (NSInteger i = 0; i < self.nodeArr.count; i++) {\n        for (NSInteger j = i + 1; j < self.nodeArr.count; j++) {\n            id iData = ARR_INDEX(self.nodeArr, i);\n            id jData = ARR_INDEX(self.nodeArr, j);\n            if (iData && jData) {\n                //2. n1\u62bd\u8c61\u6307\u5411n2\n                NSArray *iAbs = ARRTOOK([self moduleView_AbsNodeDatas:iData]);\n                if ([iAbs containsObject:jData]) {\n                    [result addObject:[NodeCompareModel newWithBig:jData small:iData]];\n                    continue;\n                }\n                //3. n1\u5177\u8c61\u6307\u5411n2\n                NSArray *iCon = ARRTOOK([self moduleView_ConNodeDatas:iData]);\n                if ([iCon containsObject:jData]) {"
        },
        {
            "comment": "This code calculates the associations between nodes in a network. It collects all line data as arrays of length 2, iterates through each node's data, gathers related node data, and checks if they are not self, have a relationship, and are not duplicates. Finally, it returns the resulting array.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVModuleView.m\":205-232",
            "content": "                    [result addObject:[NodeCompareModel newWithBig:iData small:jData]];\n                }\n            }\n        }\n    }\n    return result;\n}\n//MARK:===============================================================\n//MARK:                     < Line >\n//MARK:===============================================================\n-(void) refreshDisplay_Line:(NSArray*)newNodeDatas{\n    //1. \u6536\u96c6\u6240\u6709\u7ebf\u7684\u6570\u636e (\u5143\u7d20\u4e3a\u957f\u5ea6\u4e3a2\u7684\u6570\u7ec4);\n    NSMutableArray *lineDatas = [[NSMutableArray alloc] init];\n    newNodeDatas = ARRTOOK(newNodeDatas);\n    //2. \u9010\u4e2a\u8282\u70b9\u8fdb\u884c\u5173\u8054\u5224\u65ad;\n    NSArray *netDatas = ARRTOOK([self moduleView_GetAllNetDatas]);\n    for (id item in newNodeDatas) {\n        //3. \u53d6\u56db\u79cd\u5173\u8054\u7aef\u53e3;\n        NSArray *absDatas = ARRTOOK([self moduleView_AbsNodeDatas:item]);\n        NSArray *conDatas = ARRTOOK([self moduleView_ConNodeDatas:item]);\n        NSArray *contentDatas = ARRTOOK([self moduleView_ContentNodeDatas:item]);\n        NSArray *refDatas = ARRTOOK([self moduleView_RefNodeDatas:item]);\n        //4. \u5bf9\u7f51\u7edc\u4e2d\u5404\u8282\u70b9,\u5224\u5b9a\u5173\u8054 (\u975e\u672c\u8eab & \u6709\u5173\u7cfb & \u672a\u91cd\u590d)\n        for (id netItem in netDatas) {"
        },
        {
            "comment": "Code snippet initializes a boolean variable `havRelate` indicating if `netItem` is related to `absDatas`, `conDatas`, `contentDatas`, or `refDatas`. If the `item` is not equal to `netItem` and `havRelate` is true, adds `[item, netItem]` to `lineDatas`. Finally, calls `moduleView_DrawLine:lineDatas` to draw lines.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVModuleView.m\":233-257",
            "content": "            BOOL havRelate = ([absDatas containsObject:netItem] || [conDatas containsObject:netItem] || [contentDatas containsObject:netItem] || [refDatas containsObject:netItem]);\n            if (![item isEqual:netItem] && havRelate && ![NVViewUtil containsLineData:@[item,netItem] fromLineDatas:lineDatas]) {\n                [lineDatas addObject:@[item,netItem]];\n            }\n        }\n    }\n    //5. \u753b\u7ebf\n    [self moduleView_DrawLine:lineDatas];\n}\n//MARK:===============================================================\n//MARK:                     < onclick >\n//MARK:===============================================================\n- (IBAction)clearBtnOnClick:(id)sender {\n    //1. \u6e05\u7ebf\n    [self.delegate moduleView_ClearLine:self.nodeArr];\n    //2. \u6e05\u6570\u636e\u548c\u8282\u70b9\n    [self clear];\n}\n- (IBAction)showNameBtnOnClick:(id)sender {\n    NSArray *nViews = ARRTOOK([self subViews_AllDeepWithClass:NVNodeView.class]);\n    for (NVNodeView *nodeView in nViews) {\n        if (self.delegate && [self.delegate respondsToSelector:@selector(moduleView_ShowName:)]) {"
        },
        {
            "comment": "This code defines a class that implements the NVNodeViewDelegate protocol. It provides delegate methods for getting custom subviews, node colors, right colors, and node alpha values. If delegate methods are not implemented, default values are used. The class also handles a node click event if the delegate responds to the appropriate method.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVModuleView.m\":258-286",
            "content": "            NSString *showName = [self.delegate moduleView_ShowName:nodeView.data];\n            [nodeView setTitle:showName showTime:cShowNameTime];\n        }\n    }\n}\n/**\n *  MARK:--------------------NVNodeViewDelegate--------------------\n */\n-(UIView *)nodeView_GetCustomSubView:(id)nodeData{\n    return [self moduleView_GetCustomSubView:nodeData];\n}\n-(UIColor *)nodeView_GetNodeColor:(id)nodeData{\n    return [self moduleView_GetNodeColor:nodeData];\n}\n-(UIColor *)nodeView_GetRightColor:(id)nodeData{\n    return [self.delegate moduleView_GetRightColor:nodeData];\n}\n-(CGFloat)nodeView_GetNodeAlpha:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(moduleView_GetNodeAlpha:)]) {\n        return [self.delegate moduleView_GetNodeAlpha:nodeData];\n    }\n    return 1.0f;\n}\n-(NSString*) nodeView_OnClick:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(moduleView_NodeOnClick:)]) {\n        return [self.delegate moduleView_NodeOnClick:nodeData];\n    }\n    return nil;"
        },
        {
            "comment": "This code defines three methods for handling click events on nodes in the view. When a node is clicked, it retrieves related data and updates the UI accordingly. It logs the count of ports for each direction. The delegate is called to handle the direction and pass the necessary data.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVModuleView.m\":287-304",
            "content": "}\n-(void) nodeView_TopClick:(id)nodeData{\n    NSArray *absNodeDatas = [self moduleView_AbsNodeDatas:nodeData];\n    [self setDataWithNodeDatas:absNodeDatas];\n    TPLog(@\"absPorts:%lu\",(unsigned long)absNodeDatas.count);\n    [self.delegate moduleView_DirectionClick:DirectionType_Top mView:self nData:nodeData targetDatas:absNodeDatas];\n}\n-(void) nodeView_BottomClick:(id)nodeData{\n    NSArray *conNodeDatas = [self moduleView_ConNodeDatas:nodeData];\n    [self setDataWithNodeDatas:conNodeDatas];\n    TPLog(@\"conPorts:%lu\",(unsigned long)conNodeDatas.count);\n    [self.delegate moduleView_DirectionClick:DirectionType_Bottom mView:self nData:nodeData targetDatas:conNodeDatas];\n}\n-(void) nodeView_LeftClick:(id)nodeData{\n    NSArray *contentNodeDatas = [self moduleView_ContentNodeDatas:nodeData];\n    [self.delegate moduleView_SetNetDatas:contentNodeDatas];\n    TPLog(@\"contentPorts:%lu\",(unsigned long)contentNodeDatas.count);\n    [self.delegate moduleView_DirectionClick:DirectionType_Left mView:self nData:nodeData targetDatas:contentNodeDatas];"
        },
        {
            "comment": "This code defines methods for handling right and long clicks on node data. It also includes a custom delegate interface for retrieving the custom subview and node color of each node data object. The delegate methods are only called if they exist and are properly implemented by the delegate object.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVModuleView.m\":305-326",
            "content": "}\n-(void) nodeView_RightClick:(id)nodeData{\n    NSArray *refNodeDatas = [self moduleView_RefNodeDatas:nodeData];\n    [self.delegate moduleView_SetNetDatas:refNodeDatas];\n    TPLog(@\"refPorts:%lu\",(unsigned long)refNodeDatas.count);\n    [self.delegate moduleView_DirectionClick:DirectionType_Right mView:self nData:nodeData targetDatas:refNodeDatas];\n}\n-(void) nodeView_LongClick:(id)nodeData direction:(DirectionType)direction{\n    [self.delegate moduleView_LongClick:direction mView:self nData:nodeData];\n}\n//MARK:===============================================================\n//MARK:                     < SelfDelegate >\n//MARK:===============================================================\n-(UIView *)moduleView_GetCustomSubView:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(moduleView_GetCustomSubView:)]) {\n        return [self.delegate moduleView_GetCustomSubView:nodeData];\n    }\n    return nil;\n}\n-(UIColor *)moduleView_GetNodeColor:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(moduleView_GetNodeColor:)]) {"
        },
        {
            "comment": "This code defines four methods, each checking if the delegate responds to a specific selector and then calling it with the given nodeData. If the delegate doesn't respond or is nil, it returns nil. This suggests that the class interacts with a delegate to get different types of node data based on the input nodeData.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVModuleView.m\":327-355",
            "content": "        return [self.delegate moduleView_GetNodeColor:nodeData];\n    }\n    return nil;\n}\n-(NSArray*)moduleView_AbsNodeDatas:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(moduleView_AbsNodeDatas:)]) {\n        return [self.delegate moduleView_AbsNodeDatas:nodeData];\n    }\n    return nil;\n}\n-(NSArray*)moduleView_ConNodeDatas:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(moduleView_ConNodeDatas:)]) {\n        return [self.delegate moduleView_ConNodeDatas:nodeData];\n    }\n    return nil;\n}\n-(NSArray*)moduleView_ContentNodeDatas:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(moduleView_ContentNodeDatas:)]) {\n        return [self.delegate moduleView_ContentNodeDatas:nodeData];\n    }\n    return nil;\n}\n-(NSArray*)moduleView_RefNodeDatas:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(moduleView_RefNodeDatas:)]) {\n        return [self.delegate moduleView_RefNodeDatas:nodeData];\n    }"
        },
        {
            "comment": "This code provides a delegate pattern to interact with the SMGNetVision module view. It defines three methods for retrieving all network data, drawing lines with provided data, and returns nil if the delegate does not respond to the respective selector.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVModuleView.m\":356-372",
            "content": "    return nil;\n}\n-(NSArray*)moduleView_GetAllNetDatas{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(moduleView_GetAllNetDatas)]) {\n        return [self.delegate moduleView_GetAllNetDatas];\n    }\n    return nil;\n}\n-(void)moduleView_DrawLine:(NSArray*)lineDatas{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(moduleView_DrawLine:)]) {\n        [self.delegate moduleView_DrawLine:lineDatas];\n    }\n}\n@end"
        }
    ]
}