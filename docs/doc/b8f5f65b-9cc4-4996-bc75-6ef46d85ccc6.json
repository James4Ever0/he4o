{
    "summary": "This code initializes a network visualization view controller in Objective-C, handling hierarchical data and providing methods for user interaction, force mode activation, and button click event handling.",
    "details": [
        {
            "comment": "NVView class declaration with properties and delegate, initializer method for setting delegate and calling initialization methods, sets frame for self.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":0-44",
            "content": "//\n//  NVView.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2019/6/11.\n//  Copyright \u00a9 2019\u5e74 XiaoGang. All rights reserved.\n//\n#import \"NVView.h\"\n#import \"MASConstraint.h\"\n#import \"View+MASAdditions.h\"\n#import \"NVModuleView.h\"\n#import \"NVNodeView.h\"\n#import \"NVLineView.h\"\n#import \"NVViewUtil.h\"\n#import \"NVConfig.h\"\n#import \"AIKVPointer.h\"\n@interface NVView () <NVModuleViewDelegate>\n@property (strong,nonatomic) IBOutlet UIView *containerView;\n@property (strong, nonatomic) UIScrollView *scrollView;\n@property (assign, nonatomic) BOOL isOpen;\n@property (weak, nonatomic) IBOutlet UIButton *openCloseBtn;\n@property (strong, nonatomic) id<NVViewDelegate> delegate;\n@property (strong, nonatomic) UIView *contentView;\n@end\n@implementation NVView\n-(id) initWithDelegate:(id<NVViewDelegate>)delegate {\n    self = [super init];\n    if(self != nil){\n        self.delegate = delegate;\n        [self initView];\n        [self initData];\n        [self initDisplay];\n    }\n    return self;\n}\n-(void) initView{\n    //self\n    [self setFrame:CGRectMake(ScreenWidth - 40, StateBarHeight, 40, 20)];"
        },
        {
            "comment": "Creates a view hierarchy with containerView, scrollView, and contentView. Loads nib file and adds it as subview to containerView. Sets up constraints for containerView within the self view. Initializes scrollView, sets its frame, and disables scroll indicators. Creates contentView and adds it as subview to scrollView, setting its background color to clear. Retrieves moduleIds from a method and initializes the x position for modules in the scrollView.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":46-72",
            "content": "    //containerView\n    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self.class) owner:self options:nil];\n    [self addSubview:self.containerView];\n    [self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.leading.mas_equalTo(self);\n        make.trailing.mas_equalTo(self);\n        make.top.mas_equalTo(self);\n        make.bottom.mas_equalTo(self);\n    }];\n    //scrollView\n    self.scrollView = [[UIScrollView alloc] init];\n    [self.containerView addSubview:self.scrollView];\n    [self.scrollView setFrame:CGRectMake(0, 20, ScreenWidth, cNVHeight - 20)];\n    [self.scrollView setShowsVerticalScrollIndicator:NO];\n    [self.scrollView setShowsHorizontalScrollIndicator:NO];\n    //contentView\n    self.contentView = [[UIView alloc] init];\n    [self.scrollView addSubview:self.contentView];\n    [self.contentView setBackgroundColor:[UIColor clearColor]];\n    //moduleViews\n    NSArray *moduleIds = [self nv_GetModuleIds];\n    if (ARRISOK(moduleIds)) {\n        CGFloat curModuleX = 2;\n        for (NSString *moduleId in moduleIds) {"
        },
        {
            "comment": "This code initializes a view and sets its frame, adds it to the content view of a scroll view, and updates the scroll view's content size when adding multiple views. It also includes methods for setting node data and possibly preparing data before displaying it in the view.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":73-105",
            "content": "            NVModuleView *moduleView = [[NVModuleView alloc] init];\n            moduleView.delegate = self;\n            [moduleView setDataWithModuleId:moduleId];\n            [moduleView setFrame:CGRectMake(curModuleX, 2, cModuleWidth, cModuleHeight)];\n            [self.contentView addSubview:moduleView];\n            curModuleX += (cModuleWidth + 2);\n        }\n        [self.scrollView setContentSize:CGSizeMake(curModuleX, cModuleHeight)];\n        [self.contentView setFrame:CGRectMake(0, 0, curModuleX, cModuleHeight)];\n    }\n}\n-(void) initData{\n}\n-(void) initDisplay{\n}\n//MARK:===============================================================\n//MARK:                     < method >\n//MARK:===============================================================\n-(void) setNodeData:(id)nodeData{\n    if (nodeData) {\n        [self setNodeDatas:@[nodeData]];\n    }\n}\n-(void) setNodeDatas:(NSArray*)nodeDatas{\n    //1. \u6570\u636e\u51c6\u5907\n    if (!self.isOpen && !self.forceMode) return;\n    nodeDatas = ARRTOOK(nodeDatas);\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];"
        },
        {
            "comment": "This code groups data into modules and displays the grouped data in corresponding module views. It also sets node data with light strings, appends light strings, and removes node data.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":107-139",
            "content": "    //2. \u5206\u7ec4\n    for (id data in nodeDatas) {\n        NSString *mId = STRTOOK([self nv_GetModuleId:data]);\n        NSMutableArray *mArr = [[NSMutableArray alloc] initWithArray:[dic objectForKey:mId]];\n        [mArr addObject:data];\n        [dic setObject:mArr forKey:mId];\n    }\n    //3. \u663e\u793a\n    for (NSString *mId in dic.allKeys) {\n        NVModuleView *mView = [self getNVModuleViewWithModuleId:mId];\n        if (mView) {\n            [mView setDataWithNodeDatas:[dic objectForKey:mId]];\n        }\n    }\n}\n-(void) setNodeData:(id)nodeData lightStr:(NSString*)lightStr{\n    [self setNodeData:nodeData];\n    [self lightNode:nodeData str:lightStr];\n}\n-(void) setNodeData:(id)nodeData appendLightStr:(NSString*)appendLightStr{\n    NSString *lightStr = STRFORMAT(@\"%@ %@\",[self getLightStr:nodeData],appendLightStr);\n    [self setNodeData:nodeData lightStr:lightStr];\n}\n-(void) removeNodeDatas:(NSArray*)nodeDatas{\n    //1. \u6570\u636e\u51c6\u5907\n    nodeDatas = ARRTOOK(nodeDatas);\n    NSMutableDictionary *dic = [[NSMutableDictionary alloc] init];\n    //2. \u5206\u7ec4"
        },
        {
            "comment": "This code clears all modules and lines from a view, iterates through the nodeDatas array to update it, removes nodes from each module's associated array, and then clears any existing lines.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":140-175",
            "content": "    for (id data in nodeDatas) {\n        NSString *mId = STRTOOK([self nv_GetModuleId:data]);\n        NSMutableArray *mArr = [[NSMutableArray alloc] initWithArray:[dic objectForKey:mId]];\n        [mArr addObject:data];\n        [dic setObject:mArr forKey:mId];\n    }\n    //3. \u79fb\u9664\u8282\u70b9;\n    for (NSString *mId in dic.allKeys) {\n        NVModuleView *mView = [self getNVModuleViewWithModuleId:mId];\n        if (mView) {\n            [mView removeNodeDatas:[dic objectForKey:mId]];\n        }\n    }\n    //4. \u79fb\u9664\u7ebf\u6bb5;\n    [self moduleView_ClearLine:nodeDatas];\n}\n-(void) clear{\n    //1. \u6e05\u6a21\u5757\n    NSArray *mViews = ARRTOOK([self subViews_AllDeepWithClass:NVModuleView.class]);\n    for (NVModuleView *mView in mViews) {\n        [mView clear];\n    }\n    //2. \u6e05\u7ebf\n    NSArray *lViews = ARRTOOK([self subViews_AllDeepWithClass:NVLineView.class]);\n    for (NVLineView *lView in lViews) {\n        [lView removeFromSuperview];\n    }\n}\n-(void) lightNode:(id)nodeData str:(NSString*)str{\n    NVNodeView *nv = [self findNodeView:nodeData];\n    if (nv) [nv light:str];"
        },
        {
            "comment": "This code defines methods for interacting with line views and module views in a view controller. It includes methods to light a line, clear the light from a parent view, get the light string of a node, and invoke a force mode block.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":176-208",
            "content": "}\n-(void) lightLine:(id)nodeDataA nodeDataB:(id)nodeDataB str:(NSString*)str{\n    NVLineView *lv = [self findLineView:nodeDataA nodeDataB:nodeDataB];\n    if (lv) [lv light:str];\n}\n-(void) lightLineStrong:(id)nodeDataA nodeDataB:(id)nodeDataB {\n    NVLineView *lv = [self findLineView:nodeDataA nodeDataB:nodeDataB];\n    if (lv) {\n        NSInteger aStrong = [self.delegate nv_GetPortStrong:nodeDataA target:nodeDataB];\n        NSInteger bStrong = [self.delegate nv_GetPortStrong:nodeDataB target:nodeDataA];\n        [lv light:STRFORMAT(@\"<%ld  %ld>\",(long)aStrong,(long)bStrong)];\n    }\n}\n-(void) clearLight{\n    [self clearLightFromParentView:self];\n}\n-(void) clearLight:(NSString*)moduleId{\n    NVModuleView *mView = [self getNVModuleViewWithModuleId:moduleId];\n    [self clearLightFromParentView:mView];\n}\n-(NSString*) getLightStr:(id)nodeData{\n    NVNodeView *nv = [self findNodeView:nodeData];\n    return nv ? [nv getLightStr] : @\"\";\n}\n-(void) invokeForceMode:(void(^)())block{\n    if (block) {\n        BOOL bakForceMode = self.forceMode;"
        },
        {
            "comment": "This code snippet contains methods for setting and invoking the force mode, clearing lights from a parent view, and retrieving an NVModuleView based on its module ID. The invokeForceMode method asynchronously calls a block of code on the main queue. The clearLightFromParentView method recursively searches through subviews to find and clear lights. The getNVModuleViewWithModuleId method iterates over subviews, searching for an NVModuleView with a matching module ID.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":209-242",
            "content": "        [self setForceMode:true];\n        block();\n        [self setForceMode:bakForceMode];\n    }\n}\n+(void) invokeForceMode:(void(^)())block{\n    if (block) {\n        __block Act0 weakAct = block;\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [theNV invokeForceMode:weakAct];\n        });\n    }\n}\n//MARK:===============================================================\n//MARK:                     < privateMethod >\n//MARK:===============================================================\n-(void) clearLightFromParentView:(UIView*)parentView{\n    if (parentView) {\n        NSArray *nvs = ARRTOOK([parentView subViews_AllDeepWithClass:NVNodeView.class]);\n        for (NVNodeView *nv in nvs) {\n            [nv clearLight];\n        }\n    }\n}\n/**\n *  MARK:--------------------\u83b7\u53d6nodeData\u6240\u5c5e\u7684\u6a21\u5757--------------------\n */\n-(NVModuleView*) getNVModuleViewWithModuleId:(NSString*)moduleId{\n    moduleId = STRTOOK(moduleId);\n    for (NVModuleView *mView in self.contentView.subviews) {\n        if (ISOK(mView, NVModuleView.class) && [moduleId isEqualToString:mView.moduleId]) {"
        },
        {
            "comment": "This code defines methods for finding a specific view or line view within a hierarchy of views. The `findNodeView:` method searches for an NVNodeView with the provided data and returns it if found, otherwise returns nil. Similarly, the `findLineView:` method searches for an NVLineView whose data array contains both the provided nodeDataA and nodeDataB, and returns it if found, otherwise returns nil. The code also includes an IBAction method for handling a button click event that toggles the isOpen property of the view and updates its height accordingly.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":243-278",
            "content": "            return mView;\n        }\n    }\n    return nil;\n}\n-(NVNodeView*) findNodeView:(id)nodeData{\n    if (nodeData) {\n        NSArray *nvs = ARRTOOK([self subViews_AllDeepWithClass:NVNodeView.class]);\n        for (NVNodeView *nv in nvs) {\n            if ([nodeData isEqual:nv.data]) {\n                return nv;\n            }\n        }\n    }\n    return nil;\n}\n-(NVLineView*) findLineView:(id)nodeDataA nodeDataB:(id)nodeDataB{\n    if (nodeDataA && nodeDataB) {\n        NSArray *vs = ARRTOOK([self subViews_AllDeepWithClass:NVLineView.class]);\n        for (NVLineView *n in vs) {\n            if ([n.data containsObject:nodeDataA] && [n.data containsObject:nodeDataB]) {\n                return n;\n            }\n        }\n    }\n    return nil;\n}\n//MARK:===============================================================\n//MARK:                     < onclick >\n//MARK:===============================================================\n- (IBAction)openCloseBtnOnClick:(id)sender {\n    self.isOpen = !self.isOpen;\n    self.height = self.isOpen ? cNVHeight : 20;"
        },
        {
            "comment": "This code defines a view controller for a network visualization, with buttons to clear and add nodes. It also conforms to the NVModuleViewDelegate protocol to provide custom subviews and colors for nodes.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":279-312",
            "content": "    self.x = self.isOpen ? 0 : ScreenWidth - 40;\n    self.width = self.isOpen ? ScreenWidth : 40;\n    [self.openCloseBtn setTitle:(self.isOpen ? @\"\u5173\u95ed\" : @\"\u7f51\u7edc\") forState:UIControlStateNormal];\n}\n- (IBAction)clearBtnOnClick:(id)sender {\n    [self clear];\n}\n- (IBAction)addBtnOnClick:(id)sender {\n    [self nv_AddNodeOnClick];\n}\n/**\n *  MARK:--------------------NVModuleViewDelegate--------------------\n */\n-(UIView *)moduleView_GetCustomSubView:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nv_GetCustomSubNodeView:)]) {\n        return [self.delegate nv_GetCustomSubNodeView:nodeData];\n    }\n    return nil;\n}\n-(UIColor *)moduleView_GetNodeColor:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nv_GetNodeColor:)]) {\n        return [self.delegate nv_GetNodeColor:nodeData];\n    }\n    return nil;\n}\n-(UIColor *)moduleView_GetRightColor:(id)nodeData{\n    return [self.delegate nv_GetRightColor:nodeData];\n}\n-(CGFloat)moduleView_GetNodeAlpha:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nv_GetNodeAlpha:)]) {"
        },
        {
            "comment": "These methods delegate interactions to an unknown object if it responds to the corresponding selector. If not, they return default values (1.0f or nil).",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":313-347",
            "content": "        return [self.delegate nv_GetNodeAlpha:nodeData];\n    }\n    return 1.0f;\n}\n-(NSString*)moduleView_NodeOnClick:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nv_NodeOnClick:)]) {\n        return [self.delegate nv_NodeOnClick:nodeData];\n    }\n    return nil;\n}\n-(NSArray*)moduleView_AbsNodeDatas:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nv_AbsNodeDatas:)]) {\n        return [self.delegate nv_AbsNodeDatas:nodeData];\n    }\n    return nil;\n}\n-(NSArray*)moduleView_ConNodeDatas:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nv_ConNodeDatas:)]) {\n        return [self.delegate nv_ConNodeDatas:nodeData];\n    }\n    return nil;\n}\n-(NSArray*)moduleView_ContentNodeDatas:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nv_ContentNodeDatas:)]) {\n        return [self.delegate nv_ContentNodeDatas:nodeData];\n    }\n    return nil;\n}\n-(NSArray*)moduleView_RefNodeDatas:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nv_GetRefNodeDatas:)]) {"
        },
        {
            "comment": "This code contains several methods, including `nv_GetRefNodeData`, `moduleView_GetAllNetDatas`, `moduleView_SetNetDatas`, and `moduleView_DrawLine`. The first method retrieves reference node data from a delegate. The second method retrieves all network data from module views by iterating over subviews of a specific class. The third method sets the network data for a view, and the fourth method draws lines based on provided line data.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":348-382",
            "content": "        return [self.delegate nv_GetRefNodeDatas:nodeData];\n    }\n    return nil;\n}\n-(NSArray*)moduleView_GetAllNetDatas{\n    NSMutableArray *netDatas = [[NSMutableArray alloc] init];\n    NSArray *moduleViews = ARRTOOK([self subViews_AllDeepWithClass:NVModuleView.class]);\n    for (NVModuleView *mView in moduleViews) {\n        [netDatas addObjectsFromArray:mView.nodeArr];\n    }\n    return netDatas;\n}\n-(void)moduleView_SetNetDatas:(NSArray*)datas{\n    [self setNodeDatas:datas];\n}\n-(void)moduleView_DrawLine:(NSArray*)lineDatas{\n    //1. \u6570\u636e\u51c6\u5907\n    lineDatas = ARRTOOK(lineDatas);\n    NSArray *nodeViews = ARRTOOK([self subViews_AllDeepWithClass:NVNodeView.class]);\n    NSArray *lineViews = ARRTOOK([self subViews_AllDeepWithClass:NVLineView.class]);\n    //2. \u9010\u6839\u753b\u7ebf\n    for (NSArray *lineData in lineDatas) {\n        //3. \u51c6\u5907\u4e24\u7aef\u7684\u6570\u636e\n        id dataA = ARR_INDEX(lineData, 0);\n        id dataB = ARR_INDEX(lineData, 1);\n        if (dataA && dataB) {\n            //4. \u662f\u5426\u6709\u65e7\u7684\n            BOOL find = false;\n            for (NVLineView *lView in lineViews) {"
        },
        {
            "comment": "This code appears to be part of a larger program that involves view manipulation and data management. Specifically, it checks if two data objects (dataA and dataB) are present in the \"lView\" object's data array. If not, it creates an instance of NVLineView with these two data objects and adds it to the content view. Then, it retrieves the coordinates for these two data objects by iterating through another array of node views, converting their centers to the content view's coordinate system. This seems to be part of a process that involves organizing and positioning views based on the given data.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":383-412",
            "content": "                if ([lView.data containsObject:dataA] && [lView.data containsObject:dataB]) {\n                    find = true;\n                }\n            }\n            //5. draw\n            if (!find) {\n                NVLineView *lView = [[NVLineView alloc] init];\n                [lView setDataWithDataA:dataA dataB:dataB];\n                [self.contentView addSubview:lView];\n            }\n        }\n    }\n    //6. \u9010\u6839\u4fee\u6b63\u5750\u6807\n    lineViews = ARRTOOK([self subViews_AllDeepWithClass:NVLineView.class]);\n    for (NVLineView *lView in lineViews) {\n        //7. \u51c6\u5907\u4e24\u7aef\u7684\u6570\u636e\n        id dataA = ARR_INDEX(lView.data, 0);\n        id dataB = ARR_INDEX(lView.data, 1);\n        if (dataA && dataB) {\n            //8. \u83b7\u53d6\u4e24\u7aef\u7684\u5750\u6807\n            CGPoint pointA = CGPointZero;\n            CGPoint pointB = CGPointZero;\n            for (NVNodeView *nView in nodeViews) {\n                if ([dataA isEqual:nView.data]) {\n                    pointA = [nView.superview convertPoint:nView.center toView:self.contentView];\n                }else if([dataB isEqual:nView.data]){"
        },
        {
            "comment": "This code checks if there are two non-zero points, calculates the line's width and center position, determines the rotation angle, clears any previous line in a view, and then sets up a new line with the calculated values. The `moduleView_ClearLine` method prepares data for the lines.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":413-441",
            "content": "                    pointB = [nView.superview convertPoint:nView.center toView:self.contentView];\n                }\n            }\n            //9. \u753b\u7ebf\n            if (!CGPointEqualToPoint(pointA, CGPointZero) && !CGPointEqualToPoint(pointB, CGPointZero)) {\n                //10. \u8ba1\u7b97\u7ebf\u957f\u5ea6\n                float width = [NVViewUtil distancePoint:pointA second:pointB];\n                //11. \u8ba1\u7b97\u7ebf\u4e2d\u5fc3\u4f4d\u7f6e\n                float centerX = (pointA.x + pointB.x) / 2.0f;\n                float centerY = (pointA.y + pointB.y) / 2.0f;\n                //12. \u65cb\u8f6c\u89d2\u5ea6\n                CGFloat angle = [NVViewUtil anglePIPoint:pointA second:pointB];\n                //13. draw\n                [lView.layer setTransform:CATransform3DMakeRotation(0, 0, 0, 1)];\n                lView.width = width;\n                [lView.layer setTransform:CATransform3DMakeRotation(angle, 0, 0, 1)];\n                lView.center = CGPointMake(centerX, centerY);\n            }\n        }\n    }\n}\n-(void)moduleView_ClearLine:(NSArray*)datas{\n    //1. \u6570\u636e\u51c6\u5907\n    datas = ARRTOOK(datas);"
        },
        {
            "comment": "This code is traversing through the subviews of a view and removing those that contain certain data. It also includes several delegate methods for handling events such as showing name, direction click, and long click. The code is written in Objective-C and seems to be part of an iOS app's view controller logic.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":442-470",
            "content": "    NSArray *lineViews = ARRTOOK([self subViews_AllDeepWithClass:NVLineView.class]);\n    //2. \u904d\u5386\u627e\u5230\u542b\u6709nodeData\u7684\u7ebf,\u5e76\u6e05\u9664\n    for (NSArray *nodeData in datas) {\n        for (NVLineView *lView in lineViews) {\n            if ([lView.data containsObject:nodeData]) {\n                [lView removeFromSuperview];\n            }\n        }\n    }\n}\n-(NSString*)moduleView_ShowName:(id)data{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nv_ShowName:)]) {\n        return [self.delegate nv_ShowName:data];\n    }\n    return nil;\n}\n-(void)moduleView_DirectionClick:(DirectionType)type mView:(NVModuleView*)mView nData:(id)nData targetDatas:(NSArray*)targetDatas{\n    [self.delegate nv_DirectionClick:type mView:mView nData:nData targetDatas:targetDatas];\n}\n-(void)moduleView_LongClick:(DirectionType)type mView:(NVModuleView*)mView nData:(id)nData{\n    [self.delegate nv_LongClick:type mView:mView nData:nData];\n}\n//MARK:===============================================================\n//MARK:                     < SelfDelegate >"
        },
        {
            "comment": "This code defines three methods: `nv_GetModuleIds`, `nv_GetModuleId:`, and `nv_AddNodeOnClick`. These methods check if the delegate responds to the corresponding selectors, and if so, call the respective method on the delegate. Otherwise, they return nil or do nothing.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/Core/View/NVView.m\":471-490",
            "content": "//MARK:===============================================================\n-(NSArray*)nv_GetModuleIds{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nv_GetModuleIds)]) {\n        return [self.delegate nv_GetModuleIds];\n    }\n    return nil;\n}\n-(NSString*)nv_GetModuleId:(id)nodeData{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nv_GetModuleId:)]) {\n        return [self.delegate nv_GetModuleId:nodeData];\n    }\n    return nil;\n}\n-(void)nv_AddNodeOnClick{\n    if (self.delegate && [self.delegate respondsToSelector:@selector(nv_AddNodeOnClick)]) {\n        return [self.delegate nv_AddNodeOnClick];\n    }\n}\n@end"
        }
    ]
}