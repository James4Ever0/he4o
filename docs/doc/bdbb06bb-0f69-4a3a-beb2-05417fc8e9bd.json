{
    "summary": "The RLTPanel class manages game layout, UI updates, and controls a 300-round game with object actions, character growth, random births, wooden stick throwing, and obstacle avoidance skills training.",
    "details": [
        {
            "comment": "This code declares the class RLTPanel, which inherits from UITableViewDelegate and UITableViewDataSource. It has several IBOutlet properties for UI elements like labels and views. The file also imports multiple other header files for different functionalities used in this view controller.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":0-31",
            "content": "//\n//  RLTPanel.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2022/4/15.\n//  Copyright \u00a9 2022\u5e74 XiaoGang. All rights reserved.\n//\n#import \"RLTPanel.h\"\n#import \"MASConstraint.h\"\n#import \"View+MASAdditions.h\"\n#import \"TOMVisionItemModel.h\"\n#import \"PINDiskCache.h\"\n#import \"TVideoWindow.h\"\n#import \"TVUtil.h\"\n#import \"XGDebugTV.h\"\n#import \"XGLabCell.h\"\n#import \"FoodView.h\"\n@interface RLTPanel () <UITableViewDelegate,UITableViewDataSource>\n@property (strong, nonatomic) IBOutlet UIView *containerView;\n@property (weak, nonatomic) IBOutlet UITableView *tv;\n@property (weak, nonatomic) IBOutlet XGDebugTV *debugTV;\n@property (weak, nonatomic) IBOutlet UILabel *mvScoreLab;\n@property (weak, nonatomic) IBOutlet UILabel *spScoreLab;\n@property (weak, nonatomic) IBOutlet UILabel *sStrongLab;\n@property (weak, nonatomic) IBOutlet UILabel *pStrongLab;\n@property (weak, nonatomic) IBOutlet UILabel *solutionLab;\n@property (weak, nonatomic) IBOutlet UILabel *progressLab;\n@property (weak, nonatomic) IBOutlet UILabel *timeLab;\n@property (weak, nonatomic) IBOutlet UIButton *playBtn;"
        },
        {
            "comment": "Initializing view properties and layout for RLTPanel. Setting alpha, width, frame, loading nib, adding subview, setting constraints, and adjusting corner radius and border width for the containerView.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":32-66",
            "content": "@property (weak, nonatomic) IBOutlet UIButton *stopBtn;\n@property (strong, nonatomic) NSArray *tvDatas;\n@property (assign, nonatomic) NSInteger tvIndex;\n@end\n@implementation RLTPanel\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initView];\n        [self initData];\n        [self initDisplay];\n    }\n    return self;\n}\n-(void) initView{\n    //self\n    [self setAlpha:0.7f];\n    CGFloat width = 350;//ScreenWidth * 0.667f;\n    [self setFrame:CGRectMake(ScreenWidth - width - 20, 64, width, ScreenHeight - 128)];\n    //containerView\n    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self.class) owner:self options:nil];\n    [self addSubview:self.containerView];\n    [self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.leading.mas_equalTo(self);\n        make.trailing.mas_equalTo(self);\n        make.top.mas_equalTo(self);\n        make.bottom.mas_equalTo(self);\n    }];\n    [self.containerView.layer setCornerRadius:8.0f];\n    [self.containerView.layer setBorderWidth:1.0f];"
        },
        {
            "comment": "- Sets the border color and width for table view (tv)\n- Registers cell classes for reuse identifiers \"spaceCell\" and \"queueCell\"\n- Initializes data array with getQueues from delegate and sets queueIndex to getQueueIndex from delegate\n- Reloads tv data on main queue after 0.2 seconds",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":67-99",
            "content": "    [self.containerView.layer setBorderColor:UIColorWithRGBHex(0x000000).CGColor];\n    //tv\n    self.tv.delegate = self;\n    self.tv.dataSource = self;\n    [self.tv.layer setBorderWidth:1.0f];\n    [self.tv.layer setBorderColor:UIColorWithRGBHex(0x0000FF).CGColor];\n    [self.tv registerClass:[UITableViewCell class] forCellReuseIdentifier:@\"spaceCell\"];\n    [self.tv registerClass:[XGLabCell class] forCellReuseIdentifier:@\"queueCell\"];\n    //debugTV\n    [self.debugTV.layer setBorderWidth:1.0f];\n    [self.debugTV.layer setBorderColor:UIColorWithRGBHex(0x0000FF).CGColor];\n}\n-(void) initData{\n    self.playing = false;\n}\n-(void) initDisplay{\n    [self close];\n}\n-(void) refreshDisplay{\n    //1. \u53d6\u6570\u636e\n    self.tvDatas = ARRTOOK([self.delegate rltPanel_getQueues]);\n    self.tvIndex = [self.delegate rltPanel_getQueueIndex];\n    //2. tv\n    [self.tv reloadData];\n    if (self.tvIndex < self.tvDatas.count) {\n        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n  "
        },
        {
            "comment": "Updates UI elements based on the current index and delegate data: scrolls table view to specific row, sets progress label, calculates and displays time used/total time, shows machine vision score and stability/average SP strength.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":99-121",
            "content": "          [self.tv scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:self.tvIndex inSection:1] atScrollPosition:UITableViewScrollPositionMiddle animated:true];\n        });\n    }\n    //3. progressLab\n    self.progressLab.text = STRFORMAT(@\"%ld / %ld\",self.tvIndex,self.tvDatas.count);\n    //4. \u4f7f\u7528\u65f6\u95f4;\n    double useTimed = [self.delegate rltPanel_getUseTimed];\n    double totalTime = self.tvIndex == 0 ? 0 : useTimed * self.tvDatas.count / self.tvIndex;\n    int useT = (int)useTimed, totT = (int)totalTime;\n    NSString *timeStr = STRFORMAT(@\"%d:%d / %d:%d\", useT / 60, useT % 60, totT / 60, totT % 60);\n    [self.timeLab setText:timeStr];\n    //5. \u7efc\u8bc4\u5206;\n    NSString *scoreStr = [self mvScoreStr];\n    [self.mvScoreLab setText:scoreStr];\n    //6. \u7a33\u5b9a\u6027 & \u5e73\u5747SP\u5f3a\u5ea6;\n    __block typeof(self) weakSelf = self;\n    [self spStr:^(CGFloat rateSPScore, CGFloat rateSStrong, CGFloat ratePStrong) {\n        [weakSelf.spScoreLab setText:STRFORMAT(@\"%.1f\",rateSPScore)];\n        [weakSelf.sStrongLab setText:STRFORMAT(@\"%.1f\",rateSStrong)];"
        },
        {
            "comment": "1. Fetches ratePStrong from weakSelf and updates label text.\n2. Calculates solution rate and sets label text to display percentage.\n3. Updates debugTV models.\n4. Setter method for playing state, updates playBtn title accordingly.\n5. Reloads data and refreshes display.\n6. Opens panel and makes it visible.\n7. Closes panel and hides it.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":122-155",
            "content": "        [weakSelf.pStrongLab setText:STRFORMAT(@\"%.1f\",ratePStrong)];\n    }];\n    //7. \u6709\u89e3\u7387;\n    CGFloat rateSolution = [self solutionStr];\n    [self.solutionLab setText:STRFORMAT(@\"%.0f\uff05\",rateSolution * 100)];\n    //8. \u6027\u80fd\u5206\u6790;\n    [self.debugTV updateModels];\n}\n//MARK:===============================================================\n//MARK:                     < getset >\n//MARK:===============================================================\n-(void)setPlaying:(BOOL)playing{\n    _playing = playing;\n    [self.playBtn setTitle: self.playing ? @\"\u6682\u505c\" : @\"\u64ad\u653e\" forState:UIControlStateNormal];\n}\n//MARK:===============================================================\n//MARK:                     < publicMethod >\n//MARK:===============================================================\n-(void) reloadData{\n    [self refreshDisplay];\n}\n-(void) open{\n    [self setHidden:false];\n}\n-(void) close{\n    [self setHidden:true];\n}\n//MARK:===============================================================\n//MARK:                     < privateMethod >"
        },
        {
            "comment": "This function returns a string representing the action associated with a given queue model. It checks the name of the queue and returns corresponding actions like \"\u8fdb\u5165\u6210\u957f\u9875\", \"\u98de\", \"\u6254\u6728\u68d2\", etc.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":156-179",
            "content": "//MARK:===============================================================\n-(NSString*) cellStr:(RTQueueModel*)queue {\n    if ([kGrowPageSEL isEqualToString:queue.name]) {\n        return @\"\u8fdb\u5165\u6210\u957f\u9875\";\n    }else if ([kFlySEL isEqualToString:queue.name]) {\n        if (NUMISOK(queue.arg0)) {\n            return STRFORMAT(@\"%@\u98de\",[NVHeUtil fly2Str:NUMTOOK(queue.arg0).longValue / 8.0f]);\n        }\n        return @\"\u968f\u673a\u98de\";\n    }else if ([kWoodLeftSEL isEqualToString:queue.name]) {\n        return @\"\u6254\u6728\u68d2\";\n    }else if ([kWoodRdmSEL isEqualToString:queue.name]) {\n        return @\"\u968f\u673a\u6254\u6728\u68d2\";\n    }else if ([kMainPageSEL isEqualToString:queue.name]) {\n        return @\"\u56de\u4e3b\u9875\";\n    }else if ([kClearTCSEL isEqualToString:queue.name]) {\n        return @\"\u91cd\u542f\";\n    }else if ([kBirthPosRdmSEL isEqualToString:queue.name]) {\n        return @\"\u51fa\u751f\u5730\u968f\u673a\";\n    }else if ([kBirthPosRdmCentSEL isEqualToString:queue.name]) {\n        return @\"\u51fa\u751f\u5730\u968f\u673a\u504f\u8def\u4e2d\";\n    }else if ([kBirthPosCentSEL isEqualToString:queue.name]) {\n        return @\"\u51fa\u751f\u5728\u4e2d\u95f4\";\n    }else if ([kBirthPosRdmSafeSEL isEqualToString:queue.name]) {"
        },
        {
            "comment": "This code is related to a view controller that manages the display of cells in a table view. It returns different strings based on the cell's name, calculates cell heights, and prepares data for a table cell. The table cell can be either a queue cell or a space cell, each with its own specific height calculation. The code also deals with data retrieval from an outModelManager and converts it into an NSString representation.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":180-214",
            "content": "        return @\"\u51fa\u751f\u5728\u968f\u673a\u5b89\u5168\u5730\u5e26\";\n    }else if ([kHungerSEL isEqualToString:queue.name]) {\n        return @\"\u997f\";\n    }else if ([kFoodRdmSEL isEqualToString:queue.name]) {\n        return @\"\u968f\u673a\u6295\u98df\";\n    }else if ([kFoodRdmNearSEL isEqualToString:queue.name]) {\n        return @\"\u9644\u8fd1\u6295\u98df\";\n    }else if ([kThinkModeSEL isEqualToString:queue.name]) {\n        if (NUMTOOK(queue.arg0).intValue == 0) {\n            return @\"\u52a8\u7269\u6a21\u5f0f\";\n        }else if (NUMTOOK(queue.arg0).intValue == 1) {\n            return @\"\u8ba4\u77e5\u6a21\u5f0f\";\n        }else if (NUMTOOK(queue.arg0).intValue == 1) {\n            return @\"\u690d\u7269\u6a21\u5f0f\";\n        }\n    }\n    return @\"\";\n}\n-(CGFloat) queueCellHeight{\n    CGFloat maskHeight = 10.0f;//\u5927\u6982\u8ba1\u7b9710\u5de6\u53f3\u9ad8;\n    int size = (int)(self.tv.height / maskHeight);\n    size = size / 2 * 2 + 1;\n    return self.tv.height / size;\n}\n-(CGFloat) spaceCellHeight{\n    CGFloat cellH = [self queueCellHeight];\n    return (self.tv.height - cellH) * 0.5f;\n}\n-(NSString*) mvScoreStr {\n    //1. \u6570\u636e\u51c6\u5907;\n    NSArray *roots = [theTC.outModelManager.getAllDemand copy];\n    NSMutableString *mStr = [[NSMutableString alloc] init];"
        },
        {
            "comment": "This code calculates scores for each root task by taking the best solution and combining it with a task score. It then collects the results and returns them as a string. The code also prepares data, gathers all branches from the roots, and filters valid solutions using a block.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":216-241",
            "content": "    //2. \u5206\u522b\u5bf9\u6bcf\u4e2a\u6839\u4efb\u52a1,\u8fdb\u884c\u8bc4\u5206;\n    for (DemandModel *root in roots) {\n        //3. \u53d6\u6700\u4f73\u89e3\u51b3\u65b9\u6848;\n        NSMutableDictionary *scoreDic = [[NSMutableDictionary alloc] init];\n        TOFoModel *bestFo = [TCScore score_Multi:root.actionFoModels scoreDic:scoreDic];\n        //4. \u7efc\u5408\u8bc4\u5206 = \u6700\u4f73\u89e3\u51b3\u65b9\u6848\u8bc4\u5206 + \u4efb\u52a1\u8bc4\u5206;\n        double rootScore = [AIScore score4Demand:root];\n        double bestFoScore = [NUMTOOK([scoreDic objectForKey:TOModel2Key(bestFo)]) doubleValue];\n        //5. \u6536\u96c6\u7ed3\u679c;\n        [mStr appendFormat:@\"%.1f \",rootScore + bestFoScore];\n    }\n    return mStr;\n}\n-(void) spStr:(void(^)(CGFloat rateSPScore, CGFloat rateSStrong, CGFloat ratePStrong))complete{\n    //0. \u6570\u636e\u51c6\u5907;\n    NSMutableArray *spScoreArr = [[NSMutableArray alloc] init];\n    NSMutableArray *spStrongArr = [[NSMutableArray alloc] init];\n    //1. \u6536\u96c6\u6839\u4e0b\u6240\u6709\u6811\u679d;\n    NSArray *roots = [theTC.outModelManager.getAllDemand copy];\n    NSArray *branchs = [TVUtil collectAllSubTOModelByRoots:roots];\n    NSArray *solutions = [SMGUtils filterArr:branchs checkValid:^BOOL(TOModelBase *item) {"
        },
        {
            "comment": "This code searches for nodes in a solution, calculates the spIndex based on the type of solution (HDemand or ReasonDemand), computes stability and SP scores using these indices, and adds them to relevant arrays.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":242-267",
            "content": "        return ISOK(item, TOFoModel.class);\n    }];\n    //2. \u9010\u4e00\u5bf9\u4efb\u52a1,\u7684\u89e3\u51b3\u65b9\u6848\u6811\u679d\u8fdb\u884csp\u8ba1\u7b97;\n    for (TOFoModel *solution in solutions) {\n        //3. \u8ba1\u7b97spIndex;\n        AIFoNodeBase *fo = [SMGUtils searchNode:solution.content_p];\n        NSInteger spIndex = -1;\n        if (ISOK(solution.baseOrGroup, HDemandModel.class)) {\n            HDemandModel *hDemand = (HDemandModel*)solution.baseOrGroup;\n            AIAlgNodeBase *hAlg = [SMGUtils searchNode:hDemand.baseOrGroup.content_p];\n            spIndex = [TOUtils indexOfConOrAbsItem:hAlg.pointer atContent:fo.content_ps layerDiff:1 startIndex:0 endIndex:NSUIntegerMax];\n        }else if(ISOK(solution.baseOrGroup, ReasonDemandModel.class)){\n            spIndex = fo.count;\n        }\n        //4. \u6839\u636espIndex\u8ba1\u7b97\u7a33\u5b9a\u6027\u548cSP\u7edf\u8ba1;\n        if (spIndex > 0) {\n            //5. \u8ba1\u5165sp\u5206;\n            CGFloat checkSPScore = [TOUtils getSPScore:fo startSPIndex:0 endSPIndex:spIndex];\n            [spScoreArr addObject:@(checkSPScore)];\n            //6. \u8ba1\u5165sp\u503c;\n            for (NSInteger i = 0; i <= spIndex; i++) {"
        },
        {
            "comment": "This code retrieves the average values for SPScore, SStrong, and PStrong from arrays spScoreArr and spStrongArr. It then calculates the rates of these averages and passes them to the complete function. The code also collects roots, branches, and demands by using several functions.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":268-295",
            "content": "                AISPStrong *spStrong = [fo.spDic objectForKey:@(i)];\n                if (spStrong) {\n                    [spStrongArr addObject:spStrong];\n                }\n            }\n        }\n    }\n    //7. \u5f97\u51fa\u5e73\u5747\u7ed3\u679c,\u5e76\u8fd4\u56de;\n    CGFloat sumSPScore = 0,sumSStrong = 0,sumPStrong = 0;\n    for (NSNumber *item in spScoreArr){\n        sumSPScore += item.floatValue;\n    }\n    for (AISPStrong *item in spStrongArr){\n        sumSStrong += item.sStrong;\n        sumPStrong += item.pStrong;\n    }\n    CGFloat rateSPScore = spScoreArr.count == 0 ? 0 : sumSPScore / spScoreArr.count;\n    CGFloat rateSStrong = spStrongArr.count == 0 ? 0 : sumSStrong / spStrongArr.count;\n    CGFloat ratePStrong = spStrongArr.count == 0 ? 0 : sumPStrong / spStrongArr.count;\n    complete(rateSPScore,rateSStrong,ratePStrong);\n}\n-(CGFloat) solutionStr{\n    //1. \u6536\u96c6\u6839\u4e0b\u6240\u6709\u6811\u679d;\n    NSArray *roots = [theTC.outModelManager.getAllDemand copy];\n    NSArray *branchs = [TVUtil collectAllSubTOModelByRoots:roots];\n    NSArray *demands = [SMGUtils filterArr:branchs checkValid:^BOOL(TOModelBase *item) {"
        },
        {
            "comment": "This code checks if the given item is an instance of DemandModel.class and calculates the solution rate for demands. It also contains IBAction methods for play, stop, and close buttons, as well as a comment describing training for collision recognition (consuming around 50 minutes).",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":296-332",
            "content": "        return ISOK(item, DemandModel.class);\n    }];\n    //2. \u7edf\u8ba1\u6709\u89e3\u7387;\n    NSInteger havSolutionCount = 0;\n    for (DemandModel *demand in demands) {\n        if (ARRISOK(demand.actionFoModels)) {\n            havSolutionCount++;\n        }\n    }\n    return demands.count > 0 ? (float)havSolutionCount / demands.count : 0;\n}\n//MARK:===============================================================\n//MARK:                     < onclick >\n//MARK:===============================================================\n- (IBAction)playBtnOnClick:(id)sender {\n    self.playing = !self.playing;\n}\n- (IBAction)stopBtnOnClick:(id)sender {\n    [self.delegate rltPanel_Stop];\n}\n- (IBAction)closeBtnOnClick:(id)sender {\n    [self close];\n}\n//MARK:===============================================================\n//MARK:                     < \u9632\u649e\u8bad\u7ec3 >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u7b2c1\u6b65 \u5b66\u88ab\u649e--------------------\n *  @desc\n *      1. \u8bf4\u660e: \u5b66\u88ab\u649e (\u51fa\u751f\u968f\u673a\u4f4d\u7f6e,\u88ab\u968f\u673a\u6254\u51fa\u7684\u6728\u68d2\u649e x 300);\n *      2. \u4f5c\u7528: \u4e3b\u8981\u7528\u4e8e\u8bad\u7ec3\u8bc6\u522b\u529f\u80fd (\u8017\u65f6\u7ea650min) (\u53c2\u800326197-1);"
        },
        {
            "comment": "This code is for a game that involves training a character to learn different skills, such as flying and avoiding obstacles. The `loadHitBtnOnClick` method is responsible for triggering the character's birth in random positions and queuing up various actions. The `loadFlyBtnOnClick` method is used to enable flying and avoidance skills. It sets a no-logging mode, switches the thinking mode, sets the character's position to be randomly centered for training purposes, and initiates a 100-round training session.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":333-364",
            "content": " *  @version\n *      2022.06.05: \u8c03\u6574 (\u53c2\u800326197-1&2);\n */\n- (IBAction)loadHitBtnOnClick:(id)sender {\n    [theRT queue1:Queue(kBirthPosRdmSEL)];\n    [theRT queueN:@[Queue(kGrowPageSEL),Queue(kWoodRdmSEL),Queue(kMainPageSEL),Queue(kClearTCSEL)] count:200];\n    [theRT queueN:@[Queue(kGrowPageSEL),Queue(kWoodLeftSEL),Queue(kMainPageSEL),Queue(kClearTCSEL)] count:100];\n}\n/**\n *  MARK:--------------------\u7b2c2\u6b65 \u5b66\u98de\u8eb2--------------------\n *  @desc\n *      1. \u8bf4\u660e: \u5b66\u98de\u8eb2 (\u51fa\u751f\u968f\u673a\u504f\u4e2d\u4f4d\u7f6e,\u5de6\u68d2,\u968f\u673a\u98dex2,\u5de6\u68d2 x 100);\n *      2. \u4f5c\u7528: \u4ece\u4e2d\u4e60\u5f97\u9632\u649e\u80fd\u529b,\u8eb2\u907f\u5371\u9669;\n *  @version\n *      2022.08.07: \u5c06\u539f100\u8f6e,\u62c6\u5206\u4e3a10\u8f6ex10\u6b21 (\u53c2\u800327061-\u66f4\u65b0);\n *      2022.10.10: \u6d4b\u7740\u6bd4\u8f83\u7a33\u4e86,\u6539\u56de\u4e9b,\u6539\u621033\u8f6ex3\u6b21 (\u53c2\u800327142-\u6b65\u9aa42);\n *      2022.12.15: \u6539\u56de100\u8f6ex1\u6b21 (\u53c2\u80032722c-\u6b65\u9aa42);\n *      2023.02.11: \u5b66\u98de\u8eb2\u6539\u5373\u523b\u6267\u884c: \u6539\u4e3a\u6254\u51fa\u6728\u68d2,\u7136\u540e\u968f\u673a5\u6b21\u98de (\u53c2\u800328066-todo1);\n */\n//\u6b65\u9aa4\u53c2\u800326029-\u52a0\u957f\u7248\u5f3a\u5316\u52a0\u8bad (\u53c2\u800326031-2);\n- (IBAction)loadFlyBtnOnClick:(id)sender {\n    //0. \u65e0\u65e5\u5fd7\u6a21\u5f0f;\n    //[theApp setNoLogMode:true];\n    //0. \u8ba4\u77e5\u6a21\u5f0f\n    [theRT queue1:Queue0(kThinkModeSEL, @(1))];\n    //0. \u51fa\u751f\u5728\u968f\u673a\u504f\u4e2d\u4f4d\u7f6e (\u4ee5\u65b9\u4fbf\u8bad\u7ec3\u88ab\u649e\u548c\u8eb2\u5f00\u7ecf\u9a8c);\n    [theRT queue1:Queue(kBirthPosRdmCentSEL)];\n    //0. \u52a0\u957f\u7248\u8bad\u7ec3100\u8f6e"
        },
        {
            "comment": "This code is part of a training application for an unknown subject, possibly related to a game or simulation. It includes multiple actions such as entering and exiting pages, randomly generating positions and throwing objects, and simulating app restarts. The training consists of 300 rounds with specific steps.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":365-400",
            "content": "    for (int j = 0; j < 100; j++) {\n        //1. \u8fdb\u5165\u8bad\u7ec3\u9875\n        NSMutableArray *queues = [[NSMutableArray alloc] init];\n        [queues addObject:Queue(kGrowPageSEL)];\n        [queues addObject:Queue(kWoodLeftSEL)];\n        //2. \u968f\u673a\u98de\u6216\u6254\u6728\u68d2,\u4e94\u6b65;\n        //6. \u5c4f\u4e2d,\u4efb\u610f\u65b9\u5411;\n        NSNumber *flyDirection = @(arc4random() % 8);\n        for (int i = 0; i < 3; i++) {\n            [queues addObject:Queue0(kFlySEL, flyDirection)];\n        }\n        //3. \u9000\u5230\u4e3b\u9875,\u6a21\u62df\u91cd\u542f;\n        [queues addObjectsFromArray:@[Queue(kMainPageSEL),Queue(kClearTCSEL)]];\n        //4. \u8bad\u7ec3names;\n        [theRT queueN:queues count:1];\n    }\n    //5. \u6b63\u5e38\u6a21\u5f0f\n    [theRT queue1:Queue0(kThinkModeSEL, @(0))];\n}\n/**\n *  MARK:--------------------\u8bad\u7ec3\u8bc6\u522b (\u53c2\u800328034)--------------------\n */\n- (IBAction)loadRecognitionBtnClick:(id)sender {\n    //0. \u8bad\u7ec3300\u8f6e (\u6bcf\u6761\u8bad\u7ec3\u9879\u90fd\u5305\u542b: \u8fdb\u5165\u8bad\u7ec3\u9875 & \u9000\u51fa\u4e3b\u9875);\n    for (NSInteger i = 0; i < 300; i++) {\n        //1. \u968f\u673a\u51fa\u751f\u4f4d\u7f6e;\n        [theRT queue1:Queue(kBirthPosRdmSEL)];\n        //2. \u968f\u673a\u4f4d\u7f6e\u6254\u6728\u68d2;\n        [theRT queueN:@[Queue(kGrowPageSEL),Queue(kWoodRdmSEL),Queue(kMainPageSEL),Queue(kClearTCSEL)] count:1];"
        },
        {
            "comment": "The code is performing a training process for an object, specifically a \"try out of way\" action. It first discards the racket on the left side and then generates a random birth position. Next, it makes the object perform random actions of flying or discarding the racket, repeating this five times. Finally, it concludes with other queue commands. The code also mentions to refer to the step 26011 basic version reinforcement training for more context on this process.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":402-431",
            "content": "        //3. \u5de6\u4fa7\u6254\u6728\u68d2;\n        [theRT queueN:@[Queue(kGrowPageSEL),Queue(kWoodLeftSEL),Queue(kMainPageSEL),Queue(kClearTCSEL)] count:1];\n        //4. \u968f\u673a\u504f\u4e2d\u51fa\u751f\u4f4d\u7f6e;\n        [theRT queue1:Queue(kBirthPosRdmCentSEL)];\n        //5. \u968f\u673a\u98de\u6216\u6254\u6728\u68d2,\u4e94\u6b65;\n        [theRT queue1:Queue(kGrowPageSEL)];\n        for (int i = 0; i < 5; i++) {\n            NSArray *randomNames = @[Queue(kFlySEL),Queue(kWoodLeftSEL)];\n            int randomIndex = arc4random() % 2;\n            NSString *randomName = ARR_INDEX(randomNames, randomIndex);\n            [theRT queue1:Queue(randomName)];\n        }\n        [theRT queueN:@[Queue(kMainPageSEL),Queue(kClearTCSEL)] count:1];\n    }\n}\n/**\n *  MARK:--------------------\u7b2c3\u6b65 \u8bd5\u9519\u8bad\u7ec3--------------------\n *  @desc \u4e0e\u5b66\u649e\u8bad\u7ec3\u6b65\u9aa4\u4e00\u81f4,\u6b64\u5904\u5176\u5b9e\u5c31\u662f\u5404\u79cd\u649e\u5b83,\u8ba9\u5b83\u81ea\u5df1\u5c1d\u8bd5\u8eb2\u907f (\u7c7b\u4f3c\u5b66\u6b65\u5a74\u513f\u5c1d\u8bd5\u8d70\u8def);\n */\n- (IBAction)loadTryOutOfWay:(id)sender {\n    [self loadHitBtnOnClick:nil];\n}\n//MARK:===============================================================\n//MARK:                     < \u8bad\u7ec3\u9879 >\n//MARK:===============================================================\n//\u6b65\u9aa4\u53c2\u800326011-\u57fa\u7840\u7248\u5f3a\u5316\u8bad\u7ec3;"
        },
        {
            "comment": "This code is defining four different training methods for a game character. Each method involves queuing specific actions to be performed, such as flying or changing pages. The \"trainer5\" function uses 100 repetitions of a sequence of actions for training avoidance, and the \"\u7b2c1\u6b65\u5b66\u997f\" section describes a step in predatory training that references another version.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":432-463",
            "content": "-(void) trainer1{\n    [theRT queue1:Queue(kGrowPageSEL)];\n    [theRT queueN:@[Queue(kFlySEL),Queue(kWoodLeftSEL)] count:5];\n}\n//\u6b65\u9aa4\u53c2\u8003xxxxx\n-(void) trainer2{\n    [theRT queueN:@[Queue(kGrowPageSEL),Queue(kFlySEL),Queue(kFlySEL),Queue(kWoodLeftSEL),Queue(kMainPageSEL),Queue(kClearTCSEL)] count:20];\n}\n/**\n *  MARK:-------------------- \u8bad\u7ec3\u8eb2\u907f --------------------\n *  @version\n *      xxxx.xx.xx: \u521d\u7248 (\u53c2\u800326081-2);\n *      2022.05.26: \u5c11\u98de\u4e00\u6b65,\u53d8\u6210[\u68d2,\u98de,\u98de,\u68d2],\u56e0\u4e3a\u77ac\u65f6\u8bb0\u5fc6\u53ea\u67094\u6761;\n */\n-(void) trainer5{\n    //0. \u51fa\u751f\u5728\u968f\u673a\u504f\u4e2d\u4f4d\u7f6e (\u4ee5\u65b9\u4fbf\u8bad\u7ec3\u88ab\u649e\u548c\u8eb2\u5f00\u7ecf\u9a8c);\n    [theRT queue1:Queue(kBirthPosRdmCentSEL)];\n    //1. \u52a0\u957f\u7248\u8bad\u7ec3100\u8f6e\n    [theRT queueN:@[Queue(kGrowPageSEL),Queue(kWoodLeftSEL),Queue(kFlySEL),Queue(kFlySEL),Queue(kWoodLeftSEL),Queue(kMainPageSEL),Queue(kClearTCSEL)] count:100];\n}\n//MARK:===============================================================\n//MARK:                     < \u89c5\u98df\u8bad\u7ec3 >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u7b2c1\u6b65\u5b66\u997f--------------------\n *  @desc \u53c2\u800328172-\u7b2c1\u6b65;\n *  @version\n *      2023.06.26: \u56e0\u4e3a\u52a0\u4e86\u997f\u540e\u89c6\u89c9,\u91cd\u65b0\u89c4\u5212\u5b66\u997f\u8bad\u7ec3\u6b65\u9aa4 (\u53c2\u800330042-todo3);"
        },
        {
            "comment": "This code appears to be controlling the actions of a game character. It randomly generates the position of birth and then performs various tasks like feeding, flying, and restarting based on user interactions. The `eat1BtnClick` method simulates eating one fruit, while the `eat2BtnClick` method simulates learning to eat by performing different actions over 100 rounds.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":464-495",
            "content": " *      2023.06.27: \u5c06\u6628\u5929\u7684\u6539\u52a8\u56de\u6eda (\u53c2\u800330042-todo3-\u56de\u6eda & 30043-\u65b9\u6848);\n */\n- (IBAction)eat1BtnClick:(id)sender {\n    //1. \u968f\u673a\u51fa\u751f;\n    [theRT queue1:Queue(kBirthPosRdmSEL)];\n    //2. \u9965\u997f,\u968f\u673a\u6254\u4e2a\u575a\u679c x 200\u6b21;\n    [theRT queueN:@[Queue(kGrowPageSEL),Queue(kHungerSEL),Queue0(kFoodRdmSEL,@(FoodStatus_Eat)),Queue(kMainPageSEL),Queue(kClearTCSEL)] count:200];\n}\n/**\n *  MARK:--------------------\u7b2c2\u6b65\u5b66\u5403--------------------\n *  @desc \u53c2\u800328172-\u7b2c2\u6b65;\n */\n- (IBAction)eat2BtnClick:(id)sender {\n    //1. \u968f\u673a\u51fa\u751f;\n    [theRT queue1:Queue(kBirthPosRdmSEL)];\n    for (NSInteger i = 0; i < 100; i++) {\n        //2. \u8fdb\u5165\u8bad\u7ec3\u9875 & \u9965\u997f & \u9644\u8fd1\u6295\u575a\u679c;\n        NSMutableArray *queues = [[NSMutableArray alloc] init];\n        [queues addObject:Queue(kGrowPageSEL)];\n        [queues addObject:Queue(kHungerSEL)];\n        [queues addObject:Queue(kFoodRdmNearSEL)];\n        //3. \u968f\u673a\u98de\u4e2a\u65b9\u5411\u8fde\u7eed3\u6b65;\n        NSNumber *flyDirection = @(arc4random() % 8);\n        for (int i = 0; i < 3; i++) {\n            [queues addObject:Queue0(kFlySEL, flyDirection)];\n        }\n        //4. \u9000\u5230\u4e3b\u9875,\u6a21\u62df\u91cd\u542f;\n        [queues addObjectsFromArray:@[Queue(kMainPageSEL),Queue(kClearTCSEL)]];"
        },
        {
            "comment": "Training names;\nqueue N: queues count: 1",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":497-537",
            "content": "        //5. \u8bad\u7ec3names;\n        [theRT queueN:queues count:1];\n    }\n}\n/**\n *  MARK:--------------------\u7b2c3\u6b65\u8bd5\u9519--------------------\n */\n- (IBAction)eat3BtnClick:(id)sender {\n}\n//MARK:===============================================================\n//MARK:                     < \u642c\u8fd0\u8bad\u7ec3 >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u7b2c1\u6b65\u5e26\u76ae\u679c\u5b66\u997f--------------------\n *  @desc \u53c2\u800330092-\u6b65\u9aa41 & 30145-\u6b65\u9aa41;\n */\n- (IBAction)kick1BtnClick:(id)sender {\n    //0. \u8ba4\u77e5\u6a21\u5f0f\n    [theRT queue1:Queue0(kThinkModeSEL, @(1))];\n    //1. \u968f\u673a\u51fa\u751f;\n    [theRT queue1:Queue(kBirthPosRdmSEL)];\n    //2. \u9965\u997f,\u968f\u673a\u6254\u4e2a\u575a\u679c x 200\u6b21;\n    [theRT queueN:@[Queue(kGrowPageSEL),Queue(kHungerSEL),Queue0(kFoodRdmSEL,@(FoodStatus_Border)),Queue(kMainPageSEL),Queue(kClearTCSEL)] count:200];\n}\n/**\n *  MARK:--------------------\u7b2c2\u6b65\u5b66\u8ba4\u6728\u68d2--------------------\n *  @desc \u53c2\u800330145-\u6b65\u9aa42;\n */\n- (IBAction)kick2BtnClick:(id)sender {\n    //0. \u8ba4\u77e5\u6a21\u5f0f\n    [theRT queue1:Queue0(kThinkModeSEL, @(1))];\n    //1. \u968f\u673a\u51fa\u751f;\n    [theRT queue1:Queue(kBirthPosRdmSafeSEL)];"
        },
        {
            "comment": "This code is related to a game where the character needs to grow by randomly being born, getting hungry, and throwing a wooden stick 300 times. It also includes actions for thinking, random birth positions, and learning when to press and when not to press certain buttons.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":539-572",
            "content": "    //2. \u6254\u6728\u68d2 x 300\u6b21;\n    [theRT queueN:@[Queue(kGrowPageSEL),\n                    Queue(kWoodLeftSEL), //\u6254\u6728\u68d2\n                    Queue(kMainPageSEL),Queue(kClearTCSEL)] count:300];\n}\n/**\n *  MARK:--------------------\u7b2c2.5\u6b65\u997f\u4e86\u66f4\u997f--------------------\n *  @desc \u53c2\u800331018-\u6b65\u9aa42.5;\n */\n- (IBAction)kickHungerThanHungerBtnClick:(id)sender {\n    //0. \u8ba4\u77e5\u6a21\u5f0f\n    [theRT queue1:Queue0(kThinkModeSEL, @(1))];\n    //1. \u968f\u673a\u51fa\u751f;\n    [theRT queue1:Queue(kBirthPosRdmSEL)];\n    //2. \u9965\u997f x 20\u6b21;\n    [theRT queueN:@[Queue(kGrowPageSEL),Queue(kHungerSEL),Queue(kMainPageSEL),Queue(kClearTCSEL)] count:20];\n}\n/**\n *  MARK:--------------------\u7b2c3\u6b65\u5b66H\u53bb\u76ae--------------------\n *  @desc \u5b66\u4ec0\u4e48\u65f6\u5019\u80fd\u538b\u5230,\u4ec0\u4e48\u65f6\u5019\u538b\u4e0d\u5230 (\u53c2\u800330142-\u6b65\u9aa43\u81ea & 30145-\u6b65\u9aa44);\n */\n- (IBAction)kick3BtnClick:(id)sender {\n    //1. \u968f\u673a\u51fa\u751f;\n    [theRT queue1:Queue(kBirthPosRdmSafeSEL)];\n    //2. \u9965\u997f,\u968f\u673a\u6254\u4e2a\u575a\u679c,\u6254\u6728\u68d2 x 200\u6b21;\n    [theRT queueN:@[Queue(kGrowPageSEL),\n                    Queue(kHungerSEL), //\u997f\n                    Queue0(kFoodRdmSEL,@(FoodStatus_Border)), //\u968f\u673a\u6254\u6709\u76ae\u679c\n                    Queue(kWoodLeftSEL), //\u6254\u6728\u68d2"
        },
        {
            "comment": "This code is implementing UITableViewDataSource and UITableViewDelegate protocols to set up a table view with three sections. The first section displays the count of items in tvDatas array, while the second section shows a space cell. The third section always has one row. The cellForRowAtIndexPath method returns the appropriate cell based on the section and row index.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":573-598",
            "content": "                    Queue(kMainPageSEL),Queue(kClearTCSEL)] count:70];\n}\n//MARK:===============================================================\n//MARK:       < UITableViewDataSource &  UITableViewDelegate>\n//MARK:===============================================================\n- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{\n    return 3;\n}\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{\n    if (section == 1) {\n        return self.tvDatas.count;\n    }\n    return 1;\n}\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{\n    //1. \u8fd4\u56despaceCell\n    if (indexPath.section != 1) {\n        UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@\"spaceCell\"];\n        [cell setFrame:CGRectMake(0, 0, self.tv.width, [self spaceCellHeight])];\n        return cell;\n    }else {\n        //2. \u6b63\u5e38\u8fd4\u56dequeueCell_\u6570\u636e\u51c6\u5907;\n        RTQueueModel *queue = ARR_INDEX(self.tvDatas, indexPath.row);\n        NSString *cellStr = STRFORMAT(@\"%ld. %@\",indexPath.row+1, [self cellStr:queue]);"
        },
        {
            "comment": "This code sets the cell color based on whether it has been trained and configures the cell's text, font, and height for a specific section in a table view.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/RLTrainer/View/RLTPanel.m\":599-616",
            "content": "        BOOL trained = indexPath.row < self.tvIndex;\n        UIColor *color = trained ? UIColor.blackColor : UIColor.redColor;\n        //3. \u521b\u5efacell;\n        XGLabCell *cell = [tableView dequeueReusableCellWithIdentifier:@\"queueCell\"];\n        [cell setText:cellStr color:color font:8];\n        return cell;\n    }\n}\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{\n    if (indexPath.section == 1) {\n        return [self queueCellHeight];\n    }else{\n        return [self spaceCellHeight];\n    }\n}\n@end"
        }
    ]
}