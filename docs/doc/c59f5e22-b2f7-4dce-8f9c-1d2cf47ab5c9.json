{
    "summary": "This code initializes a TOMVisionNodeBase object, sets its frame, creates subviews, and configures their appearance for different states. It also handles content width adaptation and includes methods for equality checks and resizing.",
    "details": [
        {
            "comment": "This code is initializing the view and data for a TOMVisionNodeBase object. It sets the frame, creates subviews, adds them to the containerView, and configures their appearance.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/View/TOMVisionNodeBase.m\":0-45",
            "content": "//\n//  TOMVisionNodeBase.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2022/3/16.\n//  Copyright \u00a9 2022\u5e74 XiaoGang. All rights reserved.\n//\n#import \"TOMVisionNodeBase.h\"\n@interface TOMVisionNodeBase ()\n@property (strong, nonatomic) TOModelBase *mData;\n@end\n@implementation TOMVisionNodeBase\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initView];\n        [self initData];\n        [self initDisplay];\n    }\n    return self;\n}\n-(void) initView{\n    //[self.layer setMasksToBounds:true];\n    [self setFrame:CGRectMake(0, 0, 40, 10)];\n    //containerView\n    self.containerView = [[UIView alloc] init];\n    [self addSubview:self.containerView];\n    //statusView\n    self.statusView = [[UIView alloc] init];\n    [self.statusView setOrigin:CGPointZero];\n    [self.containerView addSubview:self.statusView];\n    [self.statusView setBackgroundColor:UIColorWithRGBHexA(0xFFFFFF, 0)];\n    //headerLab\n    self.headerLab = [[UILabel alloc] init];\n    [self.containerView addSubview:self.headerLab];\n    [self.headerLab setFont:[UIFont fontWithName:@\"PingFang SC\" size:8.0f]];"
        },
        {
            "comment": "This code is from the TOMVisionNodeBase.m file and defines methods for initializing, displaying, and updating data in a view-based object. The class handles different states and adjusts its appearance accordingly. It also sets up labels and their properties to adapt to content width. This code seems to be part of a larger class responsible for rendering data from TOModelBase objects.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/View/TOMVisionNodeBase.m\":46-80",
            "content": "    [self.headerLab setOrigin:CGPointZero];\n    self.headerLab.adjustsFontSizeToFitWidth = YES;\n    self.headerLab.lineBreakMode = NSLineBreakByCharWrapping;\n    [self.headerLab setTextColor:UIColor.whiteColor];\n}\n-(void) initData{\n}\n-(void) initDisplay{\n}\n-(void) refreshDisplay{\n    if (self.data.status == TOModelStatus_ActYes) {\n        self.statusView.backgroundColor = UIColorWithRGBHexA(0xFFFFFF, 0.8f);\n    }else if (self.data.status == TOModelStatus_ActNo) {\n        self.statusView.backgroundColor = UIColorWithRGBHexA(0xFF0000, 0.8f);\n    }if (self.data.status == TOModelStatus_Finish) {\n        self.statusView.backgroundColor = UIColorWithRGBHexA(0x00FF00, 0.8f);\n    }if (self.data.status == TOModelStatus_OuterBack) {\n        self.statusView.backgroundColor = UIColorWithRGBHexA(0x000000, 0.8f);\n    }\n    //self.statusView.backgroundColor = UIColorWithRGBHexA(0x000000, 0);\n}\n-(void) setData:(TOModelBase*)value{\n    _mData = value;\n    [self refreshDisplay];\n}\n-(TOModelBase *)data{\n    return _mData;\n}\n/**\n *  MARK:--------------------\u5224\u65ad\u4e00\u81f4--------------------"
        },
        {
            "comment": "This code defines a method isEqualByData that checks if two TOModelBase objects are equal based on their data and returns a boolean value. It also includes a scaleContainer method that resizes the container view and other views within the view.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/View/TOMVisionNodeBase.m\":81-105",
            "content": " *  @desc \u7528\u4e8e\u590d\u7528view\n *      1. \u73b0\u5728\u5224\u65addata.Equal\u800c\u4e0d\u662fcontent_p\u7684Equal,\u56e0\u4e3a\u540c\u4e00content_p\u4e5f\u6709\u53ef\u80fd\u4e0d\u80fd\u590d\u7528;\n *      2. \u6bd4\u5982: \u591a\u5e27matchFo\u90fd\u751f\u6210\u4e86RDemand,\u4f46cutIndex\u7b49\u7ec6\u8282\u6709\u5dee\u5f02,\u662f\u4e0d\u80fd\u590d\u7528\u7684;\n *  @version\n *      2022.03.20: \u7528\u5185\u5b58\u5730\u5740\u662f\u5426\u5339\u914d\u6765\u5224\u65adequal,\u56e0\u4e3a\u6811\u4e0a\u53ef\u80fd\u540c\u65f6\u51fa\u73b0\u591a\u5904\u540c\u8282\u70b9,\u4e14\u5b83\u4eec\u7684base\u4e5f\u4e00\u6837 (\u5bfc\u81f4\u8fc7\u5ea6\u590d\u7528);\n *      2022.03.23: \u6539\u7528selfIden\u66ff\u4ee3\u5185\u5b58\u5730\u5740 (\u53c2\u800325185-\u65b9\u68481-\u4f18\u70b9);\n */\n-(BOOL) isEqualByData:(TOModelBase*)checkData{\n    //BOOL dataEqual = [self.data isEqual:checkData];\n    //BOOL baseSeemNil = !self.data.baseOrGroup && !checkData.baseOrGroup;\n    //BOOL baseSeemPit = self.data.baseOrGroup && [self.data.baseOrGroup isEqual:checkData.baseOrGroup];\n    //BOOL baseEqual = baseSeemNil || baseSeemPit;\n    //return dataEqual && baseEqual;\n    return [self.data isEqual:checkData];\n}\n-(void) scaleContainer:(CGFloat)scale{\n    //1. \u5148\u62c9\u957f;\n    CGFloat conW = (scale == 0) ? 0 : (self.width / scale);\n    CGFloat conH = (scale == 0) ? 0 : (self.height / scale);\n    self.containerView.width = conW;\n    self.containerView.height = conH;\n    //1. \u5176\u5b83view\u5c3a\u5bf8;\n    [self.headerLab setSize:self.containerView.size];"
        },
        {
            "comment": "This code adjusts the frame of a view, centers another view, and performs scaling transformations to achieve desired visual effects. It also includes a method to retrieve a node description as a string.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/TOMVision2/View/TOMVisionNodeBase.m\":106-123",
            "content": "    [self.statusView setFrame:CGRectMake(conH * 0.2f, conH * 0.2f, conH * 0.6f, conH * 0.6f)];\n    //2. \u7f29\u653e\u662f\u4e2d\u5fc3\u7f29\u653e\u7684,\u6240\u4ee5\u5148\u4e2d\u5fc3\u5bf9\u9f50;\n    self.containerView.center = CGPointMake(self.width / 2, self.height / 2);\n    //3. \u591a\u6b21\u7f29\u653e\u5bfc\u81f4bounds\u548cframe\u5927\u5c0f\u4e0d\u7edf\u4e00,\u6240\u4ee5\u6bcf\u6b21\u7f29\u653e\u65f6\u5f3a\u884c\u91cd\u7f6ebounds\u5c3a\u5bf8;\n    self.containerView.bounds = CGRectMake(0, 0, self.containerView.width, self.containerView.height);\n    //4. \u518d\u7f29\u5c0f;\n    [self.containerView setTransform:CGAffineTransformIdentity];\n    [self.containerView setTransform:CGAffineTransformMakeScale(scale, scale)];\n}\n-(NSString*) getNodeDesc{\n    return self.headerLab.text;\n}\n@end"
        }
    ]
}