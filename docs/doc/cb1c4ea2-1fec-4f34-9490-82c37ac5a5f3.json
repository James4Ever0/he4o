{
    "summary": "This code integrates recognition and sequence algorithms, divides models into segments, calculates ranks using three methods, optimizes with caching, and returns updated models. It computes cooled ranks for two models, sorts results, logs debug information, and iterates through the array to calculate a combined ranking.",
    "details": [
        {
            "comment": "The code implements a method for obtaining the recognition and sequence algorithms' combined ranking. The method takes an array of matchAlgModels as input, returns their combined ranking with name and value, and provides options to customize scoring based on matching and strong values. Additionally, there is a switch that can disable the recognition rank if needed.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/AIRank.m\":0-32",
            "content": "//\n//  AIRank.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2022/12/19.\n//  Copyright \u00a9 2022\u5e74 XiaoGang. All rights reserved.\n//\n#import \"AIRank.h\"\n@implementation AIRank\n/**\n *  MARK:--------------------\u6982\u5ff5\u8bc6\u522b\u7efc\u5408\u6392\u540d (\u53c2\u80032722d-\u65b9\u68482-todo2)--------------------\n *  @result \u8fd4\u56de\u6392\u540d\u540d\u6b21: <matchAlg.pId, \u7efc\u5408\u6392\u540d\u503c(\u8d8a\u5c0f\u8d8a\u9760\u524d)>;\n *  @version\n *      2023.01.31: \u5355\u9879\u6743\u91cd\u65b0\u589e\u725b\u987f\u51b7\u5374\u66f2\u7ebf (\u53c2\u800328042-\u601d\u8def2-3);\n *      2023.03.06: \u8bc6\u522b\u6392\u540d\u5668\u5f53\u524d\u65e0\u7528,\u5173\u95ed\u5b83 (\u53c2\u800328152-\u65b9\u68485 & todo6);\n */\n+(NSArray*) recognitionAlgRank:(NSArray*)matchAlgModels {\n    if (!Switch4RecognitionRank) return matchAlgModels;//\u5f00\u5173\u5173\u95ed\u5219\u76f4\u63a5\u8fd4\u56de;\n    return [self getCooledRankTwice:matchAlgModels itemScoreBlock1:^CGFloat(AIMatchAlgModel *item) {\n        return [item matchValue]; //\u5339\u914d\u5ea6\u9879;\n    } itemScoreBlock2:^CGFloat(AIMatchAlgModel *item) {\n        return [item strongValue]; //\u5f3a\u5ea6\u9879;\n    } itemKeyBlock:^id(AIMatchAlgModel *item) {\n        return @(item.matchAlg.pointerId);\n    }];\n}\n/**\n *  MARK:--------------------\u65f6\u5e8f\u8bc6\u522b\u7efc\u5408\u6392\u540d (\u53c2\u80032722d-\u65b9\u68482-todo2 & 2722f-todo14)--------------------\n *  @result \u8fd4\u56de\u6392\u540d\u540d\u6b21: <matchFo.pId, \u7efc\u5408\u6392\u540d\u503c(\u8d8a\u5c0f\u8d8a\u9760\u524d)>;"
        },
        {
            "comment": "This code contains a method for recognition ranking in an AI system. It takes an array of match FO models and returns the ranking based on item weights using Newton cooling curves. The ranking is done in three stages: back, middle, and front. It also supports slow (stable) and fast (effect) thinking modes. The code has gone through multiple iterations, with V2 using three rounds of sorting and a funnel, while V3 only considers stability and effectiveness for ranking.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/AIRank.m\":33-57",
            "content": " *  @version\n *      2023.01.31: \u5355\u9879\u6743\u91cd\u65b0\u589e\u725b\u987f\u51b7\u5374\u66f2\u7ebf (\u53c2\u800328042-\u601d\u8def2-3);\n *      2023.03.06: \u8bc6\u522b\u6392\u540d\u5668\u5f53\u524d\u65e0\u7528,\u5173\u95ed\u5b83 (\u53c2\u800328152-\u65b9\u68485 & todo6);\n */\n+(NSArray*) recognitionFoRank:(NSArray*)matchFoModels {\n    if (!Switch4RecognitionRank) return matchFoModels;//\u5f00\u5173\u5173\u95ed\u5219\u76f4\u63a5\u8fd4\u56de;\n    return [self getCooledRankTwice:matchFoModels itemScoreBlock1:^CGFloat(AIMatchFoModel *item) {\n        return [item matchFoValue]; //\u5339\u914d\u5ea6\u9879;\n    } itemScoreBlock2:^CGFloat(AIMatchFoModel *item) {\n        return [item strongValue]; //\u5f3a\u5ea6\u9879;\n    } itemKeyBlock:^id(AIMatchFoModel *item) {\n        return @(item.matchFo.pointerId);\n    }];\n}\n/**\n *  MARK:--------------------S\u7efc\u5408\u6392\u540d--------------------\n *  @desc \u5bf9\u524d\u4e2d\u540e\u6bb5\u5206\u522b\u6392\u540d,\u7136\u540e\u7efc\u5408\u6392\u540d (\u53c2\u800326222-TODO2);\n *  @desc \u6b64\u5904\u7efc\u5408S\u7684\u4e09\u4e2a\u7ade\u4e89\u5668,\u987a\u5e8f\u4e3a:\u540e->\u4e2d->\u524d (\u53c2\u800328080-\u51b3\u7b56 & \u7ed3\u8bba2);\n *  @param needBack : \u662f\u5426\u6392\u540e\u6bb5: H\u4f20true\u9700\u8981,R\u4f20false\u4e0d\u9700\u8981;\n *  @param fromSlow : \u662f\u5426\u6e90\u4e8e\u6162\u601d\u8003: \u6162\u601d\u8003\u4f20true\u4e2d\u6bb5\u7528stable\u6392,\u5feb\u601d\u8003\u4f20false\u4e2d\u6bb5\u7528effect\u6392;\n *  @version\n *      2023.02.18: V2\u8fed\u4ee3: \u628a\u4e09\u9879\u6392\u540d\u6539\u6210\u4e09\u6b21\u6392\u5e8f+\u6f0f\u6597 (\u53c2\u800328080-\u7ed3\u8bba2);\n *      2023.02.19: \u6b63\u5f0f\u542f\u7528v2,\u5e76\u4e14\u52a8\u6001\u8ba1\u7b97\u6bcf\u6b21\u4fdd\u7559\u6bd4\u4f8b;\n *      2023.05.23: \u8fed\u4ee3v3,\u6539\u4e3a\u4ec5\u6839\u636e\u7a33\u5b9a\u6027\u548c\u6709\u6548\u6027\u6392\u540d (\u53c2\u800329099-\u65b9\u6848);"
        },
        {
            "comment": "This code performs ranking on a set of solution models, dividing them into front, middle, and back segments based on a given ratio. It takes an array of solutionModels as input, determines the number of ranks needed (2 or 3) based on the needBack flag, calculates the single rate for each rank, performs ranking operations in three steps (front, middle, back), and finally returns the updated array of solution models with the specified ranking.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/AIRank.m\":58-87",
            "content": " *  @result \u8fd4\u56de\u6392\u540d\u7ed3\u679c;\n */\n//+(NSArray*) solutionFoRankingV2:(NSArray*)solutionModels needBack:(BOOL)needBack fromSlow:(BOOL)fromSlow{\n//    //0. \u6570\u636e\u51c6\u5907;\n//    CGFloat resultNum = 6;\n//    NSInteger rankNum = needBack ? 3 : 2;//\u6392\u540d\u51e0\u6b21;\n//    CGFloat singleRate = MIN(1, powf(resultNum / solutionModels.count, 1.0f / rankNum));//\u6bcf\u6b21\u4fdd\u7559\u6761\u6570\u6bd4\u4f8b;\n//\n//    //1. \u540e\u6bb5\u6392\u540d;\n//    if (needBack) {\n//        solutionModels = [AIRank solutionBackRank:solutionModels];\n//        solutionModels = ARR_SUB(solutionModels, 0, solutionModels.count * singleRate);\n//    }\n//\n//    //2. \u4e2d\u6bb5\u6392\u540d;\n//    solutionModels = [AIRank solutionMidRank:solutionModels];\n//    solutionModels = ARR_SUB(solutionModels, 0, solutionModels.count * singleRate);\n//\n//\n//    //3. \u524d\u6bb5\u6392\u540d;\n//    solutionModels = [AIRank solutionFrontRank:solutionModels];\n//    solutionModels = ARR_SUB(solutionModels, 0, solutionModels.count * singleRate);\n//\n//    //4. \u8fd4\u56de;\n//    return solutionModels;\n//}\n//\n///**\n// *  MARK:--------------------\u6c42\u89e3S\u524d\u6bb5\u6392\u540d (\u53c2\u800328083-\u65b9\u68482 & 28084-5)--------------------\n// */"
        },
        {
            "comment": "This code defines three methods: solutionFrontRank, solutionBackRank, and solutionMidRank, which calculate the rank for a given set of solution models based on their front, back, and middle segments respectively. The getCooledRankTwice method is used to calculate the score for each segment using itemScoreBlock1 and itemScoreBlock2, and the itemKeyBlock is used to assign unique keys to each item in the array.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/AIRank.m\":88-114",
            "content": "//+(NSArray*) solutionFrontRank:(NSArray*)solutionModels {\n//    return [self getCooledRankTwice:solutionModels itemScoreBlock1:^CGFloat(AICansetModel *item) {\n//        return item.frontMatchValue; //\u524d\u6bb5\u5339\u914d\u5ea6\u9879;\n//    } itemScoreBlock2:^CGFloat(AICansetModel *item) {\n//        return item.frontStrongValue; //\u524d\u6bb5\u5f3a\u5ea6\u9879;\n//    } itemKeyBlock:^id(AICansetModel *item) {\n//        return @(item.cansetFo.pointerId);\n//    }];\n//}\n//\n///**\n// *  MARK:--------------------\u6c42\u89e3S\u540e\u6bb5\u6392\u540d (\u53c2\u800328092-\u65b9\u6848 & todo3)--------------------\n// */\n//+(NSArray*) solutionBackRank:(NSArray*)solutionModels {\n//    return [self getCooledRankTwice:solutionModels itemScoreBlock1:^CGFloat(AICansetModel *item) {\n//        return item.backMatchValue; //\u5339\u914d\u5ea6\u9879;\n//    } itemScoreBlock2:^CGFloat(AICansetModel *item) {\n//        return item.backStrongValue; //\u5f3a\u5ea6\u9879;\n//    } itemKeyBlock:^id(AICansetModel *item) {\n//        return @(item.cansetFo.pointerId);\n//    }];\n//}\n//\n///**\n// *  MARK:--------------------\u6c42\u89e3S\u4e2d\u6bb5\u6392\u540d (\u53c2\u800328092-\u65b9\u6848 & todo3)--------------------\n// */\n//+(NSArray*) solutionMidRank:(NSArray*)solutionModels {"
        },
        {
            "comment": "The code calculates the ranking of solution models v3. It first precomputes the effect strength for each model, then sorts the models based on their mid-effect and mid-stability scores, with a tiebreaker on their memory address. The function optimizes performance by caching the effect strength in an array before sorting.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/AIRank.m\":115-135",
            "content": "//    return [self getCooledRankTwice:solutionModels itemScoreBlock1:^CGFloat(AICansetModel *item) {\n//        return item.midStableScore; //\u4e2d\u65ad\u7a33\u5b9a\u6027\u9879;\n//    } itemScoreBlock2:^CGFloat(AICansetModel *item) {\n//        return item.midEffectScore; //\u4e2d\u6bb5\u6709\u6548\u6027\u9879;\n//    } itemKeyBlock:^id(AICansetModel *item) {\n//        return @(item.cansetFo.pointerId);\n//    }];\n//}\n/**\n *  MARK:--------------------\u6c42\u89e3S\u6392\u540d\u5668 (\u53c2\u800329099-\u65b9\u6848)--------------------\n *  @version\n *      2023.05.23: BUG_\u7528sceneId_cansetId\u505akey,\u4f1a\u6709\u91cd\u590d\u7684,\u5bfc\u81f4\u7b97\u6f0f\u7684BUG,\u6539\u7528\u5185\u5b58\u5730\u5740\u6765\u505a\u552f\u4e00key;\n *      2023.05.24: BUG_\u4fee\u590d\u6b64\u5904\u5c06sceneTargetIndex\u7528\u9519\u6210cansetTargetIndex\u7684\u95ee\u9898 (\u4f1a\u5bfc\u81f4\u53d6\u5230eff\u51e0\u4e4e\u5168\u662f\u9519\u76840);\n *      2023.05.26: BUG_\u4fee\u590dSP\u603b\u662f\u53d6\u52300\u7684\u95ee\u9898,\u6539\u4e3aeff\u4e3a\u4e3b\u6392\u5e8f,sp\u4ec5\u53d6\u4e0b\u4e00\u5e27\u7a33\u5b9a\u6027\u505a\u4e8c\u7ea7\u6392\u5e8f,H\u503c\u4e09\u7ea7\u6392\u5e8f (\u53c2\u80032909a-\u65b9\u68482);\n *      2023.12.26: \u4f18\u5316sort\u6027\u80fd,\u628agetEffectStrong()\u63d0\u51fa\u6765\u63d0\u524d\u53d6\u597d (\u53c2\u800331025-\u4ee3\u7801\u6bb5-\u95ee\u98981) //\u5171\u4e09\u5904\u4f18\u5316,\u6b64\u4e43\u5176\u4e00;\n */\n+(NSArray*) solutionFoRankingV3:(NSArray*)solutionModels {\n    //0. \u5c06effStrong\u63d0\u524d\u53d6\u51fa\u6765,\u5b58\u5230mapModel\u4e2d;\n    NSArray *mapArr = [SMGUtils convertArr:solutionModels convertBlock:^id(AICansetModel *item) {\n        AIFoNodeBase *sceneFo = [SMGUtils searchNode:item.sceneFo];"
        },
        {
            "comment": "This code sorts a list of MapModel objects based on their stability and effectiveness, using a custom sorting algorithm. It converts the sorted MapModels back to AICansetModel objects. The sorting is done by calculating scores for each MapModel's stability, effectiveness, and an H value. These scores are then used in the custom comparison block provided.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/AIRank.m\":136-157",
            "content": "        AIEffectStrong *strong = [TOUtils getEffectStrong:sceneFo effectIndex:item.sceneTargetIndex solutionFo:item.cansetFo];\n        return [MapModel newWithV1:item v2:strong];\n    }];\n    //1. \u6839\u636ecutIndex\u5230target\u4e4b\u95f4\u7684\u7a33\u5b9a\u6027\u548c\u6709\u6548\u6027\u6765\u6392\u540d (\u53c2\u800329099-todo1 & todo2);\n    NSArray *sort = [SMGUtils sortBig2Small:mapArr compareBlock1:^double(MapModel *item) {\n        return [TOUtils getEffectScore:item.v2];//\u540e\u6bb5\u6709\u6548\u6027 (\u53c2\u80032909a-todo1);\n    } compareBlock2:^double(MapModel *item) {\n        AICansetModel *cansetModel = item.v1;\n        AIFoNodeBase *cansetFo = [SMGUtils searchNode:cansetModel.cansetFo];\n        return [TOUtils getStableScore:cansetFo startSPIndex:cansetModel.cutIndex + 1 endSPIndex:cansetModel.cutIndex + 1];//\u4e0b\u5e27\u7a33\u5b9a\u6027\n    } compareBlock3:^double(MapModel *item) {\n        AIEffectStrong *strong = item.v2;\n        return strong.hStrong;//H\u503c (\u53c2\u80032909a-todo3);\n    }];\n    //2. \u5c06mapModel\u8f6c\u56deAICansetModel\u6570\u7ec4;\n    sort = [SMGUtils convertArr:sort convertBlock:^id(MapModel *obj) {\n        return obj.v1;\n    }];\n    //2. debug\u65e5\u5fd7"
        },
        {
            "comment": "This code is iterating over the first 5 elements of the \"sort\" array. For each element, it retrieves two nodes (sceneFo and cansetFo) based on the obj's properties. It then calculates a stability score (spScore) and an effect score (effScore). If the Log4AIRank flag is set, it logs the information including the scores for each node and their respective values. Finally, it returns the sorted array.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/AIRank.m\":158-175",
            "content": "    for (AICansetModel *obj in ARR_SUB(sort, 0, 5)) {\n        AIFoNodeBase *sceneFo = [SMGUtils searchNode:obj.sceneFo];\n        AIEffectStrong *effStrong = [TOUtils getEffectStrong:sceneFo effectIndex:sceneFo.count solutionFo:obj.cansetFo];\n        CGFloat effScore = [TOUtils getEffectScore:effStrong];\n        AIFoNodeBase *cansetFo = [SMGUtils searchNode:obj.cansetFo];\n        CGFloat spScore = [TOUtils getStableScore:cansetFo startSPIndex:obj.cutIndex + 1 endSPIndex:obj.cutIndex + 1];\n        if (Log4AIRank) NSLog(@\"%ld. %@<F%ld %@> %@:(\u5206:%.2f) %@:(\u5206:%.2f)\",[sort indexOfObject:obj],SceneType2Str(obj.baseSceneModel.type),obj.sceneFo.pointerId,Fo2FStr(cansetFo),\n                              CLEANSTR(cansetFo.spDic),spScore,effStrong.description,effScore);\n    }\n    return sort;\n}\n//MARK:===============================================================\n//MARK:                     < privateMethod >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u5355\u9879models\u51b7\u5374\u540e\u7ade\u4e89\u503c--------------------"
        },
        {
            "comment": "This method gets a list of models, calculates their scores using an itemScoreBlock, and assigns them a rank. It then cools down the ranks using a MathUtils function and stores the results in a dictionary with corresponding keys from another block.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/AIRank.m\":176-204",
            "content": " *  @desc \u5355\u9879\u4e00\u822c\u5305\u542b\u591a\u6761,\u5982\u5339\u914d\u5ea6\u9879\u7ade\u4e89,\u6bd4\u5982: \u4e09\u73ed\u7684\u8bed\u6587\u8003\u8bd5;\n *  @version\n *      2023.05.23: \u4fee\u590d\u5f521\u5316\u540e\u5c0f\u6570\u5199\u6210\u4e86int\u578b,\u5bfc\u81f4\u53ea\u67090\u548c1\u7684BUG;\n *  @todo : \u5176\u5b9e\u8fd9\u91cc\u7684\u6392\u540d\u518d\u51b7\u5374,\u6709\u70b9\u9ebb\u70e6,\u53ef\u4ee5\u76f4\u63a5\u6539\u6210\u6392\u540d\u7684\u540d\u6b21\u76f8\u52a0\u6765\u8ba1\u7b97,\u4f46\u76ee\u524d\u4e5f\u6ca1\u5565\u95ee\u9898,\u6240\u4ee5\u5148\u4e0d\u52a8\u4e86 (\u5982\u679c\u54ea\u5929\u53d1\u73b0\u73b0\u505a\u6cd5\u6709\u95ee\u9898\u65f6\u518d\u8fd9\u4e48\u6539);\n */\n+(NSDictionary*) getCooledValueDic:(NSArray*)models itemScoreBlock:(CGFloat(^)(id item))itemScoreBlock itemKeyBlock:(id(^)(id item))itemKeyBlock {\n    //1. \u6570\u636e\u51c6\u5907;\n    models = ARRTOOK(models);\n    NSMutableDictionary *result = [[NSMutableDictionary alloc] init];\n    //2. \u5206\u522b\u6309\u76f8\u4f3c\u5ea6\u548c\u5f3a\u5ea6\u6392\u5e8f;\n    NSArray *rank = [SMGUtils sortBig2Small:models compareBlock:^double(id obj) {\n        return itemScoreBlock(obj);\n    }];\n    //3. \u6c42\u51fa\u7efc\u5408\u6392\u540d;\n    for (id item in rank) {\n        //4. \u53d6\u5355\u79d1\u6392\u540d\u4e0b\u6807;\n        NSInteger index4Rank = [rank indexOfObject:item];\n        //5. \u5404\u81ea\u5f521\u5316;\n        CGFloat normalized4Rank = (float)index4Rank / rank.count;\n        //5. \u5355\u6761model\u6839\u636e28\u539f\u5219\u51b7\u5374\u540e\u7684\u503c (\u5355\u6761\u4ec5\u4e00\u6761,\u6bd4\u5982: \u5f20\u4e09\u7684\u8bed\u6587\u8003\u8bd5) (\u53c2\u800328042-\u601d\u8def2-3);\n        CGFloat cool4Rank = [MathUtils getCooledValue_28:normalized4Rank];\n        //6. \u8ba1\u7b97\u7efc\u5408\u6392\u540d;\n        id key = itemKeyBlock(item);\n        [result setObject:@(cool4Rank) forKey:key];"
        },
        {
            "comment": "This code calculates the cooled rank for two models using item score blocks and key blocks. It first gets the cooled values for each model, then computes the comprehensive competition value, and finally sorts the results in descending order based on the competition value. The code also includes a log for debugging purposes when in debug mode.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/AIRank.m\":205-224",
            "content": "    }\n    if (Log4AIRankDebugMode) NSLog(@\"AIRank-\u5355\u9879\u6392\u540d: %@\",CLEANSTR([SMGUtils convertArr:rank convertBlock:^id(id obj) {return itemKeyBlock(obj);}]));\n    return result;\n}\n/**\n *  MARK:--------------------\u4e24\u9879models\u51b7\u5374\u540e\u7ade\u4e89\u503c--------------------\n *  @desc \u5305\u542b\u4e24\u9879, \u6bd4\u5982: \u4e09\u73ed\u7684\u8bed\u6570\u7ade\u8d5b;\n *  @version\n *      2023.05.24: BUG_\u70ed\u5ea6\u5e94\u8be5\u662f\u8d8a\u9ad8\u8d8a\u597d,\u6392\u53cd\u4e86,\u6539\u4e3a\u4ece\u5927\u5230\u5c0f\u6392;\n */\n+(NSArray*) getCooledRankTwice:(NSArray*)models itemScoreBlock1:(CGFloat(^)(id item))itemScoreBlock1 itemScoreBlock2:(CGFloat(^)(id item))itemScoreBlock2 itemKeyBlock:(id(^)(id item))itemKeyBlock{\n    //1. \u4e24\u4e2a\u51b7\u5374\u540e\u5b57\u5178\u8ba1\u7b97;\n    NSDictionary *cooledDic1 = [self getCooledValueDic:models itemScoreBlock:itemScoreBlock1 itemKeyBlock:itemKeyBlock];\n    NSDictionary *cooledDic2 = [self getCooledValueDic:models itemScoreBlock:itemScoreBlock2 itemKeyBlock:itemKeyBlock];\n    //2. \u6c42\u51fa\u7efc\u5408\u7ade\u4e89\u503c\u5e76\u6392\u5e8f (\u53c2\u800325083-2&\u516c\u5f0f2 & 25084-1);\n    NSArray *result = [SMGUtils sortBig2Small:models compareBlock:^double(id obj) {\n        id key = itemKeyBlock(obj);\n        float coolScore1 = NUMTOOK([cooledDic1 objectForKey:key]).floatValue;"
        },
        {
            "comment": "Iterates through each object in the result array and logs relevant information for debugging, including the index of the object in the result array, the cleaned string representation of the scene dictionary, the scene type, and the pointer ID and Fo representation of the canset model. The log includes the scores for the item (spScore) and the effect (effScore), as well as the descriptions of the effect strong and canset models.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/AIRank.m\":225-240",
            "content": "        float coolScore2 = NUMTOOK([cooledDic2 objectForKey:key]).floatValue;\n        return coolScore1 * coolScore2; //\u8fd4\u56de\u6392\u5e8f\u540e\u7684sortArr\u65f6;\n    }];\n    //3. debug\u65e5\u5fd7\n    for (AICansetModel *obj in result) {\n        id key = itemKeyBlock(obj);\n        AIFoNodeBase *sceneFo = [SMGUtils searchNode:obj.sceneFo];\n        AIEffectStrong *effStrong = [TOUtils getEffectStrong:sceneFo effectIndex:sceneFo.count solutionFo:obj.cansetFo];\n        AIFoNodeBase *cansetFo = [SMGUtils searchNode:obj.cansetFo];\n        float coolScore1 = NUMTOOK([cooledDic1 objectForKey:key]).floatValue,coolScore2 = NUMTOOK([cooledDic2 objectForKey:key]).floatValue;\n        CGFloat spScore = itemScoreBlock1(obj), effScore = itemScoreBlock2(obj);\n        if (ISOK(obj, AICansetModel.class)) {\n            if (Log4AIRank) NSLog(@\"%ld. %@:(\u5206:%.2f) %@:(\u5206:%.2f) %@<F%ld %@>\",[result indexOfObject:obj],\n                                  CLEANSTR(cansetFo.spDic),spScore,effStrong.description,effScore,\n                                  SceneType2Str(obj.baseSceneModel.type),obj.sceneFo.pointerId,Fo2FStr(cansetFo));"
        },
        {
            "comment": "This code snippet checks the rank of two items based on their scores and calculates a combined ranking. If Log4AIRankDebugMode is enabled, it logs the individual ranks, scores, and the resulting composite score. Finally, it returns the overall rank.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/Util/AIRank.m\":241-248",
            "content": "            if (Log4AIRankDebugMode) NSLog(@\"\\t> %@ sp\u6392\u540d:%.5f eff\u6392\u540d:%.5f => \u7efc\u5408\u6392\u540d:%.5f\",key,coolScore1,coolScore2,coolScore1 * coolScore2);\n        }\n    }\n    return result;\n}\n@end"
        }
    ]
}