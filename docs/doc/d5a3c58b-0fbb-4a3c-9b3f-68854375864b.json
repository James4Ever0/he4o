{
    "summary": "This code handles different node types, searches for nodes, manages subviews, and processes MV and FO nodes. It also creates CustomAddNodeWindow, logs counts and empty indices, defines UI colors, and supports port strength retrieval, validation, and click/long press events.",
    "details": [
        {
            "comment": "This code imports necessary headers and defines various colors. It is likely part of a delegate implementation that provides custom subnode views for AI nodes in the SMG_NothingIsAll app. The custom subnode view can be accessed via `nv_GetCustomSubNodeView` method.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVDelegate_He.m\":0-42",
            "content": "//\n//  NVDelegate_He.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2019/6/11.\n//  Copyright \u00a9 2019\u5e74 XiaoGang. All rights reserved.\n//\n#import \"NVDelegate_He.h\"\n#import \"AIKVPointer.h\"\n#import \"AIAbsAlgNode.h\"\n#import \"AINetAbsFoNode.h\"\n#import \"AIAbsCMVNode.h\"\n#import \"AINetIndex.h\"\n#import \"ThinkingUtils.h\"\n#import \"CustomAddNodeWindow.h\"\n#import \"NVHeUtil.h\"\n#import \"NVModuleView.h\"\n#import \"NVNodeView.h\"\n#import \"AINetUtils.h\"\n#import \"AIPort.h\"\n#import \"TOUtils.h\"\n#import \"LongTipWindow.h\"\n#import \"TVUtil.h\"\n#define ModuleName_Value @\"\u7a00\u758f\u7801\"\n#define ModuleName_Alg @\"\u6982\u5ff5\u7f51\u7edc\"\n#define ModuleName_Fo @\"\u65f6\u5e8f\u7f51\u7edc\"\n#define ModuleName_Mv @\"\u4ef7\u503c\u7f51\u7edc\"\n#define ColorH UIColorWithRGBHex(0xFFFFFF)//\u6709\u767d\n#define ColorN UIColorWithRGBHex(0x000000)//\u65e0\u9ed1\n#define ColorG UIColorWithRGBHex(0x0000FF)//\u5927\u84dd\n#define ColorL UIColorWithRGBHex(0xFFFF00)//\u5c0f\u9ec4\n#define ColorP UIColorWithRGBHex(0x00FF00)//\u597d\u7eff\n#define ColorS UIColorWithRGBHex(0xFF0000)//\u574f\u7ea2\n@implementation NVDelegate_He\n/**\n *  MARK:--------------------NVViewDelegate--------------------\n */\n- (UIView *)nv_GetCustomSubNodeView:(AIKVPointer*)node_p{"
        },
        {
            "comment": "Method nv_GetNodeColor returns UIColor based on the type of node passed as parameter. If it's a mv node, it checks if it's rising or falling and returns corresponding color. If it's HNGLSP node, it returns specific colors based on its state. If it's an alg node, it performs search to return appropriate color depending on the abstract/concrete status of the node.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVDelegate_He.m\":43-69",
            "content": "    return nil;\n}\n-(UIColor *)nv_GetNodeColor:(AIKVPointer*)node_p{\n    //1. mv\u8282\u70b9:(\u4e0a\u5347\u4e3a\u7eff&\u4e0b\u964d\u4e3a\u7ea2)\n    if ([NVHeUtil isMv:node_p]) {\n        AICMVNodeBase *mvNode = [SMGUtils searchNode:node_p];\n        if (mvNode) {\n            NSInteger delta = [NUMTOOK([AINetIndex getData:mvNode.delta_p]) integerValue];\n            MVDirection demand = [ThinkingUtils getDemandDirection:node_p.algsType delta:delta];\n            return (demand == MVDirection_None) ? UIColorWithRGBHex(0x00FF00) : UIColorWithRGBHex(0xFF0000);\n        }\n    }\n    //2. HNGLSP\u8282\u70b9\u6307\u5b9a\u989c\u8272;\n    if ([TOUtils isHNGLSP:node_p]) {\n        if ([TOUtils isH:node_p]) return ColorH;\n        else if ([TOUtils isN:node_p]) return ColorN;\n        else if ([TOUtils isG:node_p]) return ColorG;\n        else if ([TOUtils isL:node_p]) return ColorL;\n        else if ([TOUtils isS:node_p]) return ColorS;\n        else if ([TOUtils isP:node_p]) return ColorP;\n    }\n    //2. \u575a\u679c\u663e\u793a\u504f\u7eff\u8272 (\u62bd\u8c61\u9ec4\u7eff&\u5177\u8c61\u84dd\u7eff)\n    if ([NVHeUtil isAlg:node_p]) {\n        AIAlgNodeBase *algNode = [SMGUtils searchNode:node_p];"
        },
        {
            "comment": "Code snippet checks if a node is an algorithm or not, and returns colors based on various conditions such as node position, content, score, etc. It also calculates node's alpha value and provides a method to handle node click events.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVDelegate_He.m\":70-107",
            "content": "        if (algNode) {\n            if ([NVHeUtil isHeight:5 fromContent_ps:algNode.content_ps]) {\n                if ([NVHeUtil isAbs:node_p]) {\n                    return UIColorWithRGBHex(0xCCFF00);\n                }else{\n                    return UIColorWithRGBHex(0x00DDFF);\n                }\n            }\n        }\n    }\n    //3. \u62bd\u8c61\u663e\u793a\u9ec4\u8272\n    if ([NVHeUtil isAbs:node_p]) {\n        return UIColorWithRGBHex(0xFFFF00);\n    }\n    return nil;\n}\n-(UIColor *)nv_GetRightColor:(id)nodeData{\n    if (PitIsFo(nodeData)) {\n        AIFoNodeBase *fo = [SMGUtils searchNode:nodeData];\n        CGFloat score = [AIScore score4MV:fo.cmvNode_p ratio:1.0f];\n        if (score > 0) {\n            return UIColorWithRGBHex(0xAAFFAA);\n        }else if(score < 0) {\n            return UIColorWithRGBHex(0xFFAAAA);\n        }\n    }\n    return nil;\n}\n-(CGFloat)nv_GetNodeAlpha:(AIKVPointer*)node_p{\n    return 1.0f;\n}\n-(NSString*)nv_NodeOnClick:(AIKVPointer*)node_p{\n    //1. light\u81ea\u5df1;\n    //[theApp.nvView setNodeData:node_p appendLightStr:[NVHeUtil getLightStr:node_p]];"
        },
        {
            "comment": "Checking if the node is a value or algorithm type, returning \"iden+value\" or \"\u5fae\u4fe1\u606f\u6570+\u5d4c\u5957\u6570\" respectively.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVDelegate_He.m\":109-128",
            "content": "    //1. value\u65f6,\u8fd4\u56de \"iden+value\u503c\";\n    if ([NVHeUtil isValue:node_p]) {\n        NSInteger hdRefCount = ARRTOOK([SMGUtils searchObjectForPointer:node_p fileName:kFNRefPorts time:cRTPort]).count;\n        NSNumber *value = NUMTOOK([AINetIndex getData:node_p]);\n        return STRFORMAT(@\"V%ld AT:%@ DS:%@ \u503c:%@ REF:h%ld\",(long)node_p.pointerId,node_p.algsType,node_p.typeStr,value,(long)hdRefCount);\n    }\n    //2. algNode\u65f6,\u8fd4\u56decontent_ps\u7684 \"\u5fae\u4fe1\u606f\u6570+\u5d4c\u5957\u6570\";\n    if([NVHeUtil isAlg:node_p]){\n        AIAlgNodeBase *algNode = [SMGUtils searchNode:node_p];\n        if (algNode) {\n            ///1. \u4f9d\u6b21\u70b9\u4eaecontent;\n            [theNV clearLight:ModuleName_Value];\n            for (NSInteger i = 0; i < algNode.content_ps.count; i++) {\n                AIKVPointer *item = ARR_INDEX(algNode.content_ps, i);\n                [theNV lightNode:item str:[NVHeUtil getLightStr:item]];\n            }\n            ///2. \u8fd4\u56de\u63cf\u8ff0;\n            NSInteger hdConCount = ISOK(algNode, AIAbsAlgNode.class) ? ((AIAbsAlgNode*)algNode).conPorts.count : 0;\n       "
        },
        {
            "comment": "This code is handling a node and determines whether it is an algorithm or a function node. For algorithm nodes, it illuminates the orders one by one and returns a description with relevant data. For function nodes, it illuminates the content nodes and returns the count of the function node's connection ports.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVDelegate_He.m\":128-143",
            "content": "     return STRFORMAT(@\"A%ld AT:%@ DS:%@ \u6570:%ld REF:%lu ABS:%lu CON:%ld \u5185\u5bb9:%@\",(long)node_p.pointerId,node_p.algsType,node_p.typeStr,(long)algNode.count,(unsigned long)algNode.refPorts.count,(unsigned long)algNode.absPorts.count,(long)hdConCount,Alg2FStr(algNode));\n        }\n    }\n    //3. foNode\u65f6,\u8fd4\u56de \"order_kvp\u6570\"\n    if([NVHeUtil isFo:node_p]){\n        AIFoNodeBase *foNode = [SMGUtils searchNode:node_p];\n        if (foNode) {\n            ///1. \u4f9d\u6b21\u70b9\u4eaeorders;\n            [theNV clearLight:ModuleName_Alg];\n            for (NSInteger i = 0; i < foNode.content_ps.count; i++) {\n                AIKVPointer *item = ARR_INDEX(foNode.content_ps, i);\n                [theNV lightNode:item str:STRFORMAT(@\"%ld%@\",(long)i,[TVUtil getLightStr:item])];\n            }\n            ///2. \u8fd4\u56de\u63cf\u8ff0;\n            NSInteger hdConCount = ISOK(foNode, AINetAbsFoNode.class) ? ((AINetAbsFoNode*)foNode).conPorts.count : 0;\n            return STRFORMAT(@\"F%ld AT:%@ DS:%@ \u6570:%lu ABS:%lu CON:%ld \u5185\u5bb9:%@\",(long)node_p.pointerId,node_p.algsType,"
        },
        {
            "comment": "This code appears to be part of a larger system that handles networking and data communication. It checks the type of node (Value, Alg, Fo, Mv) and returns relevant information about it. For Mv nodes, it retrieves urgentTo and delta values, as well as the number of abstract and concrete ports, and formats them into a string for return. The class also provides methods for getting module IDs and specific node IDs.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVDelegate_He.m\":143-166",
            "content": "node_p.typeStr,(unsigned long)foNode.content_ps.count,(unsigned long)foNode.absPorts.count,(long)hdConCount,Fo2FStr(foNode));\n        }\n    }\n    //4. mv\u65f6,\u8fd4\u56de \"\u7c7b\u578b+\u5347\u964d\";\n    if([NVHeUtil isMv:node_p]){\n        AICMVNodeBase *mvNode = [SMGUtils searchNode:node_p];\n        if (mvNode) {\n            ///1. \u53d6\u6570\u636e\n            NSInteger urgentTo = [NUMTOOK([AINetIndex getData:mvNode.urgentTo_p]) integerValue];\n            NSInteger delta = [NUMTOOK([AINetIndex getData:mvNode.delta_p]) integerValue];\n            NSInteger hdConCount = ISOK(mvNode, AIAbsCMVNode.class) ? ((AIAbsCMVNode*)mvNode).conPorts.count : 0;\n            ///2. \u8fd4\u56de\n            return STRFORMAT(@\"M%ld iden:%@_%@ urgentTo:%ld delta:%ld ABS:%lu CON:%ld\",(long)node_p.pointerId,node_p.algsType,node_p.typeStr,(long)urgentTo,(long)delta,(unsigned long)mvNode.absPorts.count,(long)hdConCount);\n        }\n    }\n    return nil;\n}\n-(NSArray*)nv_GetModuleIds{\n    return @[ModuleName_Value,ModuleName_Alg,ModuleName_Fo,ModuleName_Mv];\n}\n-(NSString*)nv_GetModuleId:(AIKVPointer*)node_p{"
        },
        {
            "comment": "This code is determining the type of a node and returning corresponding values or arrays, with different branches for value, algorithm, and FO nodes. It also searches for nodes based on their type and performs additional checks for FO nodes.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVDelegate_He.m\":167-193",
            "content": "    //\u5224\u65adnode_p\u7684\u7c7b\u578b,\u5e76\u8fd4\u56de;\n    if ([NVHeUtil isValue:node_p]) {\n        return ModuleName_Value;\n    }else if ([NVHeUtil isAlg:node_p]) {\n        return ModuleName_Alg;\n    }else if ([NVHeUtil isFo:node_p]) {\n        return ModuleName_Fo;\n    }else if ([NVHeUtil isMv:node_p]) {\n        return ModuleName_Mv;\n    }\n    return nil;\n}\n-(NSArray*)nv_GetRefNodeDatas:(AIKVPointer*)node_p{\n    if (node_p) {\n        if ([NVHeUtil isValue:node_p]) {\n            NSArray *allPorts = [AINetUtils refPorts_All4Value:node_p];\n            return [SMGUtils convertPointersFromPorts:allPorts];\n        }else if ([NVHeUtil isAlg:node_p]) {\n            //2. \u5982\u679c\u662falgNode\u5219\u8fd4\u56de.refPorts;\n            AIAlgNodeBase *node = [SMGUtils searchNode:node_p];\n            NSArray *allPorts = [AINetUtils refPorts_All4Alg:node];\n            return [SMGUtils convertPointersFromPorts:allPorts];\n        }else if ([NVHeUtil isFo:node_p]) {\n            //3. \u5982\u679c\u662ffoNode\u5219\u8fd4\u56demv\u57fa\u672c\u6a21\u578b\u6307\u5411cmvNode_p;\n            AIFoNodeBase *foNode = [SMGUtils searchNode:node_p];\n            if (ISOK(foNode, AIFoNodeBase.class) && foNode.cmvNode_p) {"
        },
        {
            "comment": "This code checks if the given node is an AIKVPointer, and then proceeds to check two conditions: if it's an AlgNode or a FoNode. If it's an AlgNode, it returns content_ps array. If it's a FoNode, it returns order_kvp. It also logs the count of reference ports and any empty indices found for the MV node case.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVDelegate_He.m\":194-221",
            "content": "                return @[foNode.cmvNode_p];\n            }\n        }else if ([NVHeUtil isMv:node_p]) {\n            AICMVNodeBase *mvNode = [SMGUtils searchNode:node_p];\n            NSArray *refPorts = [AINetUtils refPorts_All4Alg:mvNode];\n            NSString *nilDesc = @\"\";\n            for (NSInteger i = 0; i < refPorts.count; i++) {\n                AIPort *item = ARR_INDEX(refPorts, i);\n                if (!item) nilDesc = STRFORMAT(@\" %ld\",i);\n            }\n            TPLog(@\"> ref\u6761\u6570: %ld \u7a7a\u4e0b\u6807:%@\",refPorts.count,nilDesc);\n        }\n    }\n    return nil;\n}\n-(NSArray*)nv_ContentNodeDatas:(AIKVPointer*)node_p{\n    if (node_p) {\n        if ([NVHeUtil isAlg:node_p]) {\n            //1. algNode\u65f6\u8fd4\u56decontent_ps\n            AIAlgNodeBase *node = [SMGUtils searchNode:node_p];\n            if (ISOK(node, AIAlgNodeBase.class)) {\n                return node.content_ps;\n            }\n        }else if ([NVHeUtil isFo:node_p]) {\n            //2. foNode\u65f6\u8fd4\u56deorder_kvp\n            AIFoNodeBase *foNode = [SMGUtils searchNode:node_p];\n            if (ISOK(foNode, AIFoNodeBase.class)) {"
        },
        {
            "comment": "This code searches for a node based on the input pointer and retrieves relevant data from it, such as content_ps, foNode ports, or absolute node data. If no valid node is found, it returns nil.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVDelegate_He.m\":222-252",
            "content": "                return foNode.content_ps;\n            }\n        }else if ([NVHeUtil isMv:node_p]) {\n            //3. \u5982\u679c\u662fmvNode\u5219\u8fd4\u56demv\u6307\u5411foNode_p;\n            AICMVNodeBase *mvNode = [SMGUtils searchNode:node_p];\n            if (ISOK(mvNode, AICMVNodeBase.class)) {\n                return Ports2Pits(ARR_SUB(mvNode.foPorts, 0, 10));\n            }\n        }\n    }\n    return nil;\n}\n-(NSArray*)nv_AbsNodeDatas:(AIKVPointer*)node_p{\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    if (node_p) {\n        //1. \u5982\u679c\u662falgNode/foNode/mvNode\u5219\u8fd4\u56de.absPorts;\n        if ([NVHeUtil isAlg:node_p] || [NVHeUtil isFo:node_p] || [NVHeUtil isMv:node_p]) {\n            //3. hdAbsPorts\n            AINodeBase *node = [SMGUtils searchNode:node_p];\n            if (ISOK(node, AINodeBase.class)) {\n                [result addObjectsFromArray:[SMGUtils convertPointersFromPorts:node.absPorts]];\n            }\n        }\n    }\n    return result;\n}\n-(NSArray*)nv_ConNodeDatas:(AIKVPointer*)node_p{\n    NSMutableArray *result = [[NSMutableArray alloc] init];"
        },
        {
            "comment": "This code checks if the given node belongs to a specific type and then retrieves its connection ports. If the node is an algorithm, it adds the converted port pointers to the result array. Similarly, it handles nodes of \"fo\" and \"mv\" types. The code also shows a method for adding a new node on click.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVDelegate_He.m\":253-279",
            "content": "    if (node_p) {\n        if ([NVHeUtil isAlg:node_p]) {\n            //2. algNode_HdConPorts\n            AIAbsAlgNode *absAlgNode = [SMGUtils searchNode:node_p];\n            if (ISOK(absAlgNode, AIAbsAlgNode.class)) {\n                [result addObjectsFromArray:[SMGUtils convertPointersFromPorts:absAlgNode.conPorts]];\n            }\n        }else if ([NVHeUtil isFo:node_p]) {\n            //3. foNode_HdConPorts\n            AINetAbsFoNode *foNode = [SMGUtils searchNode:node_p];\n            if (ISOK(foNode, AINetAbsFoNode.class)) {\n                [result addObjectsFromArray:[SMGUtils convertPointersFromPorts:foNode.conPorts]];\n            }\n        }else if ([NVHeUtil isMv:node_p]) {\n            //4. mvNode_HdConPorts\n            AIAbsCMVNode *mvNode = [SMGUtils searchNode:node_p];\n            if (ISOK(mvNode, AIAbsCMVNode.class)) {\n                [result addObjectsFromArray:[SMGUtils convertPointersFromPorts:mvNode.conPorts]];\n            }\n        }\n    }\n    return result;\n}\n//\u8ffd\u52a0\u8282\u70b9\n-(void)nv_AddNodeOnClick{\n    NSArray *subViews = [theApp.window subViews_AllDeepWithClass:CustomAddNodeWindow.class];"
        },
        {
            "comment": "This code checks if an array of subviews exists and either removes them or creates a new CustomAddNodeWindow if none exist. It also includes functions for showing node names and retrieving port strength.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVDelegate_He.m\":280-309",
            "content": "    if (ARRISOK(subViews)) {\n        for (CustomAddNodeWindow *subView in subViews) {\n            [subView removeFromSuperview];\n        }\n    }else{\n        CustomAddNodeWindow *addNodeWindow = [[CustomAddNodeWindow alloc] init];\n        [theApp.window addSubview:addNodeWindow];\n    }\n}\n-(NSString*)nv_ShowName:(AIKVPointer*)data_p{\n    return STRFORMAT(@\"%ld\",(long)data_p.pointerId);\n}\n-(NSInteger)nv_GetPortStrong:(AIKVPointer*)mainNodeData target:(AIKVPointer*)targetNodeData{\n    AINodeBase *mainNode = [SMGUtils searchNode:mainNodeData];\n    if (mainNode && targetNodeData) {\n        //1. \u627e\u62bd\u8c61\n        for (AIPort *itemPort in [AINetUtils absPorts_All:mainNode]) {\n            if ([itemPort.target_p isEqual:targetNodeData]) {\n                return itemPort.strong.value;\n            }\n        }\n        //2. \u627e\u5177\u8c61\n        for (AIPort *itemPort in [AINetUtils conPorts_All:mainNode]) {\n            if ([itemPort.target_p isEqual:targetNodeData]) {\n                return itemPort.strong.value;\n            }\n        }\n        //3. \u627e\u88ab\u5f15\u7528"
        },
        {
            "comment": "This code defines a function that checks if a main node is valid and retrieves the strong value from an item port if its target matches the specified targetNodeData. It also includes two event handler functions for directional clicks and long presses, which display outgoing connection strength or show a LongTipWindow with moduleId and data information respectively.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVDelegate_He.m\":310-338",
            "content": "        if (ISOK(mainNode, AIAlgNodeBase.class)) {\n            for (AIPort *itemPort in [AINetUtils refPorts_All4Alg:(AIAlgNodeBase*)mainNode]) {\n                if ([itemPort.target_p isEqual:targetNodeData]) {\n                    return itemPort.strong.value;\n                }\n            }\n        }\n    }\n    return 0;\n}\n//\u65b9\u5411\u89e6\u53d1\u89d2\u70b9\u51fb\u4e8b\u4ef6;\n-(void)nv_DirectionClick:(int)type mView:(NVModuleView*)mView nData:(id)nData targetDatas:(NSArray *)targetDatas{\n    //1. \u89e6\u53d1\u89d2\u65f6,\u663e\u793a\u51fa\u5173\u8054\u5f3a\u5ea6;\n    targetDatas = ARRTOOK(targetDatas);\n    for (id absData in targetDatas) {\n        [theNV lightLineStrong:nData nodeDataB:absData];\n    }\n}\n//\u65b9\u5411\u89e6\u53d1\u89d2\u957f\u6309\u4e8b\u4ef6;\n-(void)nv_LongClick:(int)type mView:(NVModuleView*)mView nData:(id)nData{\n    LongTipWindow *window = [[LongTipWindow alloc] init];\n    [theApp.window addSubview:window];\n    [window setData:mView.moduleId data:nData direction:type];\n}\n@end"
        }
    ]
}