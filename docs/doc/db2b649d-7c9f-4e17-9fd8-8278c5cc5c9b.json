{
    "summary": "This code constructs abstract concepts in AIAlgNodeManager, ensuring no duplication by checking input data and local matches, creating or strengthening nodes, preventing duplicates, and managing connections between algorithms and nodes.",
    "details": [
        {
            "comment": "This code defines a method for building abstract concepts in the AIAlgNodeManager class. The method takes content_ps (sparse code vectors), concrete AIAlgNodes, dataSource (for the concept node's data), and isOutBlock (to specify the abstract or concrete concept) as parameters. It aims to avoid duplication by checking if an abstract concept already exists before creating a new one.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAlgNodeManager/AIAlgNodeManager.m\":0-28",
            "content": "//\n//  AIAlgNodeManager.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2018/12/14.\n//  Copyright \u00a9 2018\u5e74 XiaoGang. All rights reserved.\n//\n#import \"AIAlgNodeManager.h\"\n@implementation AIAlgNodeManager\n/**\n *  MARK:--------------------\u6784\u5efa\u62bd\u8c61\u6982\u5ff5--------------------\n *  @param value_ps     : \u8981\u6784\u5efaabsAlgNode\u7684content_ps (\u7a00\u758f\u7801\u7ec4) notnull;\n *  @param conAlgs      : \u5177\u8c61AIAlgNode\u6570\u7ec4:(\u5916\u7c7b\u6bd4\u65f6\u7684algA&algB / \u5185\u7c7b\u6bd4\u65f6\u4ec5\u6709\u4e00\u4e2a\u5143\u7d20) //\u4e0d\u53ef\u4e3a\u7a7a\u6570\u7ec4\n *  _param dataSource   : \u6982\u5ff5\u8282\u70b9\u7684dataSource\u5c31\u662f\u7a00\u758f\u7801\u4fe1\u606f\u7684algsType; (\u4e0d\u4f20\u65f6,\u4ecealgsArr\u63d0\u53d6) (\u5e9f\u5f03,\u53c2\u800324021);\n *  @param ds           : \u4e3anil\u65f6,\u9ed8\u8ba4\u4e3aDefaultDataSource;\n *  @param isOutBlock   : \u6307\u5b9aisOut (\u9ed8\u8ba4\u4ececonAlgs\u83b7\u53d6) (\u6982\u5ff5\u8282\u70b9\u7684isOut\u72b6\u6001; (\u601d\u7ef4\u63a7\u5236\u5668\u77e5\u9053\u5b83\u662f\u884c\u4e3a\u8fd8\u662f\u8ba4\u77e5));\n *\n *  @\u95ee\u9898\u8bb0\u5f55:\n *    1. \u601d\u8003\u4e0b,conAlgs\u4e2d\u53bb\u91cd,\u80fd\u4e0d\u80fd\u5c06md5\u5339\u914d\u7684conAlg\u505a\u4e3aabsAlg\u7684\u95ee\u9898?\n *      a. \u4e0d\u80fd: (\u53c2\u8003: \u601d\u8003\u8ba1\u52122/191126\u66f4\u65b0\u8868)\n *      b. \u80fd: (\u5219\u5bfc\u81f4\u4f1a\u5f62\u6210\u575a\u679c\u662f\u575a\u679c\u7684\u591a\u5c42\u62bd\u8c61)\n *      c. \u7ed3\u8bba: \u80fd,\u95ee\u9898\u8f6c\u79fb\u5230n17p19\n *  \u6ce8: TODO:\u5224\u65adalgSames\u662f\u5426\u5c31\u662falgsA\u6216algB\u672c\u8eab; (\u7b49conAlgNode\u548cabsAlgNode\u7edf\u4e00\u4e0d\u533a\u5206\u540e,\u518d\u5224\u65ad\u672c\u8eab)\n *  @version\n *      2021.01.03: \u5224\u65adabs\u5df2\u5b58\u5728\u62bd\u8c61\u8282\u70b9\u65f6,\u52a0\u4e0aATDS\u7684\u5339\u914d\u5224\u65ad,\u56e0\u4e3a\u4e0d\u540c\u7c7b\u578b\u8282\u70b9\u4e0d\u5fc5\u53bb\u91cd (\u53c2\u80032120B-BUG2);\n *      2021.09.26: \u4ececonAlgs\u4e2d\u9632\u91cd\u8fd4\u56de\u65f6,\u8981\u5224\u65adat&ds&type (\u53c2\u800324022-BUG3);"
        },
        {
            "comment": "Prepares input data, checks for existing abstract nodes and builds a new one if not found.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAlgNodeManager/AIAlgNodeManager.m\":29-50",
            "content": " *  @result notnull\n */\n+(AIAbsAlgNode*) createAbsAlgNode:(NSArray*)value_ps conAlgs:(NSArray*)conAlgs at:(NSString*)at ds:(NSString*)ds isOutBlock:(BOOL(^)())isOutBlock type:(AnalogyType)type{\n    //1. \u6570\u636e\u51c6\u5907\n    BOOL isOut = isOutBlock ? isOutBlock() : [AINetUtils checkAllOfOut:conAlgs];\n    conAlgs = ARRTOOK(conAlgs);\n    value_ps = ARRTOOK(value_ps);\n    if (!at) at = DefaultAlgsType;\n    if (!ds) ds = DefaultDataSource;\n    NSArray *sortSames = ARRTOOK([SMGUtils sortPointers:value_ps]);\n    NSString *samesStr = [SMGUtils convertPointers2String:sortSames];\n    NSString *samesMd5 = STRTOOK([NSString md5:samesStr]);\n    NSMutableArray *validConAlgs = [[NSMutableArray alloc] initWithArray:conAlgs];\n    AIAbsAlgNode *result = nil;\n    //2. \u5224\u65ad\u5177\u8c61\u8282\u70b9\u4e2d,\u5df2\u6709\u4e00\u4e2a\u62bd\u8c61sames\u8282\u70b9,\u5219\u4e0d\u9700\u8981\u518d\u6784\u5efa\u65b0\u7684;\n    for (AIAbsAlgNode *checkNode in conAlgs) {\n        //a. checkNode\u662f\u62bd\u8c61\u8282\u70b9\u65f6;\n        if (ISOK(checkNode, AIAbsAlgNode.class)) {\n            //b. \u5e76\u4e14md5\u4e0eorderSames\u76f8\u540c\u65f6,\u5373\u53d1\u73b0checkNode\u672c\u8eab\u5c31\u662f\u62bd\u8c61\u8282\u70b9;\n            NSString *checkMd5 = STRTOOK([NSString md5:[SMGUtils convertPointers2String:[SMGUtils sortPointers:checkNode.content_ps]]]);"
        },
        {
            "comment": "This code checks if the current node matches the specified criteria and if not, it searches for an existing abstract node with the same parameters. If found, the corresponding abstract node is assigned to \"result\" variable.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAlgNodeManager/AIAlgNodeManager.m\":51-72",
            "content": "            if ([samesMd5 isEqualToString:checkMd5] && [checkNode.pointer.algsType isEqualToString:at] && [checkNode.pointer.dataSource isEqualToString:ds] && checkNode.pointer.type == type) {\n                //c. \u5219\u628aconAlgs\u53bb\u6389checkNode;\n                [validConAlgs removeObject:checkNode];\n                //d. \u627e\u5230result\n                result = checkNode;\n            }\n        }\n    }\n    //2. \u5224\u65ad\u5177\u8c61\u8282\u70b9\u7684absPorts\u4e2d,\u662f\u5426\u5df2\u6709\u4e00\u4e2a\"sames\"\u8282\u70b9,\u6709\u5219\u65e0\u9700\u6784\u5efa\u65b0\u7684;\n    if (!result) {\n        for (AIAlgNodeBase *conNode in conAlgs) {\n            NSArray *absPorts_All = [AINetUtils absPorts_All:conNode];\n            for (AIPort *absPort in absPorts_All) {\n                //1> \u904d\u5386\u627e\u62bd\u8c61\u662f\u5426\u5df2\u5b58\u5728;\n                if ([samesMd5 isEqualToString:absPort.header] && [absPort.target_p.algsType isEqualToString:at] && [absPort.target_p.dataSource isEqualToString:ds] && absPort.target_p.type == type) {\n                    AIAbsAlgNode *absNode = [SMGUtils searchNode:absPort.target_p];\n                    //3> findAbsNode\u6210\u529f;\n                    result = absNode;"
        },
        {
            "comment": "This code snippet creates or updates an abstract node in the AI algorithm network. It first checks if the `absNode` is an instance of `AIAbsAlgNode` class. If it's not, a warning log is generated. Then, it either uses the existing `result` object (if it exists) or creates a new `AIAbsAlgNode` instance and sets its properties accordingly. The code then inserts reference ports into the newly created or existing node using the `AINetUtils` class function.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAlgNodeManager/AIAlgNodeManager.m\":73-98",
            "content": "                    if (!ISOK(absNode, AIAbsAlgNode.class) ) {\n                        WLog(@\"\u53d1\u73b0\u975e\u62bd\u8c61\u7c7b\u578b\u7684\u62bd\u8c61\u8282\u70b9\u9519\u8bef,,,\u8bf7\u68c0\u67e5\u51fa\u73b0\u6b64\u60c5\u51b5\u7684\u539f\u56e0;\");\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    //3. \u65e0\u5219\u521b\u5efa\n    BOOL absIsNew = false;\n    if (!result) {\n        absIsNew = true;\n        result = [[AIAbsAlgNode alloc] init];\n        result.pointer = [SMGUtils createPointerForAlg:kPN_ALG_ABS_NODE at:at dataSource:ds isOut:isOut type:type];\n        [result setContent_ps:sortSames];\n        NSLog(@\"\u6784\u5efa\u65b0\u6982\u5ff5:A%ld fromConAlgs:%@\",result.pointer.pointerId,CLEANSTR([SMGUtils convertArr:conAlgs convertBlock:^id(AIAlgNodeBase *obj) {\n            return STRFORMAT(@\"A%ld\",obj.pointer.pointerId);\n        }]));\n    }\n    //4. value.refPorts (\u66f4\u65b0/\u52a0\u5f3a\u5fae\u4fe1\u606f\u7684\u5f15\u7528\u5e8f\u5217)\n    NSInteger difStrong = 1;//absIsNew ? validConAlgs.count : 1;//20200106\u6539\u56de1,\u81ea\u7531\u7ade\u4e89\u65e0\u8bba\u662f\u62bd\u8c61\u8fd8\u662f\u5177\u8c61;\u4e16\u4e0a\u6ca1\u6709\u4e24\u7247\u4e00\u6837\u7684\u6811\u53f6,\u6240\u4ee5\u5bf9\u4e8e\u62bd\u8c61\u6765\u8bf4,\u672c\u6765\u5c31\u662f\u8ba8\u4fbf\u5b9c,\u6613\u8054\u60f3\u5339\u914d\u7684;\n    [AINetUtils insertRefPorts_AllAlgNode:result.pointer content_ps:result.content_ps difStrong:difStrong];\n    //5. \u5173\u8054 & \u5b58\u50a8"
        },
        {
            "comment": "This code creates an abstract concept by building on given values and preventing duplicates. It first checks the input data, then searches for a local match using AIIndexUtils, and inserts the result into the SMGUtils.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAlgNodeManager/AIAlgNodeManager.m\":99-121",
            "content": "    [AINetUtils relateAlgAbs:result conNodes:validConAlgs isNew:absIsNew];\n    //[theApp.heLogView addLog:STRFORMAT(@\"\u6784\u5efa\u62bd\u8c61\u6982\u5ff5:%@,\u5185\u5bb9:%@\",result.pointer.identifier,Alg2FStr(result))];\n    [SMGUtils insertNode:result];\n    return result;\n}\n/**\n *  MARK:--------------------\u6784\u5efa\u62bd\u8c61\u6982\u5ff5_\u9632\u91cd--------------------\n *  @todo\n *      2021.04.25: alg\u6682\u4e0d\u652f\u6301\u5bf9ds\u4e0d\u540c\u533a\u95f4\u7684\u9632\u91cd,\u4ee5\u540e\u53ef\u8003\u8651\u652f\u6301 (\u53c2\u8003getAbsoluteMatching_General\u7684ds\u53c2\u6570);\n *  @version\n *      2021.08.06: \u672c\u5730\u53bb\u91cd,\u652f\u6301ds\u9632\u91cd,\u56e0\u4e3a\u4e0d\u53bb\u91cd\u5bfc\u81f4\u540c\u5185\u5bb9\u7684S\u548cP\u6df7\u4e71 (\u53c2\u800323205);\n *      2021.09.22: \u652f\u6301type\u9632\u91cd (\u53c2\u800324019);\n */\n+(AIAbsAlgNode*)createAbsAlg_NoRepeat:(NSArray*)value_ps conAlgs:(NSArray*)conAlgs at:(NSString*)at ds:(NSString*)ds isOutBlock:(BOOL(^)())isOutBlock type:(AnalogyType)type{\n    //1. \u6570\u636e\u68c0\u67e5\n    value_ps = ARRTOOK(value_ps);\n    NSArray *sort_ps = [SMGUtils sortPointers:value_ps];\n    if (!at) at = DefaultAlgsType;\n    if (!ds) ds = DefaultDataSource;\n    //2. \u53bb\u91cd\u627e\u672c\u5730 (\u4ec5\u62bd\u8c61);\n    AIAbsAlgNode *localAlg = [AINetIndexUtils getAbsoluteMatching_General:value_ps sort_ps:sort_ps except_ps:nil getRefPortsBlock:^NSArray *(AIKVPointer *item_p) {"
        },
        {
            "comment": "This code is creating an abstract node if it already doesn't exist, or strengthening the existing one. It also mentions iterative changes to prevent duplicate concepts within a scene and notes the deprecation of specific methods due to ineffectiveness or lack of usefulness.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAlgNodeManager/AIAlgNodeManager.m\":122-150",
            "content": "        NSArray *refPorts = [AINetUtils refPorts_All4Value:item_p];\n        NSMutableArray *result = [[NSMutableArray alloc] init];\n        for (AIPort *refPort in refPorts) {\n            if ([kPN_ALG_ABS_NODE isEqualToString:refPort.target_p.folderName]) {\n                [result addObject:refPort];\n            }\n        }\n        return result;\n    } at:at ds:ds type:type];\n    //3. \u6709\u5219\u52a0\u5f3a;\n    if (ISOK(localAlg, AIAbsAlgNode.class)) {\n        [AINetUtils relateAlgAbs:localAlg conNodes:conAlgs isNew:false];\n        return localAlg;\n    }else{\n        //4. \u65e0\u5219\u6784\u5efa\n        return [self createAbsAlgNode:value_ps conAlgs:conAlgs at:at ds:ds isOutBlock:isOutBlock type:type];\n    }\n}\n/**\n *  MARK:--------------------\u6784\u5efa\u7a7a\u6982\u5ff5_\u9632\u91cd (\u53c2\u800329027-\u65b9\u68483)--------------------\n *  @version\n *      2023.03.31: \u8fed\u4ee3\u7a7a\u6982\u5ff5\u9632\u91cd\u673a\u5236\u4e3a\u573a\u666f\u5185\u540c\u62bd\u8c61\u4ec5\u751f\u6210\u4e00\u6761\u7a7a\u6982\u5ff5 (\u53c2\u800329044-todo1 & todo2);\n *      2023.04.01: \u5e9f\u5f03\u539f\u6765\u7684ds\u9632\u91cd,\u56e0\u4e3a\u5b83\u65e0\u6548 (\u53c2\u800329044-todo3);\n *      2023.04.01: \u5e9f\u5f03ds\u62fc\u63a5,\u56e0\u4e3a\u5b83\u672c\u6765\u4e5f\u6ca1\u5565\u7528\u4e86 (\u53c2\u657029044-todo4);\n *  @result notnull\n */\n+(AIAlgNodeBase*)createEmptyAlg_NoRepeat:(NSArray*)conAlgs {"
        },
        {
            "comment": "This code is checking if there is a shared abstract from the given concrete algorithms. If no shared abstract exists, it creates a new one. Otherwise, it checks for an existing empty concept and avoids creating duplicates by using an already existing one.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAlgNodeManager/AIAlgNodeManager.m\":151-177",
            "content": "    //1. \u5f53\u6709\u4e00\u6761\u662f\u7a7a\u6982\u5ff5 && \u4e14\u522b\u7684\u90fd\u5df2\u7ecf\u62bd\u8c61\u6307\u5411\u5b83\u65f6 => \u5219\u590d\u7528 (\u53c2\u800329044-todo2);\n    AIAlgNodeBase *localAlg = nil;\n    for (AIAlgNodeBase *conAlgA in conAlgs) {\n        if (!ARRISOK(conAlgA.content_ps) && !ARRISOK([SMGUtils filterSingleFromArr:conAlgs checkValid:^BOOL(AIAlgNodeBase *item) {\n            return ![TOUtils mIsC_1:item.pointer c:conAlgA.pointer];\n        }])) {\n            localAlg = conAlgA;\n            break;\n        }\n    }\n    //2. \u6839\u636e\u5177\u8c61conAlgs\u53d6\u5f97\u5171\u540c\u62bd\u8c61;\n    NSArray *absAlgPorts = nil;\n    for (AIAlgNodeBase *conAlg in conAlgs) {\n        NSArray *itemAbsPorts = [AINetUtils absPorts_All:conAlg];\n        if (!absAlgPorts) {\n            absAlgPorts = itemAbsPorts;\n        } else {\n            absAlgPorts = [SMGUtils filterArrA:itemAbsPorts arrB:absAlgPorts];\n        }\n    }\n    [AITest test24:absAlgPorts];\n    if (!localAlg) {\n        //3. \u4ece\u5171\u540c\u62bd\u8c61\u4e2d\u627e\u5df2\u6709\u7a7a\u6982\u5ff5: \u9632\u91cd (\u53c2\u800329044-todo1);\n        AIPort *localPort = [SMGUtils filterSingleFromArr:absAlgPorts checkValid:^BOOL(AIPort *item) {\n            return [item.header isEqualToString:[NSString md5:@\"\"]];"
        },
        {
            "comment": "This code checks if a local algorithm exists and strengthens its connections to concrete and abstract nodes. If no local algorithm is found, it creates a new one and establishes the necessary connections.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAlgNodeManager/AIAlgNodeManager.m\":178-197",
            "content": "        }];\n        if (localPort) {\n            localAlg = [SMGUtils searchNode:localPort.target_p];\n        }\n    }\n    //4. \u627e\u5230\u672c\u5730\u9632\u91cd\u7684\u5219\u52a0\u5f3a: \u5177\u8c61\u6307\u5411conAlgs & \u62bd\u8c61\u6307\u5411absAlgs (\u53c2\u800329031-todo2 & todo3);\n    if (ISOK(localAlg, AIAlgNodeBase.class)) {\n        [AINetUtils relateAlgAbs:localAlg conNodes:conAlgs isNew:false];\n        [AINetUtils relateGeneralCon:localAlg absNodes:Ports2Pits(absAlgPorts)];\n        return localAlg;\n    }\n    //5. \u65e0\u5219\u6784\u5efa: \u5177\u8c61\u6307\u5411conAlgs(\u5728\u6784\u5efa\u65b9\u6cd5\u5df2\u96c6\u6210) & \u62bd\u8c61\u6307\u5411absAlgs (\u53c2\u800329031-todo1 & todo3);\n    AIAlgNodeBase *createAlg = [self createAbsAlgNode:@[] conAlgs:conAlgs at:nil ds:DefaultDataSource isOutBlock:nil type:ATDefault];\n    [AINetUtils relateGeneralCon:createAlg absNodes:Ports2Pits(absAlgPorts)];\n    return createAlg;\n}\n@end"
        }
    ]
}