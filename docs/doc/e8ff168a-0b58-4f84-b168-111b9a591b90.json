{
    "summary": "This code processes data in \"SMG_NothingIsAll\" using arrays, retrieves light descriptions, checks node types, and converts values to strings.",
    "details": [
        {
            "comment": "Code is from the file \"NVHeUtil.m\" in a codebase called \"SMG_NothingIsAll\". It defines methods for handling and manipulating data related to height, node, and strings. The methods are used with arrays as parameters and return boolean or string values depending on specific conditions.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVHeUtil.m\":0-37",
            "content": "//\n//  NVHeUtil.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2019/7/2.\n//  Copyright \u00a9 2019\u5e74 XiaoGang. All rights reserved.\n//\n#import \"NVHeUtil.h\"\n#import \"AINetIndex.h\"\n#import \"AIKVPointer.h\"\n#import \"AIAlgNodeBase.h\"\n#import \"NSString+Extension.h\"\n#import \"ThinkingUtils.h\"\n#import \"AIScore.h\"\n#import \"TVUtil.h\"\n#import \"ImvAlgsHungerModel.h\"\n#import \"ImvAlgsHurtModel.h\"\n@implementation NVHeUtil\n+(BOOL) isHeight:(CGFloat)height fromContent_ps:(NSArray*)fromContent_ps {\n    for (AIKVPointer *p in ARRTOOK(fromContent_ps)) {\n        if ([p.dataSource isEqualToString:@\"sizeHeight\"]) {\n            if ([NUMTOOK([AINetIndex getData:p]) floatValue] == 5) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n+(NSString*) getLightStr4Ps:(NSArray*)node_ps{\n    return [self getLightStr4Ps:node_ps simple:true header:true sep:@\",\"];\n}\n+(NSString*) getLightStr4Ps:(NSArray*)node_ps simple:(BOOL)simple header:(BOOL)header sep:(NSString*)sep{\n    //1. \u6570\u636e\u68c0\u67e5\n    NSMutableString *result = [[NSMutableString alloc] init];"
        },
        {
            "comment": "This code appears to be a method that concatenates strings from an array and returns a substring. It includes nested methods for different conditions of the input node_p, checking if it is a value or algorithm node. The AIKVPointer and NSArray data types are used throughout the code.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVHeUtil.m\":38-63",
            "content": "    node_ps = ARRTOOK(node_ps);\n    sep = STRTOOK(sep);\n    //2. \u62fc\u63a5\u8fd4\u56de\n    for (AIKVPointer *item_p in node_ps){\n        NSString *str = [NVHeUtil getLightStr:item_p simple:simple header:header from:node_ps];\n        if (STRISOK(str)) {\n            [result appendFormat:@\"%@%@\",str,sep];\n        }\n    }\n    return SUBSTR2INDEX(result, result.length - sep.length);\n}\n+(NSString*) getLightStr:(AIKVPointer*)node_p {\n    return [self getLightStr:node_p simple:true header:false];\n}\n+(NSString*) getLightStr:(AIKVPointer*)node_p simple:(BOOL)simple header:(BOOL)header {\n    return [self getLightStr:node_p simple:simple header:header from:nil];\n}\n+(NSString*) getLightStr:(AIKVPointer*)node_p simple:(BOOL)simple header:(BOOL)header from:(NSArray*)from{\n    NSString *lightStr = @\"\";\n    if (ISOK(node_p, AIKVPointer.class)) {\n        if ([self isValue:node_p]) {\n            lightStr = [self getLightStr_ValueP:node_p from:from];\n        }else if ([self isAlg:node_p]) {\n            AIAlgNodeBase *algNode = [SMGUtils searchNode:node_p];"
        },
        {
            "comment": "This code checks if a specific node exists and depending on its content, it retrieves the light string. It also retrieves values for height and border from the same node's content. If the height is 100, it adds an extra text to the light string. This appears to be part of a larger function used for data processing or manipulation.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVHeUtil.m\":64-80",
            "content": "            if (algNode) {\n                if (simple) {\n                    NSString *firstValueStr = [self getLightStr_ValueP:ARR_INDEX(algNode.content_ps, 0) from:algNode.content_ps];\n                    lightStr = STRFORMAT(@\"%@%@\",firstValueStr,(algNode.content_ps.count > 1) ? @\"...\" : @\"\");\n                }else{\n                    lightStr = [self getLightStr4Ps:algNode.content_ps simple:simple header:header sep:@\",\"];\n                }\n                //\u7b80\u5316\u65e5\u5fd71: \u6982\u5ff5\u52a0\u540e\u8f8d\n                int height = NUMTOOK([AINetIndex getData:[SMGUtils filterSingleFromArr:algNode.content_ps checkValid:^BOOL(AIKVPointer *item) {\n                    return [@\"sizeHeight\" isEqualToString:item.dataSource];\n                }]]).intValue;\n                int border = NUMTOOK([AINetIndex getData:[SMGUtils filterSingleFromArr:algNode.content_ps checkValid:^BOOL(AIKVPointer *item) {\n                    return [@\"border\" isEqualToString:item.dataSource];\n                }]]).intValue;\n                if (height == 100) {\n                    lightStr = STRFORMAT(@\"%@,\u68d2\",lightStr);"
        },
        {
            "comment": "The code is checking the height and border values of a node and applying specific conditions to set the value of \"lightStr\". If the node contains certain algorithms (FLY_RDS or KICK_RDS), it sets the header variable to false. Then, it checks if the current object is an FO or MV node and performs corresponding actions.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVHeUtil.m\":81-102",
            "content": "                } else if (height == 30) {\n                    lightStr = STRFORMAT(@\"%@,\u9e1f\",lightStr);\n                } else if (height == 5) {\n                    if (border > 0) lightStr = STRFORMAT(@\"%@,\u76ae\u679c\",lightStr);\n                    else lightStr = STRFORMAT(@\"%@,\u679c\",lightStr);\n                }\n                //\u7b80\u5316\u65e5\u5fd72: \u98de\u4e0d\u52a0header\n                if ([SMGUtils filterSingleFromArr:algNode.content_ps checkValid:^BOOL(AIKVPointer *item) {\n                    return [FLY_RDS isEqualToString:item.algsType] || [KICK_RDS isEqualToString:item.algsType];\n                }]) {\n                    header = false;\n                }\n            }\n        }else if([self isFo:node_p]){\n            AIFoNodeBase *foNode = [SMGUtils searchNode:node_p];\n            if (foNode) {\n                lightStr = [self getLightStr4Ps:foNode.content_ps simple:simple header:header sep:@\",\"];\n            }\n        }else if([self isMv:node_p]){\n            CGFloat score = [AIScore score4MV:node_p ratio:1.0f];\n            lightSt"
        },
        {
            "comment": "This code retrieves a light description string for a given value_p, depending on the data source. It formats and returns the string with appropriate values using the getLightStr_Value:algsType:dataSource method, which returns a formatted NSString.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVHeUtil.m\":102-123",
            "content": "r = STRFORMAT(@\"%@%@%@\",Mvp2DeltaStr(node_p),Class2Str(NSClassFromString(node_p.algsType)),Double2Str_NDZ(score));\n        }\n    }\n    //2. \u8fd4\u56de;\n    if (header) lightStr = [self decoratorHeader:lightStr node_p:node_p];\n    return lightStr;\n}\n//\u83b7\u53d6value_p\u7684light\u63cf\u8ff0;\n+(NSString*) getLightStr_ValueP:(AIKVPointer*)value_p from:(NSArray*)from{\n    if (!value_p) return @\"\";\n    double value = [NUMTOOK([AINetIndex getData:value_p]) doubleValue];\n    NSString *valueStr = [self getLightStr_Value:value algsType:value_p.algsType dataSource:value_p.dataSource];\n    if ([@\"sizeWidth\" isEqualToString:value_p.dataSource]) {\n        return STRFORMAT(@\"\u5bbd%@\",valueStr);\n    }else if ([@\"sizeHeight\" isEqualToString:value_p.dataSource]) {\n        return @\"\";//STRFORMAT(@\"\u9ad8%@\",valueStr);\n    }else if ([@\"colorRed\" isEqualToString:value_p.dataSource]) {\n        return STRFORMAT(@\"\u7ea2%@\",valueStr);\n    }else if ([@\"colorBlue\" isEqualToString:value_p.dataSource]) {\n        return STRFORMAT(@\"\u84dd%@\",valueStr);\n    }else if ([@\"colorGreen\" isEqualToString:value_p.dataSource]) {"
        },
        {
            "comment": "This code seems to be part of a larger function and appears to be checking the value of a data source string. Depending on the data source, it returns a formatted string using STRFORMAT. For example, if the datasource is \"radius\", it will return a formatted string with the word \"\u5f62\" followed by the valueStr. The code also includes logic for other possible data sources such as direction, distance, distanceX, and speed. If the value from the \"sizeHeight\" data source equals 100, it returns a different formatted string for the \"distanceY\" case.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVHeUtil.m\":124-140",
            "content": "        return STRFORMAT(@\"\u7eff%@\",valueStr);\n    }else if ([@\"radius\" isEqualToString:value_p.dataSource]) {\n        return STRFORMAT(@\"\u5f62%@\",valueStr);\n    }else if ([@\"direction\" isEqualToString:value_p.dataSource]) {\n        return STRFORMAT(@\"\u5411%@\",valueStr);\n    }else if ([@\"distance\" isEqualToString:value_p.dataSource]) {\n        return STRFORMAT(@\"\u8ddd%@\",valueStr);\n    }else if ([@\"distanceX\" isEqualToString:value_p.dataSource]) {\n        return STRFORMAT(@\"X\u8ddd%@\",valueStr);\n    }else if ([@\"distanceY\" isEqualToString:value_p.dataSource]) {\n        if (ARRISOK(from) && NUMTOOK(ARR_INDEX([SMGUtils convertArr:from convertBlock:^id(AIKVPointer *item) {\n            if ([@\"sizeHeight\" isEqualToString:item.dataSource]) return NUMTOOK([AINetIndex getData:item]);\n            return nil;\n        }], 0)).doubleValue == 100) return STRFORMAT(@\"Y\u8ddd_%@_%@\",[TVUtil distanceYDesc:value],valueStr);\n        return STRFORMAT(@\"Y\u8ddd%@\",valueStr);\n    }else if ([@\"speed\" isEqualToString:value_p.dataSource]) {\n        return STRFORMAT(@\"\u901f%@\",valueStr);"
        },
        {
            "comment": "This code is comparing the value of `value_p.dataSource` with various strings, and returning a formatted string based on the match. It seems to be handling different types of events or actions, such as \"border\", \"posX\", \"posY\", and others like eating, flying, kicking, etc. The code also handles urgent events related to hunger and hurt models.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVHeUtil.m\":141-158",
            "content": "    }else if ([@\"border\" isEqualToString:value_p.dataSource]) {\n        return @\"\";//STRFORMAT(@\"\u76ae%@\",valueStr);\n    }else if ([@\"posX\" isEqualToString:value_p.dataSource]) {\n        return STRFORMAT(@\"X%@\",valueStr);\n    }else if ([@\"posY\" isEqualToString:value_p.dataSource]) {\n        return STRFORMAT(@\"Y%@\",valueStr);\n    }else if([EAT_RDS isEqualToString:value_p.algsType]){\n        return STRFORMAT(@\"\u5403%@\",valueStr);\n    }else if([FLY_RDS isEqualToString:value_p.algsType]){\n        return STRFORMAT(@\"\u98de%@\",valueStr);\n    }else if([KICK_RDS isEqualToString:value_p.algsType]){\n        return STRFORMAT(@\"\u8e22%@\",valueStr);\n    }else if([NSStringFromClass(ImvAlgsHungerModel.class) isEqualToString:value_p.algsType] && [@\"urgentTo\" isEqualToString:value_p.dataSource]){\n        return STRFORMAT(@\"\u997f%@\",valueStr);\n    }else if([NSStringFromClass(ImvAlgsHurtModel.class) isEqualToString:value_p.algsType] && [@\"urgentTo\" isEqualToString:value_p.dataSource]){\n        return STRFORMAT(@\"\u75bc%@\",valueStr);\n    }\n    return valueStr;"
        },
        {
            "comment": "This method gets the light description of a given value based on its algorithm type and data source. It has separate implementations for ATHav, ATNone, ATGreater, ATLess, ATPlus, ATSub, FLY_RDS, KICK_RDS, direction, and other values. Additionally, there are helper methods to convert the values to their respective descriptions.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVHeUtil.m\":159-184",
            "content": "}\n//\u83b7\u53d6value\u7684light\u63cf\u8ff0;\n+(NSString*) getLightStr_Value:(double)value algsType:(NSString*)algsType dataSource:(NSString*)dataSource{\n    if(value == ATHav || value == ATNone || value == ATGreater ||\n       value == ATLess || value == ATPlus || value == ATSub){\n        return [NSLog_Extension convertATType2Desc:value];\n    }else if([FLY_RDS isEqualToString:algsType]){\n        return [NVHeUtil fly2Str:value];\n    }else if([KICK_RDS isEqualToString:algsType]){\n        return [NVHeUtil fly2Str:value];\n    }else if([@\"direction\" isEqualToString:dataSource]){\n        return [NVHeUtil direction2Str:value];\n    }\n    return Double2Str_NDZ(value);\n}\n//MARK:===============================================================\n//MARK:                     < \u8282\u70b9\u7c7b\u578b\u5224\u65ad >\n//MARK:===============================================================\n+(BOOL) isValue:(AIKVPointer*)node_p{\n    return [kPN_VALUE isEqualToString:node_p.folderName] || [kPN_DATA isEqualToString:node_p.folderName] || [kPN_INDEX isEqualToString:node_p.folderName];\n}\n+(BOOL) isAlg:(AIKVPointer*)node_p{"
        },
        {
            "comment": "This code defines several methods for checking if a given node matches certain predefined strings. These methods are used to determine the type of a node and return its corresponding identifier string. The decoratorHeader method takes a lightString and a node pointer as arguments, extracts the pointer id as a string, and checks if the node is of type ALG using the isAlg method.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVHeUtil.m\":185-205",
            "content": "    return [kPN_ALG_NODE isEqualToString:node_p.folderName] || [kPN_ALG_ABS_NODE isEqualToString:node_p.folderName];\n}\n+(BOOL) isFo:(AIKVPointer*)node_p{\n    return [kPN_FRONT_ORDER_NODE isEqualToString:node_p.folderName] || [kPN_FO_ABS_NODE isEqualToString:node_p.folderName];\n}\n+(BOOL) isMv:(AIKVPointer*)node_p{\n    return [kPN_CMV_NODE isEqualToString:node_p.folderName] || [kPN_ABS_CMV_NODE isEqualToString:node_p.folderName];\n}\n+(BOOL) isAbs:(AIKVPointer*)node_p{\n    return [kPN_FO_ABS_NODE isEqualToString:node_p.folderName] || [kPN_ABS_CMV_NODE isEqualToString:node_p.folderName] || [kPN_ALG_ABS_NODE isEqualToString:node_p.folderName];\n}\n//MARK:===============================================================\n//MARK:                     < privateMethod >\n//MARK:===============================================================\n+(NSString*) decoratorHeader:(NSString*)lightStr node_p:(AIKVPointer*)node_p{\n    NSString *pIdStr = node_p ? STRFORMAT(@\"%ld\",node_p.pointerId) : @\"\";\n    if ([self isAlg:node_p]) {"
        },
        {
            "comment": "This code contains a set of functions that convert different input values into strings. The `direction2Str:` function converts a directional value to a string representation of a whole number, while the `fly2Str:` function converts a fly directional value to one of eight corresponding arrow symbols. The code also includes two conditional statements that return specific strings based on the input type and values.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/NVHeUtil.m\":206-239",
            "content": "        return STRFORMAT(@\"A%@(%@)\",pIdStr,lightStr);\n    }else if([self isFo:node_p]){\n        return STRFORMAT(@\"F%@[%@]\",pIdStr,lightStr);\n    }else if([self isMv:node_p]){\n        return STRFORMAT(@\"M%@{%@}\",pIdStr,lightStr);\n    }\n    return lightStr;\n}\n/**\n *  MARK:--------------------\u65b9\u5411--------------------\n *  @version\n *      2023.03.13: \u98de\u65b9\u5411\u67098\u5411,\u4f46\u89c6\u89c9\u65b9\u5411\u6539\u4e3a360\u5411\u4e86 (\u56e0\u4e3a\u65e9\u5df2\u652f\u6301\u76f8\u8fd1\u5339\u914d\u4e86);\n */\n+(NSString*) direction2Str:(CGFloat)value{\n    return STRFORMAT(@\"%.0f\",value);\n}\n+(NSString*) fly2Str:(CGFloat)value{\n    int caseValue = value * 8;\n    switch (caseValue) {\n        case 0: return @\"\u2190\";\n        case 1: return @\"\u2196\";\n        case 2: return @\"\u2191\";\n        case 3: return @\"\u2197\";\n        case 4: return @\"\u2192\";\n        case 5: return @\"\u2198\";\n        case 6: return @\"\u2193\";\n        case 7: return @\"\u2199\";\n    }\n    return @\"\";\n}\n@end"
        }
    ]
}