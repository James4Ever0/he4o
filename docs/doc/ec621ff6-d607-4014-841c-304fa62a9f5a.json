{
    "summary": "The BirdGrowPage class manages bird actions, view initialization, food interaction, state updates, training exercises, and user input-controlled movement. It includes wood-throwing, bird detection, button handling, animation events, progress tracking, collision detection, message logging, and bird-fruit interactions in the game implementation.",
    "details": [
        {
            "comment": "This code is for the \"BirdGrowPage\" class in a project called \"SMG_NothingIsAll\". It imports several other files and declares properties such as birdView, tap gesture recognizers, UI views, and a WoodView. It also sets up properties like waitHiting, isHited, and lastHitModel for interaction with the user interface.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":0-30",
            "content": "//\n//  BirdGrowPage.m\n//  SMG_NothingIsAll\n//\n//  Created by jiaxiaogang on 2018/11/13.\n//  Copyright \u00a9 2018\u5e74 XiaoGang. All rights reserved.\n//\n#import \"BirdGrowPage.h\"\n#import \"BirdView.h\"\n#import \"FoodView.h\"\n#import \"UIView+Extension.h\"\n#import \"DemoHunger.h\"\n#import \"NVViewUtil.h\"\n#import \"WoodView.h\"\n#import \"HitItemModel.h\"\n@interface BirdGrowPage ()<UIGestureRecognizerDelegate,BirdViewDelegate,WoodViewDelegate>\n@property (strong,nonatomic) BirdView *birdView;\n@property (strong,nonatomic) UITapGestureRecognizer *singleTap;\n@property (strong,nonatomic) UITapGestureRecognizer *doubleTap;\n@property (strong,nonatomic) UITapGestureRecognizer *threeTap;\n@property (weak, nonatomic) IBOutlet UIView *farView;\n@property (weak, nonatomic) IBOutlet UIView *borderView;\n@property (weak, nonatomic) IBOutlet UIButton *throwWoodBtn;\n@property (strong, nonatomic) WoodView *woodView;\n@property (assign, nonatomic) BOOL waitHiting; //\u78b0\u649e\u68c0\u6d4b\u4e2d (\u5f53\u6254\u6728\u68d2\u4e2d\u65f6,\u505a\u78b0\u649e\u68c0\u6d4b);\n@property (assign, nonatomic) BOOL isHited; //\u68c0\u6d4b\u649e\u5230\u4e86;\n@property (strong, nonatomic) HitItemModel *lastHitModel;"
        },
        {
            "comment": "This code initializes the view, sets title, creates birdView as a subview, positions and assigns delegate to it, and sets up tap gesture recognizers for double-tap, single-tap, and triple-tap interactions. It also configures the number of taps and touches required, and specifies that the triple-tap should fail if not recognized first.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":31-63",
            "content": "@property (assign, nonatomic) CGRect lastWoodFrame;//\u7528\u4e8e\u6728\u68d2\u98df\u7269\u78b0\u649e\u68c0\u6d4b\n@end\n@implementation BirdGrowPage\n-(void) initView{\n    [super initView];\n    //1. self\n    self.title = @\"\u5c0f\u9e1f\u6210\u957f\u6f14\u793a\";\n    //2. birdView\n    self.birdView = [[BirdView alloc] init];\n    [self.view addSubview:self.birdView];\n    [self.birdView setCenter:[self getBirdBirthPos]];\n    self.birdView.delegate = self;\n    self.birdView.userInteractionEnabled = false;\n    //3. threeTap\n    self.threeTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(threeTap:)];\n    self.threeTap.numberOfTapsRequired = 3;\n    self.threeTap.numberOfTouchesRequired = 1;\n    self.threeTap.delegate = self;\n    //3. doubleTap\n    self.doubleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(doubleTap:)];\n    self.doubleTap.numberOfTapsRequired = 2;\n    self.doubleTap.numberOfTouchesRequired = 1;\n    self.doubleTap.delegate = self;\n    [self.doubleTap requireGestureRecognizerToFail:self.threeTap];\n    //4. singleTap\n    self.singleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(singleTap:)];"
        },
        {
            "comment": "This code sets up gesture recognizers for different views, adds them to the views, and registers callbacks for events on a WoodView. It also initializes data and configures UI elements like border color and width.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":64-90",
            "content": "    self.singleTap.numberOfTapsRequired = 1;\n    self.singleTap.numberOfTouchesRequired  = 1;\n    self.singleTap.delegate = self;\n    [self.singleTap requireGestureRecognizerToFail:self.doubleTap];\n    [self.singleTap requireGestureRecognizerToFail:self.threeTap];\n    //4. farView\n    [self.farView addGestureRecognizer:self.singleTap];\n    //5. borderView\n    [self.borderView.layer setBorderColor:[UIColor grayColor].CGColor];\n    [self.borderView addGestureRecognizer:self.singleTap];\n    [self.borderView addGestureRecognizer:self.doubleTap];\n    [self.borderView addGestureRecognizer:self.threeTap];\n    [self.borderView.layer setBorderWidth:20];\n    //6. woodView\n    self.woodView = [[WoodView alloc] init];\n    self.woodView.delegate = self;\n    [self.view addSubview:self.woodView];\n}\n-(void) initData{\n    [super initData];\n    [theRT regist:kFlySEL target:self selector:@selector(touchWingBlock:)];\n    [theRT regist:kWoodLeftSEL target:self selector:@selector(throwWood_Left)];\n    [theRT regist:kWoodRdmSEL target:self selector:@selector(throwWood_Rdm)];"
        },
        {
            "comment": "This code registers three selectors for bird actions and sets the waitEat flag to false when the view disappears. It also handles a \"nearFeedingBtnOnClick\" event by adding a new FoodView, setting its origin, and adding it to the current view. The food will land on the bird at a random x-coordinate.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":91-117",
            "content": "    [theRT regist:kHungerSEL target:self selector:@selector(rtHungerBlock)];\n    [theRT regist:kFoodRdmSEL target:self selector:@selector(randomThrowFood4Screen:)];\n    [theRT regist:kFoodRdmNearSEL target:self selector:@selector(randomThrowFood4Near)];\n}\n-(void)viewWillDisappear:(BOOL)animated {\n    [super viewWillDisappear:animated];\n    self.birdView.waitEat = false;\n}\n//MARK:===============================================================\n//MARK:                     < onclick >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u76f4\u6295--------------------\n *  @version\n *      2021.01.24: \u4f7f\u76f4\u6295\u5230\u4e4c\u9e26\u8eab\u4e0a\u7684\u575a\u679c\u4f4d\u7f6e\u66f4\u968f\u673a\u4e9b (\u53c2\u8003\u89c6\u89c9DisY\u7b97\u6cd5\u4e2d20210124\u6ce8\u91ca);\n */\n- (IBAction)nearFeedingBtnOnClick:(id)sender {\n    [theApp.heLogView addDemoLog:@\"\u76f4\u6295\"];\n    DemoLog(@\"\u76f4\u6295\")\n    FoodView *foodView = [[FoodView alloc] init];\n    [foodView hit];\n    [foodView setOrigin:CGPointMake(ScreenWidth * 0.375f, ScreenHeight - 66)];\n    [self.view addSubview:foodView];\n    CGFloat targetX = self.birdView.center.x + (arc4random() % 20 - 10);"
        },
        {
            "comment": "This code snippet is from the \"BirdGrowPage.m\" file in a mobile app, and it appears to be responsible for randomizing the position of food items on the screen by throwing them within the boundaries of the screen. It then proceeds to animate the food item's movement, check if the bird can eat it, update the visual before the bird eats it, and finally, make the bird interact with the thrown food.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":118-143",
            "content": "    CGFloat targetY = self.birdView.center.y + (arc4random() % 20 - 10);\n    CGPoint targetPoint = CGPointMake(targetX, targetY);\n    [UIView animateWithDuration:0.3f animations:^{\n        [foodView setCenter:targetPoint];\n    }completion:^(BOOL finished) {\n        //0. \u6254\u540e\u5224\u65ad\u80fd\u5403\u5230\u54ea\u4e9b\u575a\u679c;\n        self.birdView.hitFoods = [self birdView_GetFoodOnHit:self.birdView.frame birdEnd:self.birdView.frame status:FoodStatus_Eat];\n        //1. \u5403\u524d\u89c6\u89c9\n        [self.birdView see:self.view];\n        //2. \u89e6\u78b0\u5230\u9e1f\u5634;\n        [self.birdView touchMouth];\n    }];\n}\n//MARK:===============================================================\n//MARK:                     < method >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u968f\u673a\u5c4f\u5185\u6254\u4e2a\u575a\u679c--------------------\n */\n-(void) randomThrowFood4Screen:(NSNumber*)statusNum {\n    //1. \u6570\u636e\u51c6\u5907;\n    int randomX = 20 + (arc4random() % (int)(ScreenWidth - 40));//\u5c4f\u5185x\u4e3a20\u5230screenW-20;\n    int randomY = 84 + (arc4random() % (int)(ScreenHeight - 168));//\u5c4f\u5185y\u4e3a84\u5230screenW-84;"
        },
        {
            "comment": "This code defines several methods for handling food-related actions in a game. It converts a direction into a food position, randomly throws food near the bird, and handles different types of food statuses. The code also includes randomization logic to avoid throwing food directly at the bird and to introduce slight variations in the thrown food's position.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":144-178",
            "content": "    FoodStatus status = NUMTOOK(statusNum).intValue;\n    //2. \u6295\u98df\u7269\n    [self food2Pos:CGPointMake(randomX, randomY) caller4RL:kFoodRdmSEL status:status];\n}\n/**\n *  MARK:--------------------\u968f\u673a\u9644\u8fd1\u6254\u4e2a\u575a\u679c--------------------\n *  @desc \u5728\u9e1f\u7684\u516b\u4e2a\u65b9\u5411,\u968f\u673a3\u98de\u8ddd\u79bb\u5185\u6295\u4e2a\u575a\u679c;\n *          1. \u4e0d\u5141\u8bb8\u6295\u5728\u9e1f\u8eab\u4e0a;\n *          2. \u6295\u7684\u4f4d\u7f6e\u8981\u968f\u673a\u6296\u52a8\u4e00\u4e9b,\u907f\u514d\u5b8c\u5168\u7684\u76f4\u6216\u659c;\n */\n-(void) randomThrowFood4Near {\n    //1. \u6570\u636e\u51c6\u5907;\n    int random = arc4random() % 8;\n    //2. \u968f\u673a\u65b9\u5411\u6254\u98df\u7269\n    [self food2Pos:[self convertDirection2FoodPos:random] caller4RL:kFoodRdmNearSEL status:FoodStatus_Eat];\n}\n/**\n *  MARK:--------------------\u575a\u679c\u65b9\u5411\u8f6c\u6210\u575a\u679c\u5750\u6807--------------------\n *  @version\n *      2023.06.16: \u575a\u679c\u6254\u8fd1\u4e9b (\u53c2\u800330024-\u4fee\u590d);\n */\n-(CGPoint) convertDirection2FoodPos:(int)direction {\n    //1. \u6570\u636e\u51c6\u5907;\n    CGPoint birdPos = self.birdView.center;\n    int ziDis = 15 + 8 + (arc4random() % 14);//\u76f4\u7ebf\u65f6,\u8ddd\u79bb\u4e3a23 -> 37\u4e4b\u95f4;\n    int xieDis = 15 + 8 + (arc4random() % 5);//\u659c\u7ebf\u65f6,\u8ddd\u79bb\u4e3a23 -> 28\u4e4b\u95f4;\n    int douDon1 = (arc4random() % 6) - 3;//\u6296\u52a8\u8ddd\u79bb\u6b63\u8d1f3;\n    int douDon2 = (arc4random() % 6) - 3;//\u6296\u52a8\u8ddd\u79bb\u6b63\u8d1f3;\n    //2. \u968f\u673a\u65b9\u5411\u6254\u98df\u7269\n    if (direction == 0) return CGPointMake(birdPos.x - ziDis + douDon1, birdPos.y + douDon2);//\u5de6"
        },
        {
            "comment": "This code calculates the position for a bird based on different directions and returns it. It is part of a method that handles single taps to feed the bird, which then calls another method to handle the feeding action with specific status. The methods involve calculating distance and angle.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":179-196",
            "content": "    else if (direction == 1) return CGPointMake(birdPos.x - xieDis + douDon1, birdPos.y - xieDis + douDon2);//\u5de6\u4e0a\n    else if (direction == 2) return CGPointMake(birdPos.x + douDon1, birdPos.y - ziDis + douDon2);//\u4e0a\n    else if (direction == 3) return CGPointMake(birdPos.x + xieDis + douDon1, birdPos.y - xieDis + douDon2);\n    else if (direction == 4) return CGPointMake(birdPos.x + ziDis + douDon1, birdPos.y + douDon2);\n    else if (direction == 5) return CGPointMake(birdPos.x + xieDis + douDon1, birdPos.y + xieDis + douDon2);\n    else if (direction == 6) return CGPointMake(birdPos.x + douDon1, birdPos.y + ziDis + douDon2);\n    else if (direction == 7) return CGPointMake(birdPos.x - xieDis + douDon1, birdPos.y + xieDis + douDon2);\n    return birdPos;\n}\n//\u5355\u51fb\u6295\u98df\n- (void)singleTap:(UITapGestureRecognizer *)tapRecognizer{\n    [self clickTap4Food_General:tapRecognizer status:FoodStatus_Eat];\n}\n//\u56e0\u70b9\u51fb\u800c\u6295\u98df\n- (void)clickTap4Food_General:(UITapGestureRecognizer *)tapRecognizer status:(FoodStatus)status{\n    //1. \u8ba1\u7b97\u8ddd\u79bb\u548c\u89d2\u5ea6"
        },
        {
            "comment": "This code handles tap gestures and calculates the corresponding 2D target point in the world coordinates based on the tap location. It differentiates between taps on \"farView\" and \"borderView\", and logs the result. If the target point is not (0, 0), it calls a method to position the food accordingly.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":197-218",
            "content": "    UIView *tapView = tapRecognizer.view;\n    CGPoint point = [tapRecognizer locationInView:tapView];                 //\u70b9\u51fb\u5750\u6807\n    CGPoint targetPoint = CGPointZero;\n    ISTitleLog(@\"\u73b0\u5b9e\u4e16\u754c\");\n    //2. \u8fdc\u6295\u6309\u952e,\u8ba1\u7b97\u6620\u5c04\u5750\u6807;\n    if ([self.farView isEqual:tapView]) {\n        CGFloat xRate = point.x / tapView.width;\n        CGFloat yRate = point.y / tapView.height;\n        CGFloat targetX = 30 + (ScreenWidth - 60) * xRate;\n        CGFloat targetY = 94 + (ScreenHeight - 60 - 128) * yRate;\n        targetPoint = CGPointMake(targetX, targetY);\n    }else if([self.borderView isEqual:tapView]){\n        //3. \u5168\u5c4f\u89e6\u6478_\u8ba1\u7b97\u89e6\u6478\u70b9\u4e16\u754c\u5750\u6807 (self.view\u672c\u6765\u5c31\u662f\u5168\u5c4f,\u6240\u4ee5\u4e0d\u7528\u8f6c\u6362\u5750\u6807);\n        targetPoint = [tapView convertPoint:point toView:theApp.window];   //\u70b9\u51fb\u4e16\u754c\u5750\u6807\n    }\n    //4. \u6295\u98df & \u6253\u65e5\u5fd7;\n    if (targetPoint.x != 0 && targetPoint.y != 0) {\n        DemoLog(@\"\u8fdc\u6295 (X:%.2f Y:%.2f)\",targetPoint.x,targetPoint.y);\n        [theApp.heLogView addDemoLog:STRFORMAT(@\"\u8fdc\u6295 (X:%.2f Y:%.2f)\",targetPoint.x,targetPoint.y)];\n        [self food2Pos:targetPoint caller4RL:nil status:status];"
        },
        {
            "comment": "1. Double tap triggers a method to click the food border.\n2. Three taps initiate flight based on distance, angle, and direction.\n3. Left food button animation flashes and calls \"food2Pos\" for left food position.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":219-248",
            "content": "    }\n}\n//\u53cc\u51fb\u6295\u5e26\u76ae\u575a\u679c\n- (void)doubleTap:(UITapGestureRecognizer *)tapRecognizer{\n    [self clickTap4Food_General:tapRecognizer status:FoodStatus_Border];\n}\n//\u4e09\u51fb\u98de\u884c\n- (void)threeTap:(UITapGestureRecognizer *)tapRecognizer{\n    //1. \u8ba1\u7b97\u8ddd\u79bb\u548c\u89d2\u5ea6\n    UIView *tapView = tapRecognizer.view;\n    CGPoint point = [tapRecognizer locationInView:tapView];                 //\u70b9\u51fb\u5750\u6807\n    CGPoint tapPoint = [tapView convertPoint:point toView:theApp.window];   //\u70b9\u51fb\u4e16\u754c\u5750\u6807\n    CGPoint birdPoint = [self.birdView.superview convertPoint:self.birdView.center toView:theApp.window];//\u9e1f\u4e16\u754c\u5750\u6807\n    CGFloat angle = [NVViewUtil angleZero2OnePoint:birdPoint second:tapPoint];\n    //2. \u98de\u884c\n    angle = [NVViewUtil convertAngle2Direction_8:angle];\n    int direction = (int)(angle * 8.0f);\n    [self.birdView touchWing:direction];\n}\n- (IBAction)foodLeftOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u8fdc\u6295-\u5de6\");\n    [self food2Pos:[self convertDirection2FoodPos:0] caller4RL:nil status:FoodStatus_Eat];\n}\n- (IBAction)foodLeftUpOnClick:(id)sender {\n    [self animationFlash:sender];"
        },
        {
            "comment": "This code contains multiple IBAction methods that handle food positioning based on different button clicks. When a specific button is clicked, the animationFlash method is called and a DemoLog message with a specific direction is logged. The corresponding food2Pos method is then invoked with the converted food position and the status set to FoodStatus_Eat.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":249-275",
            "content": "    DemoLog(@\"\u8fdc\u6295-\u5de6\u4e0a\");\n    [self food2Pos:[self convertDirection2FoodPos:1] caller4RL:nil status:FoodStatus_Eat];\n}\n- (IBAction)foodUpOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u8fdc\u6295-\u4e0a\");\n    [self food2Pos:[self convertDirection2FoodPos:2] caller4RL:nil status:FoodStatus_Eat];\n}\n- (IBAction)foodRightUpOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u8fdc\u6295-\u53f3\u4e0a\");\n    [self food2Pos:[self convertDirection2FoodPos:3] caller4RL:nil status:FoodStatus_Eat];\n}\n- (IBAction)foodRightOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u8fdc\u6295-\u53f3\");\n    [self food2Pos:[self convertDirection2FoodPos:4] caller4RL:nil status:FoodStatus_Eat];\n}\n- (IBAction)foodRightDownOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u8fdc\u6295-\u53f3\u4e0b\");\n    [self food2Pos:[self convertDirection2FoodPos:5] caller4RL:nil status:FoodStatus_Eat];\n}\n- (IBAction)foodDownOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u8fdc\u6295-\u4e0b\");\n    [self food2Pos:[self convertDirection2FoodPos:6] caller4RL:nil status:FoodStatus_Eat];"
        },
        {
            "comment": "This code handles inputs for hunger and food, triggering the bird to eat. It updates the bird's state based on the input and can be used for both manual feeding and strong training exercises. The code also includes functions for continuous hunger inputs, waiting for the right moment to continue training, and clearing pause names when the bird has eaten a hard nut.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":276-317",
            "content": "}\n- (IBAction)foodLeftDownOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u8fdc\u6295-\u5de6\u4e0b\");\n    [self food2Pos:[self convertDirection2FoodPos:7] caller4RL:nil status:FoodStatus_Eat];\n}\n/**\n *  MARK:--------------------\u9965\u997f\u662f\u8fde\u7eed\u7684mv\u8f93\u5165 (\u53c2\u800328171-todo2)--------------------\n *  @version\n *      2023.06.16: \u66f4\u997f\u95f4\u9694\u75315\u8c03\u957f\u62108 (\u53c2\u800330024-\u4fee\u590d);\n *      2023.06.26: \u652f\u6301\u6301\u7eed\u997f\u611f (\u53c2\u800330042-todo1);\n *      2023.06.26: \u652f\u6301\u997f\u540e\u89c6\u89c9 (\u53c2\u800330042-todo2);\n */\n- (IBAction)hungerBtnOnClick:(id)sender {\n    ISTitleLog(@\"\u611f\u5b98\u8f93\u5165\");\n    //DemoLog(@\"\u9a6c\u4e0a\u997fonClick\");\n    //[theApp.heLogView addDemoLog:@\"\u9a6c\u4e0a\u997fonClick\"];\n    //2. \u89e6\u53d1\u997f\u611f (\u624b\u52a8\u7684\u6267\u884c999\u8f6e)\n    self.birdView.waitEat = true;\n    [self hungerSingle:999];\n}\n- (void) rtHungerBlock {\n    ISTitleLog(@\"\u611f\u5b98\u8f93\u5165\");\n    //2. \u89e6\u53d1\u997f\u611f (\u5f3a\u8bad\u4ec5\u6267\u884c3\u8f6e)\n    self.birdView.waitEat = true;\n    [self hungerSingle:3];\n    //3. \u5f3a\u8bad\u5de5\u5177\u9700\u8981\u7b49\u5f85\u7b2c2\u6b21\u66f4\u997f\u540e,\u624d\u80fd\u7ee7\u7eed\u8bad\u7ec3\u4e0b\u8f6e;\n    [theRT appendPauseNames:@[kMainPageSEL]];\n    //4. \u62a5\u5f3a\u8bad\u7ed3\u675f\u6807\u8bb0;\n    [theRT invoked:kHungerSEL];\n}\n-(void) hungerSingle:(int)invokedCount {\n    //0. \u6570\u636e\u51c6\u5907;\n    if (!self.birdView.waitEat) {\n        [theRT clearPauseNames];//\u5403\u4e0a\u575a\u679c\u540e,\u5c31\u4e0d\u7b49\u5f85\u6301\u7eed\u997f\u5faa\u73af\u4e86;"
        },
        {
            "comment": "Bird grows hungry and triggers hunger state; countdown executed, pause names cleared. Bird view shows after five seconds; touch wing button performs touchWingBlock action. Calculates random number to determine which direction the bird flies in if it is outside of screen boundaries.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":318-356",
            "content": "        return;\n    }\n    //1. \u5148\u611f\u89c9\u5230\u997f: \u4ece0.7\u997f\u52300.6 (\u63090.6\u8ba1\u7b97\u5f97\u8feb\u5207\u5ea6\u4e3a16);\n    [[[DemoHunger alloc] init] commit:0.6 state:UIDeviceBatteryStateUnplugged];\n    NSLog(@\"\u89e6\u53d1\u997f\u611f:%d\",invokedCount);\n    //2. \u6267\u884c\u8ba1\u6570 (\u6267\u884c\u5b8c\u540e,\u5f3a\u8bad\u5de5\u5177\u7ee7\u7eed);\n    invokedCount--;\n    if (invokedCount <= 0) {\n        [theRT clearPauseNames];\n        return;\n    }\n    //3. \u4e94\u79d2\u540e\u66f4\u997f: \u4ece0.6\u997f\u52300.5 (\u63090.5\u8ba1\u7b97\u5f97\u8feb\u5207\u5ea6\u4e3a25);\n    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(8 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{\n        [self hungerSingle:invokedCount];\n    });\n    //4. \u997f\u540e\u89c6\u89c9 (\u53c2\u800330042-todo2);\n    [self.birdView see:self.view];\n}\n- (IBAction)touchWingBtnOnClick:(id)sender {\n    [self touchWingBlock:nil];\n}\n- (void)touchWingBlock:(NSNumber*)direction {\n    ISTitleLog(@\"\u73b0\u5b9e\u4e16\u754c\");\n    DemoLog(@\"\u6478\u7fc5\u8180onClick\");\n    [theApp.heLogView addDemoLog:@\"\u6478\u7fc5\u8180onClick\"];\n    //1. \u8ba1\u7b97random\n    long random = 0;\n    if ([self birdLeftOut]) {\n        //2. \u5de6\u5c4f\u5916,\u4ec5\u54113,4,5\u98de;\n        random = arc4random() % 3 + 3;\n    }else if([self birdRightOut]){\n        //3. \u53f3\u5c4f\u5916,\u4ec5\u54117,0,1\u98de;\n        random = ((arc4random() % 3) + 7) % 8;"
        },
        {
            "comment": "This code determines the bird's movement direction based on its position and user input. If the bird is outside the screen, it will fly towards a specific direction. If the bird is inside the screen, it can fly in any direction. The touchWing methods handle the left/right/up wing clicks and trigger corresponding animations.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":357-392",
            "content": "    }else if([self birdTopOut]) {\n        //4. \u4e0a\u5c4f\u5916,\u4ec5\u54115,6,7\u98de;\n        random = arc4random() % 3 + 5;\n    }else if([self birdBottomOut]){\n        //5. \u4e0b\u5c4f\u5916,\u4ec5\u54111,2,3\u98de;\n        random = arc4random() % 3 + 1;\n    }else {\n        //6. \u5c4f\u4e2d,\u4efb\u610f\u65b9\u5411;\n        random = arc4random() % 8;\n    }\n    //7. \u6307\u5b9a\u65b9\u5411\u53c2\u6570\u65f6;\n    if (direction) {\n        random = NUMTOOK(direction).longValue;\n        NSLog(@\"\u5f3a\u8badfly >> %@\",[NVHeUtil getLightStr_Value:random / 8.0f algsType:FLY_RDS dataSource:@\"\"]);\n    }\n    [self.birdView touchWing:random];\n}\n- (IBAction)touchWingLeftOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u7fc5\u8180onClick-\u5de6\");\n    [self.birdView touchWing:0];\n}\n- (IBAction)touchWingLeftUpOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u7fc5\u8180onClick-\u5de6\u4e0a\");\n    [self.birdView touchWing:1];\n}\n- (IBAction)touchWingUpOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u7fc5\u8180onClick-\u4e0a\");\n    [self.birdView touchWing:2];\n}\n- (IBAction)touchWingRightUpOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u7fc5\u8180onClick-\u53f3\u4e0a\");"
        },
        {
            "comment": "This code includes various IBAction methods for handling bird wing touches and foot button clicks. When a wing is touched, it triggers an animation flash and calls the birdView's touchWing method with corresponding arguments. The touchFootBtnOnClick method handles the foot button click by calling the touchFootBlock method with a random direction number between 0-7.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":393-427",
            "content": "    [self.birdView touchWing:3];\n}\n- (IBAction)touchWingRightOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u7fc5\u8180onClick-\u53f3\");\n    [self.birdView touchWing:4];\n}\n- (IBAction)touchWingRightDownOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u7fc5\u8180onClick-\u53f3\u4e0b\");\n    [self.birdView touchWing:5];\n}\n- (IBAction)touchWingDownOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u7fc5\u8180onClick-\u4e0b\");\n    [self.birdView touchWing:6];\n}\n- (IBAction)touchWingLeftDownOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u7fc5\u8180onClick-\u5de6\u4e0b\");\n    [self.birdView touchWing:7];\n}\n//MARK:===============================================================\n//MARK:                     < \u6478\u811a\u6309\u94ae >\n//MARK:===============================================================\n- (IBAction)touchFootBtnOnClick:(id)sender {\n    [self touchFootBlock:nil];\n}\n- (void)touchFootBlock:(NSNumber*)direction {\n    ISTitleLog(@\"\u73b0\u5b9e\u4e16\u754c\");\n    DemoLog(@\"\u6478\u811aonClick\");\n    //1. \u8ba1\u7b97random\n    long random = arc4random() % 8;"
        },
        {
            "comment": "This code defines five IBAction methods that handle foot click events for different directions (left, up, right) with or without the direction parameter specified. The methods log event details and call a touchFoot method on the birdView object to update its state based on the direction parameter.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":429-462",
            "content": "    //7. \u6307\u5b9a\u65b9\u5411\u53c2\u6570\u65f6;\n    if (direction) {\n        random = NUMTOOK(direction).longValue;\n        NSLog(@\"\u5f3a\u8badkick >> %@\",[NVHeUtil getLightStr_Value:random / 8.0f algsType:KICK_RDS dataSource:@\"\"]);\n    }\n    [self.birdView touchFoot:random];\n}\n- (IBAction)touchFootLeftOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u811aonClick-\u5de6\");\n    [self.birdView touchFoot:0];\n}\n- (IBAction)touchFootLeftUpOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u811aonClick-\u5de6\u4e0a\");\n    [self.birdView touchFoot:1];\n}\n- (IBAction)touchFootUpOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u811aonClick-\u4e0a\");\n    [self.birdView touchFoot:2];\n}\n- (IBAction)touchFootRightUpOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u811aonClick-\u53f3\u4e0a\");\n    [self.birdView touchFoot:3];\n}\n- (IBAction)touchFootRightOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u811aonClick-\u53f3\");\n    [self.birdView touchFoot:4];\n}\n- (IBAction)touchFootRightDownOnClick:(id)sender {\n    [self animationFlash:sender];"
        },
        {
            "comment": "These methods handle different touch actions on a bird view and throw wood blocks. The code includes logic for flashing animation, logging events, and handling various touch types such as up, down, left down, and click. It also utilizes NSTimer for precise timing and supports randomized wood throwing.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":463-501",
            "content": "    DemoLog(@\"\u6478\u811aonClick-\u53f3\u4e0b\");\n    [self.birdView touchFoot:5];\n}\n- (IBAction)touchFootDownOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u811aonClick-\u4e0b\");\n    [self.birdView touchFoot:6];\n}\n- (IBAction)touchFootLeftDownOnClick:(id)sender {\n    [self animationFlash:sender];\n    DemoLog(@\"\u6478\u811aonClick-\u5de6\u4e0b\");\n    [self.birdView touchFoot:7];\n}\n/**\n *  MARK:--------------------\u6254\u6728\u68d2--------------------\n *  @version\n *      2021.01.16: \u7528NSTimer\u66ff\u4ee3after\u5ef6\u65f6,\u56e0\u4e3aafter\u65f6\u95f4\u4e0d\u51c6,\u603b\u4f1a\u63a8\u540e150ms\u5de6\u53f3,\u800ctimer\u975e\u5e38\u51c6\u65f6;\n *      2021.02.26: NSTimer\u6539\u4e3aSEL\u65b9\u5f0f,\u56e0\u4e3ablock\u65b9\u5f0f\u5728\u6a21\u62df\u5668\u8fd0\u884c\u95ea\u9000;\n *      2022.04.27: \u5c06\u6254\u51fa\u6728\u68d2\u901f\u5ea6\u53d8\u6162 (\u53c2\u800325222);\n *      2022.06.04: \u652f\u6301\u968f\u673a\u70b9\u6254\u51fa\u6728\u68d2 (\u53c2\u800326196-\u65b9\u68482);\n */\n- (IBAction)throwWoodOnClick:(id)sender {\n    [self throwWood_Left];\n}\n-(void) throwWood_Rdm{\n    int randomX = arc4random() % (int)ScreenWidth;\n    [self throwWood:randomX invoked:^{\n        [theRT invoked:kWoodRdmSEL];\n    }];\n}\n-(void) throwWood_Left{\n    [self throwWood:0 invoked:^{\n        [theRT invoked:kWoodLeftSEL];\n    }];\n}\n/**\n *  MARK:--------------------\u6254\u6728\u68d2--------------------"
        },
        {
            "comment": "This code implements a wood-throwing feature in a game, with a history of iterations for improved functionality. It first checks if the bird is not present and skips the throw if true. Then, it resets the wood view, shows the wood view to the bird, prepares data for the throwing animation, and sets a flag indicating that the wood is being thrown.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":502-532",
            "content": " *  @version\n *      xxxx.xx.xx: v1\u7248\u672c,\u5206\u524d\u540e\u4e24\u6bb5\u6254;\n *      2023.05.19: \u8fed\u4ee3v2,\u6539\u4e3a\u7528\u7269\u7406\u4eff\u771f\u78b0\u649e\u68c0\u6d4b,\u56e0\u4e3a\u539f\u6765\u7684\u4e8c\u6bb5\u5f0f\u5224\u65ad\u592a\u7b80\u7565\u4e14\u53ef\u80fd\u5224\u9519 (\u53c2\u800329096-\u95ee\u98982);\n *      2023.05.21: \u5e9f\u5f03v2\u7269\u7406\u4eff\u771f: \"\u98de\u884c\u5361\u5faa\u73af,\u6728\u68d2\u6254\u4e0d\u5168\" (\u53c2\u800329097);\n *      2023.05.21: \u8fed\u4ee3v3,\u5c06\u52a8\u753b\u6539\u4e3acount\u4e2astep\u6765\u6267\u884c (\u540e\u6d4bcount\u8d8a\u591a,\u4e00\u987f\u4e00\u987f\u7684,\u6539\u6210v4) (\u53c2\u800329097-\u65b0\u65b9\u6848);\n *      2023.05.21: \u8fed\u4ee3v4,\u78b0\u649e\u68c0\u6d4b\u4ea4\u7531setFrame\u6765\u5b8c\u6210,step\u52a8\u753b\u4ec5\u6267\u884c\u4e00\u8f6e (\u53c2\u800329098-\u65b9\u68483-\u6b65\u9aa41 & \u6b65\u9aa44);\n *      2023.06.02: \u8c03\u6162\u6254\u7684\u901f\u5ea6_\u56e0\u4e3av4,\u4e00\u6b21\u52a8\u753b\u5168\u8dd1\u5b8c,\u6709\u70b9\u592a\u987a\u5f53,\u5bfc\u81f4\u9e1f\u7ecf\u5e38\u6765\u4e0d\u6025\u53cd\u5e94\u98de\u8eb2\u5f00,\u6240\u4ee5\u8c03\u6162,\u4ece5\u79d2\u8c03\u6574\u62108\u79d2 (\u53c2\u800329109-\u6d4b\u5f971);\n */\n-(void) throwWood:(CGFloat)x invoked:(void(^)())invoked {\n    [self throwWoodV4:x invoked:invoked];\n}\n-(void) throwWoodV4:(CGFloat)x invoked:(void(^)())invoked{\n    //0. \u9e1f\u4e0d\u5728,\u5219\u8df3\u8fc7;\n    if ([self birdOut]) {\n        invoked();\n        return;\n    }\n    //1. \u590d\u4f4d\u6728\u68d2\n    [self.woodView reset:false x:x];\n    //2. \u6254\u524d\u6728\u68d2\u89c6\u89c9\u5e27\n    DemoLog(@\"\u6728\u68d2\u6254\u524d\u89c6\u89c9\");\n    [self.birdView see:self.woodView];\n    //3. \u6254\u524d\u6570\u636e\u51c6\u5907\n    CGFloat allDistance = ScreenWidth - self.woodView.x; //\u52a8\u753b\u6254\u591a\u8fdc;\n    CGFloat allTime = allDistance / ScreenWidth * ThrowTime; //\u52a8\u753b\u603b\u65f6\u957f\n    DemoLog(@\"\u6254\u6728\u68d2 (\u65f6:%.2f \u8ddd:%.2f)\",allTime,allDistance);\n    self.waitHiting = true;"
        },
        {
            "comment": "1. Method called when the stopWoodBtn is clicked, stops the woodView's step animation and resets its frame.\n2. Method called when the miniResetBtn is clicked, clears the theTC object.\n3. Method called when the miniBackBtn is clicked, pops back to the root view controller.\n4. Implements BirdViewDelegate methods: GetFoodOnHit, GetPageView, and GetSeeRect.\n5. BirdView_SetFramed method has been deprecated in favor of starting an animation.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":534-567",
            "content": "    //4. \u6254\u51fa: step\u52a8\u753b\u4ec5\u6267\u884c\u4e00\u8f6e (\u53c2\u800329098-\u65b9\u68483-\u6b65\u9aa44);\n    [self.woodView throwV5:x time:allTime distance:allDistance invoked:invoked];\n}\n- (IBAction)stopWoodBtnOnClick:(id)sender {\n    CGRect frame = [self.woodView showFrame];\n    [self.woodView.layer removeAllAnimations];\n    [self.woodView setFrame:frame];\n}\n- (IBAction)miniResetBtnClick:(id)sender {\n    [theTC clear];\n}\n- (IBAction)miniBackBtnClick:(id)sender {\n    [self.navigationController popToRootViewControllerAnimated:YES];\n}\n/**\n *  MARK:--------------------BirdViewDelegate--------------------\n */\n-(NSArray *)birdView_GetFoodOnHit:(CGRect)birdStart birdEnd:(CGRect)birdEnd status:(FoodStatus)status{\n    return [self runCheckHit4BirdFood:birdStart birdEnd:birdEnd status:status];\n}\n-(UIView*) birdView_GetPageView{\n    return self.view;\n}\n-(CGRect)birdView_GetSeeRect{\n    return CGRectMake(0, 64, ScreenWidth, ScreenHeight - 64 - 64);//naviBar\u548cbtmBtn\n}\n//2023.06.04: \u5e9f\u5f03_\u5c06setFramed\u6362\u6210\u52a8\u753b\u5f00\u59cb,\u4e8c\u8005\u662f\u540c\u65f6\u89e6\u53d1\u7684,\u4f46setFramed\u6709\u4e24\u4e2a\u95ee\u9898,1\u662f\u65e0\u6cd5\u4f20\u8fc7\u6765\u52a8\u753b\u65f6\u95f4,2\u662f\u5b83\u4f1a\u89e6\u53d1\u4e24\u6b21;\n-(void)birdView_SetFramed {\n    //[self runCheckHit4WoodBird:@\"\u9e1f\u4f4d\u7f6e\u53d8\u5316\"];"
        },
        {
            "comment": "These methods handle animation events related to flying birds and wooden sticks. The bird's fly animation begins and finishes are tracked, as well as the wooden stick's animation. Additionally, woodView delegate functions such as setFramed and woodAnimationFinish are defined. After an animation finishes, a check for hits is performed.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":568-598",
            "content": "}\n-(void)birdView_FlyAnimationFinish {\n    //[self runCheckHit4WoodBird:0 woodDuration:0 hiterDesc:@\"\u9e1f\u98de\u7ed3\u675f\"];//\u52a8\u753b\u6267\u884c\u5b8c\u540e,\u8981\u8c03\u7528\u4e0b\u78b0\u649e\u68c0\u6d4b,\u56e0\u4e3aUIView\u52a8\u753b\u540e\u4e0d\u4f1a\u7acb\u9a6c\u66f4\u65b0frame (\u53c2\u800329098-\u8ffdBUG1);\n}\n-(void) birdView_FlyAnimationBegin:(CGFloat)aniDuration {\n    //[self runCheckHit4WoodBird:aniDuration woodDuration:0 hiterDesc:@\"\u9e1f\u98de\u5f00\u59cb\"];\n}\n/**\n *  MARK:--------------------WoodViewDelegate--------------------\n */\n//2023.06.04: \u5e9f\u5f03_\u5c06setFramed\u6362\u6210\u52a8\u753b\u5f00\u59cb,\u4e8c\u8005\u662f\u540c\u65f6\u89e6\u53d1\u7684,\u4f46setFramed\u6709\u4e24\u4e2a\u95ee\u9898,1\u662f\u65e0\u6cd5\u4f20\u8fc7\u6765\u52a8\u753b\u65f6\u95f4,2\u662f\u5b83\u4f1a\u89e6\u53d1\u4e24\u6b21;\n-(void)woodView_SetFramed {\n    [self runCheckHit4WoodBird:0 woodDuration:0 hiterDesc:@\"\u68d2\u6254\u4f4d\u7f6e\u53d8\u5316\"];\n    [self runCheckHit4WoodFood];\n}\n-(void) woodView_WoodAnimationFinish {\n    [self runCheckHit4WoodBird:0 woodDuration:0 hiterDesc:@\"\u68d2\u6254\u7ed3\u675f\"];//\u52a8\u753b\u6267\u884c\u5b8c\u540e,\u8981\u8c03\u7528\u4e0b\u78b0\u649e\u68c0\u6d4b,\u56e0\u4e3aUIView\u52a8\u753b\u540e\u4e0d\u4f1a\u7acb\u9a6c\u66f4\u65b0frame (\u53c2\u800329098-\u8ffdBUG1);\n    self.waitHiting = false;//\u6728\u68d2\u52a8\u753b\u7ed3\u675f\u65f6,\u540c\u65f6\u78b0\u649e\u68c0\u6d4b\u4e5f\u7ed3\u675f;\n}\n-(void) woodView_FlyAnimationBegin:(CGFloat)aniDuration {\n    //[self runCheckHit4WoodBird:0 woodDuration:aniDuration hiterDesc:@\"\u68d2\u6254\u5f00\u59cb\"];\n}\n//MARK:===============================================================\n//MARK:                     < privateMethod >"
        },
        {
            "comment": "This code sets a wait hitting flag and performs collision detection between wooden sticks and birds. It checks if the waiting for hitting flag is true or false, then logs a message accordingly. If not in checking state or already hit detected, it returns. It initializes a current frame model and calculates collision detection based on bird and wood stick durations.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":599-626",
            "content": "//MARK:===============================================================\n-(void)setWaitHiting:(BOOL)value {\n    //1. \u68c0\u6d4b\u78b0\u649e\u5f00\u59cb\u6216\u7ed3\u675f\u65f6: \u91cd\u7f6elastModel\u8bb0\u5f55 & isHited\u68c0\u6d4b\u7ed3\u679c;\n    NSLog(@\"\u78b0\u649e\u68c0\u6d4b: %@\",value ? @\"\u5f00\u59cb >>>>>>>\" : @\"\u7ed3\u675f <<<<<<<\");\n    self.lastHitModel = nil;\n    self.isHited = false;\n    //2. \u5f00\u5173\u66f4\u65b0;\n    _waitHiting = value;\n}\n/**\n *  MARK:--------------------\u78b0\u649e\u68c0\u6d4b\u7b97\u6cd5 (\u53c2\u800329098)--------------------\n *  @param birdDuration : \u5f53\u524d\u89e6\u53d1\u7684\u52a8\u753b\u5230\u7ed3\u675f\u6240\u9700\u52a8\u753b\u65f6\u957f (\u7528\u6765\u8ba1\u7b97\u78b0\u649e\u68c0\u6d4b,\u6bd4\u5982\u9e1f\u98de\u7684\u5f88\u5feb,\u4e0b\u6b21\u89e6\u53d1\u65f6\u5374\u8fc7\u4e86\u5f88\u4e45,\u4e0d\u80fd\u5747\u5300\u7684\u8ba4\u4e3a\u5b83\u98de\u4e86\u8fd9\u4e48\u4e45);\n *  @callers \u68c0\u67e5\u4e2d\u72b6\u6001\u65f6,\u53ea\u8981\u6728\u68d2\u6216\u5c0f\u9e1f\u7684\u4f4d\u7f6e\u6709\u53d8\u5316,\u5c31\u8c03\u7528:\n *          1. \u65e0\u8bba\u662f\u6728\u68d2\u8fd8\u662f\u5c0f\u9e1f\u7684frame\u53d8\u5316\u90fd\u8c03\u7528 (\u53c2\u800329098-\u65b9\u68483-\u6b65\u9aa41);\n *          2. \u65e0\u8bba\u662f\u6728\u68d2\u8fd8\u662f\u5c0f\u9e1f\u7684\u52a8\u753b\u7ed3\u675f\u65f6,\u90fd\u624b\u52a8\u8c03\u7528\u4e0b (\u56e0\u4e3aUIView\u52a8\u753b\u540e\u4e0d\u4f1a\u7acb\u9a6c\u66f4\u65b0frame);\n *  @version\n *      2023.06.09: \u4fee\u590d\u56e0\u5206\u6bcd\u4e3a0,\u5bfc\u81f4\u5206\u5e27rect\u53d6\u5230NaN,\u5bfc\u81f4\u4ea4\u96c6\u5168\u5224\u4e3a\u649e\u5230\u7684BUG (\u53c2\u800330015);\n *      2023.07.26: \u6539\u4e3a\u6bcf\u5e27\u6728\u68d2\u53d8\u52a8\u90fd\u8fdb\u884c\u78b0\u649e\u68c0\u6d4b & \u4e14\u6539\u4e3a\u5e27\u52a8\u753b\u540e\u4e0d\u9700\u8981\u6bcf\u6b21\u8c03\u7528\u518d\u520610\u5e27\u4e86\u6539\u4e3a2 (\u53c2\u800330087-todo2);\n */\n-(void) runCheckHit4WoodBird:(CGFloat)birdDuration woodDuration:(CGFloat)woodDuration hiterDesc:(NSString*)hiterDesc {\n    //1. \u975e\u68c0\u67e5\u4e2d \u6216 \u5df2\u68c0\u6d4b\u5230\u78b0\u649e => \u8fd4\u56de;\n    if (!self.waitHiting || self.isHited) return;\n    //2. \u5f53\u524d\u5e27model;\n    HitItemModel *curHitModel = [[HitItemModel alloc] init];"
        },
        {
            "comment": "Code is updating the lastHitModel with current hit model values and checking for bird-wood collision over 10 frames based on time intervals. It ensures correct detection by taking union of rectangles from upper and lower frames to avoid false negatives due to distance.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":627-647",
            "content": "    curHitModel.woodFrame = self.woodView.showFrame;\n    curHitModel.birdFrame = self.birdView.showFrame;\n    curHitModel.time = [[NSDate date] timeIntervalSince1970] * 1000;\n    curHitModel.birdDuration = birdDuration;\n    curHitModel.woodDuration = woodDuration;\n    //3. \u4e0a\u5e27\u4e3a\u7a7a\u65f6,\u76f4\u63a5\u7b49\u4e8e\u5f53\u524d\u5e27;\n    if (self.lastHitModel == nil) {\n        self.lastHitModel = curHitModel;\n        return;\n    }\n    //4. \u520610\u5e27,\u68c0\u67e5\u6bcf\u5e27\u68d2\u9e1f\u662f\u5426\u6709\u78b0\u649e (\u53c2\u800329098-\u65b9\u68483-\u6b65\u9aa43);\n    CGFloat totalTime = curHitModel.time - self.lastHitModel.time; //\u603b\u5171\u8fc7\u4e86\u591a\u4e45;\n    CGFloat woodTime = self.lastHitModel.woodDuration == 0 ? totalTime : self.lastHitModel.woodDuration * 1000; //\u6728\u68d2\u6254\u4e86\u591a\u4e45;\n    CGFloat birdTime = self.lastHitModel.birdDuration == 0 ? totalTime : self.lastHitModel.birdDuration * 1000; //\u5c0f\u9e1f\u98de\u4e86\u591a\u4e45;\n    CGFloat firstCheckTime = MIN(totalTime,MIN(woodTime,birdTime)); //\u5148\u628a\u68c0\u67e5\u6307\u5b9a\u65f6\u95f4\u7684(\u6bd4\u5982bird\u52a8\u753b\u5f00\u59cb\u6307\u5b9a\u4e860.15s);\n    NSInteger frameCount = 2;\n    CGFloat itemTime = firstCheckTime / frameCount; //\u5728\u4e0b\u9762\u5faa\u73af\u4e2d\u6bcf\u4efdi\u8fc7\u4e86\u591a\u4e45;\n    for (NSInteger i = 0; i < frameCount; i++) {\n        //5. \u53d6\u4e0a\u4e0b\u7b49\u4efd\u7684Rect\u53d6\u5e76\u96c6,\u907f\u514d\u4e24\u7b49\u4efd\u95f4\u8ddd\u8fc7\u5927,\u5bfc\u81f4\u9519\u6f0f\u68c0\u6d4b\u95ee\u9898 (\u53c2\u800329098-\u6d4bBUG2);"
        },
        {
            "comment": "Checks if the wood and bird rectangles intersect at any time during the loop, if so sets self.isHited to true and breaks out of loop. If not, continues check after total time.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":648-663",
            "content": "        CGFloat wrRadio1 = woodTime == 0 ? 0 : i * itemTime / woodTime, wrRadio2 = woodTime == 0 ? 0 : (i+1) * itemTime / woodTime;\n        CGFloat brRadio1 = birdTime == 0 ? 0 : i * itemTime / birdTime, brRadio2 = birdTime == 0 ? 0 : (i+1) * itemTime / birdTime;\n        CGRect wr1 = [MathUtils radioRect:self.lastHitModel.woodFrame endRect:curHitModel.woodFrame radio:wrRadio1];\n        CGRect br1 = [MathUtils radioRect:self.lastHitModel.birdFrame endRect:curHitModel.birdFrame radio:brRadio1];\n        CGRect wr2 = [MathUtils radioRect:self.lastHitModel.woodFrame endRect:curHitModel.woodFrame radio:wrRadio2];\n        CGRect br2 = [MathUtils radioRect:self.lastHitModel.birdFrame endRect:curHitModel.birdFrame radio:brRadio2];\n        CGRect wrUnion = [MathUtils collectRectA:wr1 rectB:wr2];\n        CGRect brUnion = [MathUtils collectRectA:br1 rectB:br2];\n        if (CGRectIntersectsRect(wrUnion, brUnion)) {\n            self.isHited = true;\n            break;\n        }\n    }\n    //6. \u524d\u6bb5\u6ca1\u6267\u884c\u5b8c,\u540e\u6bb5\u518d\u6267\u884c\u4e0b\u68c0\u67e5;\n    if (!self.isHited && firstCheckTime != totalTime) {"
        },
        {
            "comment": "This code performs collision detection between a wooden object and a bird. It checks if the wooden object intersects with the bird within certain frames, and if so, sets the isHited flag to true. If the isHited flag is true, it logs a message stating that the wooden object and bird have collided.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":664-682",
            "content": "        //a. wr1br1\u5c31\u662f\u524d\u6bb5\u7684\u7ed3\u5c3e\u5904;\n        CGFloat wrRadio1 = woodTime == 0 ? 0 : firstCheckTime / woodTime, brRadio1 = birdTime == 0 ? 0 : firstCheckTime / birdTime;\n        CGRect wr1 = [MathUtils radioRect:self.lastHitModel.woodFrame endRect:curHitModel.woodFrame radio:wrRadio1];\n        CGRect br1 = [MathUtils radioRect:self.lastHitModel.birdFrame endRect:curHitModel.birdFrame radio:brRadio1];\n        //b. wr2br2\u76f4\u63a5\u5c31\u662f\u6700\u7ed3\u5c3e,\u5373curHitModel\u7684\u4f4d\u7f6e;\n        CGRect wr2 = curHitModel.woodFrame;\n        CGRect br2 = curHitModel.birdFrame;\n        //c. \u540e\u6bb5\u78b0\u649e\u68c0\u6d4b;\n        CGRect wrUnion = [MathUtils collectRectA:wr1 rectB:wr2];\n        CGRect brUnion = [MathUtils collectRectA:br1 rectB:br2];\n        if (CGRectIntersectsRect(wrUnion, brUnion)) {\n            self.isHited = true;\n        }\n    }\n    //5. \u4fdd\u7559lastHitModel & \u649e\u5230\u65f6\u89e6\u53d1\u75db\u611f (\u53c2\u800329098-\u65b9\u68483-\u6b65\u9aa42);\n    if (self.isHited) {\n        NSLog(@\"\u78b0\u649e\u68c0\u6d4b: %@ \u68d2(%.0f -> %.0f) \u9e1f(%.0f,%.0f -> %.0f,%.0f) from:%@\",self.isHited ? @\"\u649e\u5230\u4e86\" : @\"\u6ca1\u649e\u5230\",\n              self.lastHitModel.woodFrame.origin.x,curHitModel.woodFrame.origin.x,"
        },
        {
            "comment": "This code segment handles bird and wooden stick collisions, as well as food and wooden stick collisions. It updates the last known positions of the bird and wooden stick, checks for frame collisions, and triggers a hurt event if applicable. The code also prepares data for collision detection and uses a radio rect method to avoid potential collision issues due to overlapping rectangles.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":683-710",
            "content": "              self.lastHitModel.birdFrame.origin.x,self.lastHitModel.birdFrame.origin.y,\n              curHitModel.birdFrame.origin.x,curHitModel.birdFrame.origin.y,hiterDesc);\n    }\n    self.lastHitModel = curHitModel;\n    if (self.isHited) {\n        [self.birdView hurt];\n    }\n}\n//\u6728\u68d2\u4e0e\u98df\u7269\u78b0\u649e\u68c0\u6d4b\n-(void) runCheckHit4WoodFood {\n    //1. \u6570\u636e\u51c6\u5907;\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    NSArray *foods = [SMGUtils filterArr:[self.view subViews_AllDeepWithClass:FoodView.class] checkValid:^BOOL(FoodView *item) {\n        return item.status == FoodStatus_Border;\n    }];\n    //3. \u4e0a\u5e27\u4e3a\u7a7a\u65f6,\u76f4\u63a5\u7b49\u4e8e\u5f53\u524d\u5e27;\n    if (CGRectIsNull(self.lastWoodFrame)) {\n        self.lastWoodFrame = self.woodView.showFrame;\n    }\n    //4. \u520610\u5e27,\u68c0\u67e5\u6bcf\u5e27\u68d2\u9e1f\u662f\u5426\u6709\u78b0\u649e (\u53c2\u800329098-\u65b9\u68483-\u6b65\u9aa43);\n    NSInteger frameCount = 3;\n    for (NSInteger i = 0; i < frameCount; i++) {\n        //5. \u53d6\u4e0a\u4e0b\u7b49\u4efd\u7684Rect\u53d6\u5e76\u96c6,\u907f\u514d\u4e24\u7b49\u4efd\u95f4\u8ddd\u8fc7\u5927,\u5bfc\u81f4\u9519\u6f0f\u68c0\u6d4b\u95ee\u9898 (\u53c2\u800329098-\u6d4bBUG2);\n        CGFloat radio1 = i / (float)frameCount, radio2 = (i+1) / (float)frameCount;\n        CGRect wr1 = [MathUtils radioRect:self.lastWoodFrame endRect:self.woodView.showFrame radio:radio1];"
        },
        {
            "comment": "This code detects collisions between a bird and fruits, updating the bird's state if it collides with any fruit. It iterates through each fruit on the screen and checks if the bird's current frame intersects with the fruit's frame. If there is an intersection, the corresponding fruit's status is set to \"eat\". The code also logs the number of fruits collided with and updates the last wood frame, triggering a visual update for the bird view.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":711-743",
            "content": "        CGRect wr2 = [MathUtils radioRect:self.lastWoodFrame endRect:self.woodView.showFrame radio:radio2];\n        CGRect wrUnion = [MathUtils collectRectA:wr1 rectB:wr2];\n        //6. \u5206\u522b\u4e0e\u6bcf\u4e2afood\u8fdb\u884c\u78b0\u649e\u68c0\u6d4b;\n        for (FoodView *food in foods) {\n            if (CGRectIntersectsRect(wrUnion, food.showFrame)) {\n                if (![result containsObject:food]) [result addObject:food];\n                continue;\n            }\n        }\n    }\n    //7. \u538b\u5230\u7834\u76ae;\n    for (FoodView *item in result) {\n        item.status = FoodStatus_Eat;\n    }\n    if (ARRISOK(result)) NSLog(@\"\u78b0\u649e\u68c0\u6d4b,\u68d2\u538b\u575a\u679c\u6570:%ld \u68d2(%.0f -> %.0f)\",result.count,self.lastWoodFrame.origin.x,self.woodView.showX);\n    //8. \u4fdd\u7559lastWoodFrame\n    self.lastWoodFrame = self.woodView.showFrame;\n    //9. \u89e6\u53d1\u89c6\u89c9\n    if (ARRISOK(result)) {\n        [self.birdView see:self.view];\n    }\n}\n/**\n *  MARK:--------------------\u575a\u679c\u78b0\u649e\u68c0\u6d4b\u7b97\u6cd5 (\u53c2\u800330041-\u8bb0\u5f553-\u65b9\u6848)--------------------\n *  @desc 1. \u98df\u7269\u4e0d\u4f1a\u52a8,\u53ea\u9700\u8981\u5224\u65ad\u9e1f\u98de\u8fc7\u7684\u8f68\u8ff9\u5206\u5e27,\u6709\u6ca1\u6709\u8def\u8fc7\u575a\u679c\u5373\u53ef (\u6bcfdp\u4e00\u5e27);\n *        2. \u5750\u6807\u8bf4\u660e: \u4e0d\u7528\u4e16\u754c\u5750\u6807,\u56e0\u4e3abird,wood,food\u5168\u5728self.view\u4e0b;\n *  @version\n *      2023.06.23: \u521d\u7248,\u89e3\u51b3\u98de\u7684\u592a\u5feb,\u5bfc\u81f4\u98de\u8fc7\u5374\u6ca1\u5403\u5230\u7684BUG (\u53c2\u800330041-\u8bb0\u5f553);"
        },
        {
            "comment": "This method checks for collisions between a bird's path and food objects in the view, returning an array of matching food items. It calculates intermediate frames along the bird's path and compares them to each food object frame. The results are saved in an array and logged.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":744-763",
            "content": " */\n-(NSArray*) runCheckHit4BirdFood:(CGRect)birdStart birdEnd:(CGRect)birdEnd status:(FoodStatus)status{\n    //1. \u6570\u636e\u51c6\u5907;\n    NSMutableArray *result = [[NSMutableArray alloc] init];\n    NSArray *foods = ARRTOOK([self.view subViews_AllDeepWithClass:FoodView.class]);\n    //2. dp\u8ddd\u79bb\u6bcf\u70b9\u4e00\u5e27,\u68c0\u67e5\u6bcf\u5e27\u575a\u679c\u9e1f\u662f\u5426\u6709\u78b0\u649e (\u53c2\u800330041-\u8bb0\u5f553-\u65b9\u6848);\n    float distance = [UIView distance4DP:birdStart.origin pointB:birdEnd.origin];\n    for (NSInteger i = 0; i <= distance; i++) {\n        CGFloat brRadio = distance == 0 ? 0 : i / distance;\n        CGRect birdIFrame = [MathUtils radioRect:birdStart endRect:birdEnd radio:brRadio];\n        for (FoodView *food in foods) {\n            if (food.status == status && ![result containsObject:food] && CGRectIntersectsRect(birdIFrame, food.frame)) {\n                [result addObject:food];\n            }\n        }\n    }\n    //3. \u4fdd\u7559lastHitModel & \u649e\u5230\u65f6\u89e6\u53d1\u75db\u611f (\u53c2\u800329098-\u65b9\u68483-\u6b65\u9aa42);\n    NSLog(@\"\u78b0\u649e\u68c0\u6d4b\u5230\u575a\u679c\u6570: %ld \u9e1f(%.0f,%.0f -> %.0f,%.0f)\",result.count,birdStart.origin.x,birdStart.origin.y,birdEnd.origin.x,birdEnd.origin.y);"
        },
        {
            "comment": "This code defines a function `food2Pos` which takes in parameters like targetPoint, caller4RL, and status. It creates a FoodView object with the specified status, sets its origin to a fixed position on screen, adds it as a subview, animates its position to the targetPoint, and performs visual input, food collision detection, action triggering, and result reporting upon animation completion. Additionally, there is a separate function `animationFlash` which animates the view's alpha property to make it semi-transparent for 0.2 seconds.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":764-794",
            "content": "    return result;\n}\n- (void) food2Pos:(CGPoint)targetPoint caller4RL:(NSString*)caller4RL status:(FoodStatus)status{\n    FoodView *foodView = [[FoodView alloc] init];\n    foodView.status = status;\n    [foodView setOrigin:CGPointMake(ScreenWidth * 0.375f, ScreenHeight - 66)];\n    [self.view addSubview:foodView];\n    [UIView animateWithDuration:0.3f animations:^{\n        [foodView setOrigin:targetPoint];\n    }completion:^(BOOL finished) {\n        //1. \u89c6\u89c9\u8f93\u5165\n        [self.birdView see:self.view];\n        //2. \u6295\u98df\u78b0\u649e\u68c0\u6d4b (\u53c2\u800328172-todo2.2);\n        self.birdView.hitFoods = [self birdView_GetFoodOnHit:self.birdView.frame birdEnd:self.birdView.frame status:FoodStatus_Eat];\n        if (ARRISOK(self.birdView.hitFoods)) {\n            //3. \u5982\u679c\u6254\u5230\u9e1f\u8eab\u4e0a,\u5219\u89e6\u53d1\u5403\u6389 (\u53c2\u800328172-todo2.1);\n            [self.birdView touchMouth];\n        }\n        //4. \u62a5\u5f3a\u8bad\u7ed3\u675f\u6807\u8bb0 (\u6295\u679c\u7ed3\u675f);\n        [theRT invoked:caller4RL];\n    }];\n}\n-(void) animationFlash:(UIView*)view{\n    if (view) {\n        [UIView animateWithDuration:0.2 animations:^{\n            view.alpha = 0.3f;"
        },
        {
            "comment": "This code snippet contains methods for checking if a bird is out of the screen boundaries and determining its birth position based on different modes. It includes methods to check if the bird is outside the left, right, top, or bottom edges of the screen. The bird's initial position can be set by the user, or it can be determined randomly within certain limits, depending on the chosen mode.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":795-830",
            "content": "        }completion:^(BOOL finished) {\n            view.alpha = 1.0f;\n        }];\n    }\n}\n-(BOOL) birdOut{\n    return [self birdLeftOut] || [self birdRightOut] || [self birdTopOut] || [self birdBottomOut];\n}\n-(BOOL) birdLeftOut{\n    return self.birdView.showX < 0;\n}\n-(BOOL) birdRightOut{\n    return self.birdView.showMaxX > ScreenWidth;\n}\n-(BOOL) birdTopOut{\n    return self.birdView.y < 64;\n}\n-(BOOL) birdBottomOut{\n    return self.birdView.showMaxY > ScreenHeight;\n}\n//MARK:===============================================================\n//MARK:                     < \u5c0f\u9e1f\u51fa\u751f\u5730\u70b9 >\n//MARK:===============================================================\n//\u83b7\u53d6\u5750\u6807;\n-(CGPoint) getBirdBirthPos{\n    if (self.birdBirthPos.x > 0 || self.birdBirthPos.y > 0) {\n        return self.birdBirthPos;\n    }else if (theApp.birthPosMode == 1) {\n        return [self getBirdBirthPos_RandomCenter];\n    }else if(theApp.birthPosMode == 2){\n        return [self getBirdBirthPos_Center];\n    }else if(theApp.birthPosMode == 3){\n        return [self getBirdBirthPos_RandomSafe];"
        },
        {
            "comment": "This code contains two methods for generating a random point within specific ranges. The first method, `getBirdBirthPos_Random`, generates a random point within the range of -80 to 80 for both X and Y coordinates, ensuring that the generated point remains within a fixed range without being too extreme.\nThe second method, `getBirdBirthPos_RandomCenter`, generates a random point with higher probability closer to the center of the screen by first taking the square root of a random value within -10 to 10 range and then squaring it to get a value within -100 to 100 range. Finally, the method converts this point to an absolute coordinate system to return it.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":831-869",
            "content": "    }else{\n        return [self getBirdBirthPos_Random];\n    }\n}\n/**\n *  MARK:--------------------\u968f\u673a--------------------\n *  @desc \u53d6\u503c\u8303\u56f4\u4e3a\u79bb\u4e2d\u5fc3-80\u523080 (X\u548cY\u90fd\u662f\u8fd9\u8303\u56f4);\n *  @desc \u4f18\u7f3a\u70b9:\n *          1. \u4f18\u70b9\u662f: \u9650\u5b9a\u7684\u8303\u56f4\u56fa\u5b9a,\u4e0d\u4f1a\u79bb\u8c31;\n *          2. \u7f3a\u70b9\u662f: \u9650\u5b9a\u8303\u56f4\u5185\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6982\u7387\u90fd\u4e00\u6837;\n */\n-(CGPoint) getBirdBirthPos_Random{\n    //1. \u53d6\u968f\u673a\u503c (\u8303\u56f4-80\u523080);\n    NSInteger areaW = ScreenWidth;\n    NSInteger areaH = ScreenHeight - 100;\n    float randomX = (arc4random() % areaW) - areaW * 0.5f;\n    float randomY = (arc4random() % areaH) - areaH * 0.5f;\n    //2. \u8f6c\u6210\u5de6\u4e0a\u89d2\u951a\u70b9;\n    float x = randomX + ScreenWidth * 0.5f;\n    float y = randomY + ScreenHeight * 0.5f;\n    return CGPointMake(x, y);\n}\n/**\n *  MARK:--------------------\u968f\u673a\u504f\u4e2d--------------------\n *  @desc \u5148\u6839\u53f7,\u518d\u5e73\u65b9,\u4f7f\u4f7f\u5176\u79bb\u5c4f\u5e55\u4e2d\u5fc3\u66f4\u8fd1\u7684\u6982\u7387\u66f4\u5927,\u6b65\u9aa4\u4e3e\u4f8b\u5982\u4e0b:\n *          1. \u9650\u5236\u51fa\u751f\u8303\u56f4 (\u6bd4\u5982\u5bbd200\u8303\u56f4\u5185);\n *          2. \u6211\u4eec\u8981\u5148\u53d6\u6839\u53f7\u968f\u673a\u503c (\u53d6\u503c\u8303\u56f4\u4e3a-10\u523010);\n *          3. \u7136\u540e\u518d\u4e8c\u6b21\u65b9 (\u53d6\u503c\u8303\u56f4\u4e3a-100\u5230100);\n *          4. \u518d\u8f6c\u6362\u6210\u7edd\u5bf9\u5750\u6807\u8fd4\u56de (ios\u951a\u70b9\u5750\u6807\u7cfb);\n *  @desc \u4f18\u70b9:\n *          1. \u9650\u5b9a\u7684\u8303\u56f4\u56fa\u5b9a,\u4e0d\u4f1a\u79bb\u8c31;\n *          2. \u9650\u5b9a\u8303\u56f4\u5185\u79bb\u5c4f\u4e2d\u5fc3\u6982\u7387\u66f4\u5927;\n *  @version\n *      2023.03.14: \u7f29\u5c0f\u9632\u649e\u7b2c2\u6b65\u8bad\u7ec3\u51fa\u751f\u8303\u56f4 (\u53c2\u800328174-\u8bd5\u89e3);\n */\n-(CGPoint) getBirdBirthPos_RandomCenter{"
        },
        {
            "comment": "1. Generates a random position within the given area bounds.\n2. Calculates the relative coordinates based on the random values.\n3. Converts the relative coordinates to absolute coordinates using screen width and height.\n4. Returns the bird's birth position in the center of the screen.\n5. Supports random safe zone for hatching birds, useful for training and avoiding distractions.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":870-903",
            "content": "    //1. \u53d6\u6839\u503c10;\n    CGFloat areaW = 280;\n    CGFloat areaH = 140;\n    float modW = sqrtf(areaW * 0.5f);\n    float modH = sqrtf(areaH * 0.5f);\n    //2. \u53d6\u968f\u673a\u503c (\u8303\u56f4-10\u523010);\n    float randomW = (arc4random() % (int)(modW * 2 + 0.5f)) - modW;\n    float randomH = (arc4random() % (int)(modH * 2 + 0.5f)) - modH;\n    //3. \u6c42\u4e8c\u6b21\u65b9,\u5f97\u51fa\u76f8\u5bf9XY\u5750\u6807 (\u8303\u56f4-100\u5230100);\n    float relativeX = randomW * randomW * (randomW < 0 ? -1 : 1);\n    float relativeY = randomH * randomH * (randomH < 0 ? -1 : 1);\n    //4. \u8f6c\u6210\u7edd\u5bf9XY\u5750\u6807 (\u5de6\u4e0a\u89d2\u951a\u70b9\u5750\u6807\u7cfb);\n    float x = relativeX + ScreenWidth * 0.5f;\n    float y = relativeY + ScreenHeight * 0.5f;\n    return CGPointMake(x, y);\n}\n/**\n *  MARK:--------------------\u4e2d\u5fc3--------------------\n */\n-(CGPoint) getBirdBirthPos_Center{\n    return CGPointMake(ScreenWidth * 0.5f, ScreenHeight * 0.5f);\n}\n/**\n *  MARK:--------------------\u5b89\u5168\u5730\u5e26\u968f\u673a--------------------\n *  @desc \u652f\u6301\u5728\u5b89\u5168\u5730\u5e26\u51fa\u751f,\u4ee5\u65b9\u4fbf\u8bad\u7ec3\u53bb\u76ae\u7b49,\u907f\u514d\u52a8\u4e0d\u52a8\u75bc\u5e72\u6270\u8bad\u7ec3 (\u53c2\u800330145-\u6ce81);\n */\n-(CGPoint) getBirdBirthPos_RandomSafe{\n    //1. \u968f\u673ax\u503c (X\u53d6\u503c\u8303\u56f4: 20 \u5230 ScreenWidth - 50);\n    float minX = 20,maxX = ScreenWidth - 50;"
        },
        {
            "comment": "This code generates random x and y coordinates within a specified range, taking into account whether the resulting point should be above or below the road. It calculates minimum and maximum values for the y-axis based on the random value generated, and then calculates the final result Y by adding a random value within the calculated range. Finally, it returns the center coordinate of the point by adding 15 to both x and y coordinates.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/Demo/BirdGrowPage/BirdGrowPage.m\":904-927",
            "content": "    int xDelta = maxX - minX;\n    float resultX = (arc4random() % xDelta) + minX;\n    //2. \u968f\u673ay\u503c => \u7b97\u51fa\u6700\u5927\u6700\u5c0f\u503c;\n    float minY = 0,maxY = 0;\n    if (random() % 2 == 0) {\n        //a. \u5728\u8def\u4e0a\u65b9 (\u4e0a\u65b9\u65f6Y\u53d6\u503c\u8303\u56f4: 64 \u5230 (ScreenHeight - 100) * 0.5f - 30 - 1; //\u591a\u51cf1\u907f\u514d\u649e\u4e0a);\n        minY = 64;\n        maxY = (ScreenHeight - 100) * 0.5f - 30 - 1;\n    } else {\n        //b. \u5728\u8def\u4e0b\u65b9 (\u4e0b\u65b9\u65f6Y\u53d6\u503c\u8303\u56f4: (ScreenHeight + 100) * 0.5f + 1 \u5230 ScreenHeight - 64 - 30; //\u591a\u52a01\u907f\u514d\u649e\u4e0a);\n        minY = (ScreenHeight + 100) * 0.5f + 1;\n        maxY = ScreenHeight - 64 - 30;\n    }\n    //3. \u968f\u673ay\u503c => \u7b97\u51faresultY;\n    int yDelta = maxY - minY;\n    float resultY = (arc4random() % yDelta) + minY;\n    //4. \u8981\u6c42\u8fd4\u56de\u4e2d\u5fc3\u70b9\u5750\u6807,\u6240\u4ee5xy\u5404\u52a015;\n    return CGPointMake(resultX + 15, resultY + 15);\n}\n@end"
        }
    ]
}