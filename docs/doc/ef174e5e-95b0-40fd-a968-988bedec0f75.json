{
    "summary": "The code initializes a LongTipWindow, positions it, and handles clicks. It manages node data in a network visualization app for filtering and recalling nodes using specific criteria functions. The code checks the `self.type` value to perform different actions.",
    "details": [
        {
            "comment": "Code snippet for LongTipWindow.m file, initializes the view and sets up constraints for containerView within LongTipWindow class.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/LongTipWindow.m\":0-42",
            "content": "//\n//  LongTipWindow.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2021/8/12.\n//  Copyright \u00a9 2021\u5e74 XiaoGang. All rights reserved.\n//\n#import \"LongTipWindow.h\"\n#import \"MASConstraint.h\"\n#import \"View+MASAdditions.h\"\n#import \"AIKVPointer.h\"\n#import \"AINetUtils.h\"\n@interface LongTipWindow ()\n@property (strong,nonatomic) IBOutlet UIView *containerView;\n@property (weak, nonatomic) IBOutlet UILabel *titleLab;\n@property (strong, nonatomic) AIKVPointer *data;\n@property (assign, nonatomic) DirectionType type;\n@end\n@implementation LongTipWindow\n-(id) init {\n    self = [super init];\n    if(self != nil){\n        [self initView];\n    }\n    return self;\n}\n-(void) initView{\n    //self\n    [self setFrame:CGRectMake(0, 0,ScreenWidth, ScreenHeight)];\n    //containerView\n    [[NSBundle mainBundle] loadNibNamed:NSStringFromClass(self.class) owner:self options:nil];\n    [self addSubview:self.containerView];\n    [self.containerView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.leading.mas_equalTo(self);\n        make.trailing.mas_equalTo(self);"
        },
        {
            "comment": "This code defines a class with methods to open, close, and set data for a window. It also has a method to handle clicks on the window. The window is positioned at the top or bottom of its parent view depending on the direction type.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/LongTipWindow.m\":43-75",
            "content": "        make.top.mas_equalTo(self);\n        make.bottom.mas_equalTo(self);\n    }];\n}\n//MARK:===============================================================\n//MARK:                     < publieMethod >\n//MARK:===============================================================\n-(void) close{\n    [self removeFromSuperview];\n}\n-(void) setData:(NSString*)moduleTitle data:(AIKVPointer*)data direction:(DirectionType)type{\n    //1. \u4fdd\u7559\u6570\u636e\n    self.data = data;\n    self.type = type;\n    //2. \u91cd\u7f6e\u663e\u793a\n    NSString *directionStr = @\"\";\n    if (type == DirectionType_Top) {\n        directionStr = @\"\u4e0a\";\n    }else if (type == DirectionType_Bottom) {\n        directionStr = @\"\u4e0b\";\n    }else if (type == DirectionType_Left) {\n        directionStr = @\"\u5de6\";\n    }else if (type == DirectionType_Right) {\n        directionStr = @\"\u53f3\";\n    }\n    [self.titleLab setText:STRFORMAT(@\"%@%ld (%@)\",moduleTitle,data.pointerId,directionStr)];\n}\n//MARK:===============================================================\n//MARK:                     < onclick >\n//MARK:==============================================================="
        },
        {
            "comment": "This code defines multiple IBAction methods for button clicks, each triggering a specific filtering operation on an array of ports using the `filterPorts_Normal`, `filterPorts`, or `searchNode` functions from the `SMGUtils` class. The purpose is to filter and perform actions based on the type of ports (e.g., normal, ATHav, ATNone, ATGreater, ATLess, ATSub, ATPlus). In the last part, if it's a fo-type data in the top direction, it retrieves the first node using `searchNode` and initializes an empty array of dsPorts.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/LongTipWindow.m\":76-101",
            "content": "- (IBAction)normalClick:(UIButton*)sender {\n    [self generalClick:sender filter:^NSArray *(NSArray *ports) {\n        return [SMGUtils filterPorts_Normal:ports];\n    }];\n}\n- (IBAction)hnClick:(UIButton*)sender {\n    [self generalClick:sender filter:^NSArray *(NSArray *ports) {\n        return [SMGUtils filterPorts:ports havTypes:@[@(ATHav),@(ATNone)] noTypes:nil];\n    }];\n}\n- (IBAction)glClick:(UIButton*)sender {\n    [self generalClick:sender filter:^NSArray *(NSArray *ports) {\n        return [SMGUtils filterPorts:ports havTypes:@[@(ATGreater),@(ATLess)] noTypes:nil];\n    }];\n}\n- (IBAction)spClick:(UIButton*)sender {\n    [self generalClick:sender filter:^NSArray *(NSArray *ports) {\n        return [SMGUtils filterPorts:ports havTypes:@[@(ATSub),@(ATPlus)] noTypes:nil];\n    }];\n}\n- (IBAction)dsdfClick:(UIButton*)sender {\n    NSLog(@\"%@\",sender.titleLabel.text);\n    //\u76ee\u524d\u4ec5top\u65b9\u5411\u7684fo\u652f\u6301dsPorts;\n    if (PitIsFo(self.data) && self.type == DirectionType_Top) {\n        AIFoNodeBase *node = [SMGUtils searchNode:self.data];\n        NSArray *dsPorts = @[];"
        },
        {
            "comment": "This code contains functions for handling button clicks and managing node data in a network visualization app. It allows the user to recall, add, or close nodes based on specific filter criteria. The \"generalClick\" function prepares data, calls a filter function to retrieve new node data, displays it in the network visualization, and then closes. The \"generalGetDatas\" function prepares data, filters for new nodes based on direction type, and returns the result.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/LongTipWindow.m\":102-141",
            "content": "        [theNV setNodeDatas:Ports2Pits(dsPorts)];\n    }\n    [self close];\n}\n- (IBAction)recallClick:(UIButton*)sender {\n    NSLog(@\"%@\",sender.titleLabel.text);\n    NSArray *removeDatas = [self generalGetDatas:^NSArray *(NSArray *ports) {\n        return ports;\n    }];\n    [theNV removeNodeDatas:removeDatas];\n    [self close];\n}\n- (IBAction)closeClick:(id)sender {\n    [self close];\n}\n-(void)generalClick:(UIButton*)sender filter:(NSArray*(^)(NSArray *ports))filter{\n    //1. \u6570\u636e\u51c6\u5907;\n    NSLog(@\"%@\",sender.titleLabel.text);\n    //2. \u53d6\u65b0\u589e\u8282\u70b9;\n    NSArray *addDatas = [self generalGetDatas:filter];\n    //3. \u663e\u793a\u5230\u7f51\u7edc\u53ef\u89c6\u5316;\n    [theNV setNodeDatas:addDatas];\n    //4. \u5173\u95ed\n    [self close];\n}\n-(NSArray*)generalGetDatas:(NSArray*(^)(NSArray *ports))filter{\n    //1. \u6570\u636e\u51c6\u5907;\n    AINodeBase *node = [SMGUtils searchNode:self.data];\n    NSArray *result = nil;\n    //2. \u53d6\u65b0\u589e\u8282\u70b9;\n    if (self.type == DirectionType_Top) {\n        result = Ports2Pits(filter([AINetUtils absPorts_All:node]));\n    }else if (self.type == DirectionType_Bottom) {\n        result = Ports2Pits(filter([AINetUtils conPorts_All:node]));"
        },
        {
            "comment": "This code checks the value of `self.type` and performs different actions based on its value. If `self.type` is equal to `DirectionType_Left`, it sets `result` as `node.content_ps`. If `self.type` is equal to `DirectionType_Right`, it applies a filter on `self.data` using `AINetUtils refPorts_All` and then calls the `Ports2Pits` function. Finally, it returns the value of `result`.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/ThirdParty/SMGNetVision/HE/LongTipWindow.m\":142-150",
            "content": "    }else if (self.type == DirectionType_Left) {\n        result = node.content_ps;\n    }else if (self.type == DirectionType_Right) {\n        result = Ports2Pits(filter([AINetUtils refPorts_All:self.data]));\n    }\n    return result;\n}\n@end"
        }
    ]
}