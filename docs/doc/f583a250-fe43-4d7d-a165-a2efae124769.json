{
    "summary": "The AIShortMatchModel class in the SMG_NothingIsAll project offers methods for accessing model properties, finding urgent matches, and provides two functions: \"partMatchs\" filters partial matches based on matching degree and returns top 10 results, while \"fullMatchs\" retrieves the first 10 full match elements.",
    "details": [
        {
            "comment": "This code appears to belong to a class called AIShortMatchModel, which is part of the SMG_NothingIsAll project. The class contains methods for accessing various model properties and finding the most urgent match FoModel. It also has methods for retrieving an array of matchPFos and matchRFos, as well as getting the matchFo value and status of a particular FoModel.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/Model/AIShortMatchModel.m\":0-46",
            "content": "//\n//  ActiveCache.m\n//  SMG_NothingIsAll\n//\n//  Created by jia on 2019/10/15.\n//  Copyright \u00a9 2019\u5e74 XiaoGang. All rights reserved.\n//\n#import \"AIShortMatchModel.h\"\n@implementation AIShortMatchModel\n-(AIMatchAlgModel *)firstMatchAlg{\n    return ARR_INDEX(self.matchAlgs, 0);\n}\n-(NSMutableArray *)matchPFos{\n    if (!_matchPFos) _matchPFos = [[NSMutableArray alloc] init];\n    return _matchPFos;\n}\n-(NSMutableArray *)matchRFos{\n    if (!_matchRFos) _matchRFos = [[NSMutableArray alloc] init];\n    return _matchRFos;\n}\n//-(AIFoNodeBase *)matchFo{\n//    AIMatchFoModel *mFo = [self mustUrgentMFo];\n//    return mFo ? mFo.matchFo : nil;\n//}\n//-(CGFloat)matchFoValue{\n//    AIMatchFoModel *mFo = [self mustUrgentMFo];\n//    return mFo ? mFo.matchFoValue : 0;\n//}\n//-(TIModelStatus)status{\n//    AIMatchFoModel *mFo = [self mustUrgentMFo];\n//    return mFo ? mFo.status : TIModelStatus_Default;\n//}\n/**\n *  MARK:--------------------\u53d6\u6700\u8feb\u5207\u7684matchFoModel--------------------\n *  @desc \u5373\u662f\u8bc4\u5206<0,\u4e14\u6700\u5c0f\u7684\u90a3\u4e2a;\n */\n//-(AIMatchFoModel*) mustUrgentMFo{\n//    //1. \u627e\u51fa\u6700\u8feb\u5207\u7684;"
        },
        {
            "comment": "This code snippet finds the most urgent match by comparing the urgency values of multiple match models and returns the result. It also provides functions for obtaining different types of match models for learning and forecasting purposes.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/Model/AIShortMatchModel.m\":47-78",
            "content": "//    AIMatchFoModel *result;\n//    for (AIMatchFoModel *item in self.matchPFos) {\n//\n//        //2. \u9996\u4e2a\u53ea\u8981\u662f\u6709\u8feb\u5207\u5ea6\u5373\u53ef;\n//        CGFloat newScore = [AIScore score4MV:item.matchFo.cmvNode_p ratio:item.matchFoValue];\n//        if (!result && newScore < 0) result = item;\n//\n//        //3. \u5c06\u66f4\u8feb\u5207\u7684\u66ff\u6362\u5230result;\n//        CGFloat oldScore = [AIScore score4MV:result.matchFo.cmvNode_p ratio:result.matchFoValue];\n//        if (newScore < oldScore) {\n//            result = item;\n//        }\n//    }\n//    return result;\n//}\n//MARK:===============================================================\n//MARK:           < \u4e0d\u540c\u7528\u9014\u65f6\u53d6\u4e0d\u540cprFos (\u53c2\u800325134-\u65b9\u68482) >\n//MARK:===============================================================\n//\u7528\u4e8e\u5b66\u4e60 (\u53c2\u8003:25134-\u65b9\u68482-A\u5b66\u4e60);\n//-(NSArray*) fos4RLearning{\n//    return [SMGUtils collectArrA:[AIShortMatchModel fullMatchs:self.matchPFos] arrB:[AIShortMatchModel fullMatchs:self.matchRFos]];\n//}\n-(NSArray*) fos4PLearning{\n    return ARR_SUB(self.matchPFos, 0, 10);\n}\n//\u7528\u4e8e\u9884\u6d4b (\u53c2\u8003:25134-\u65b9\u68482-B\u9884\u6d4b);\n//-(NSArray*) fos4RForecast{\n//  "
        },
        {
            "comment": "This code collects part match results of pFos and rFos, forecasts full matches for pFos, sorts pFos by MV score in descending order, groups pFos based on AT type, and returns a dictionary with the grouped items.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/Model/AIShortMatchModel.m\":78-107",
            "content": "  return [SMGUtils collectArrA:[AIShortMatchModel partMatchs:self.matchPFos] arrB:[AIShortMatchModel partMatchs:self.matchRFos]];\n//}\n-(NSArray*) fos4PForecast{\n    return [AIShortMatchModel fullMatchs:self.matchPFos];\n}\n/**\n *  MARK:--------------------\u7528\u4e8e\u9700\u6c42--------------------\n *  @version\n *      2022.05.17: pFos\u9632\u91cd (\u53c2\u8003:25134-\u65b9\u68482-C\u9700\u6c42);\n *      2022.05.18: \u4fee\u6539\u4e3adic\u5206\u7ec4 (\u53c2\u800326042-TODO1);\n *      2022.05.21: \u6392\u5e8f\u65b9\u5f0f\u4ee5\u4ef7\u503c\u7efc\u8bc4\u5206\u4e3a\u51c6 (\u53c2\u800326073-TODO11);\n *  @result notnull\n */\n-(NSDictionary*) fos4Demand{\n    //1. \u8fd4\u56de\u5206\u7ec4\u5b57\u5178;\n    NSMutableDictionary *result = [[NSMutableDictionary alloc] init];\n    //2. \u6392\u5e8f\u65b9\u5f0f (\u4ece\u5c0f\u5230\u5927);\n    NSArray *sortPFos = [SMGUtils sortBig2Small:self.matchPFos compareBlock:^double(AIMatchFoModel *obj) {\n        return -[AIScore score4MV_v2FromCache:obj];//\u8d1f(\u4ef7\u503c\u8bc4\u5206 * \u5339\u914d\u5ea6) \u5982: [-8,-3,2,9]\n    }];\n    //2. \u6839\u636emv\u7684AT\u6807\u8bc6\u5206\u7ec4;\n    for (AIMatchFoModel *pFo in sortPFos) {\n        AIFoNodeBase *fo = [SMGUtils searchNode:pFo.matchFo];\n        //3. \u53d6\u5206\u7ec4;\n        NSMutableArray *itemArr = [result objectForKey:fo.cmvNode_p.algsType];\n        if (!itemArr) itemArr = [[NSMutableArray alloc] init];"
        },
        {
            "comment": "This code filters out full match fos from a given set of match fos, sorts them by the length of time sequences they contain, and returns the filtered and sorted list.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/Model/AIShortMatchModel.m\":109-136",
            "content": "        //4. \u6536\u96c6\u5230\u5206\u7ec4;\n        [itemArr addObject:pFo];\n        [result setObject:itemArr forKey:fo.cmvNode_p.algsType];\n    }\n    return result;\n}\n//MARK:===============================================================\n//MARK:                     < \u7b5b\u9009\u5168\u542b\u4e0e\u975e\u5168\u542b\u7684fos >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u7b5b\u9009\u51fa\u5168\u542b\u7684--------------------\n *  @desc \u6392\u5e8f: \u5168\u542b,\u4ee5\u65f6\u5e8f\u957f\u5ea6\u6392\u5e8f;\n */\n+(NSArray*) fullMatchs:(NSArray*)matchs {\n    //1. \u7b5b\u9009;\n    NSArray *fullMatchs = [SMGUtils filterArr:matchs checkValid:^BOOL(AIMatchFoModel *item) {\n        AIFoNodeBase *matchFo = [SMGUtils searchNode:item.matchFo];\n        return item.cutIndex >= matchFo.count - 1;\n    }];\n    //2. \u6392\u5e8f;\n    fullMatchs = [fullMatchs sortedArrayUsingComparator:^NSComparisonResult(AIMatchFoModel *o1, AIMatchFoModel *o2) {\n        AIFoNodeBase *mFo1 = [SMGUtils searchNode:o1.matchFo];\n        AIFoNodeBase *mFo2 = [SMGUtils searchNode:o2.matchFo];\n        return [SMGUtils compareIntA:mFo1.count intB:mFo2.count];\n    }];"
        },
        {
            "comment": "This code contains two methods: 1) \"partMatchs\" filters a given array of match models, returning only those that are not full matches. The filtered array is sorted based on the matching degree, and the first 10 results are returned. 2) \"fullMatchs\" returns the first 10 elements from the \"fullMatchs\" array. Both methods can be accessed within the \"AIShortMatchModel\" class.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AIThinkingControl/In/Model/AIShortMatchModel.m\":138-157",
            "content": "    //3. \u8fd410\u6761;\n    return ARR_SUB(fullMatchs, 0, 10);\n}\n/**\n *  MARK:--------------------\u7b5b\u9009\u51fa\u975e\u5168\u542b\u7684--------------------\n *  @desc \u6392\u5e8f: \u975e\u5168\u542b,\u4ee5\u5339\u914d\u5ea6(\u9ed8\u8ba4)\u6392\u5e8f;\n */\n+(NSArray*) partMatchs:(NSArray*)matchs {\n    //1. \u7b5b\u9009;\n    NSArray *partMatchs = [SMGUtils filterArr:matchs checkValid:^BOOL(AIMatchFoModel *item) {\n        AIFoNodeBase *matchFo = [SMGUtils searchNode:item.matchFo];\n        return item.cutIndex < matchFo.count - 1;\n    }];\n    //2. \u8fd410\u6761;\n    return ARR_SUB(partMatchs, 0, 10);\n}\n@end"
        }
    ]
}