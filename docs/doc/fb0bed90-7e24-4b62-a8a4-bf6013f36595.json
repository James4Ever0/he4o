{
    "summary": "This code retrieves urgentTo and delta values from mvNodes arrays using methods that iterate through nodes, check validity, and determine reference directions. The method takes an array of nodes and a block, calculates the sum for each node, and returns the average value.",
    "details": [
        {
            "comment": "This code file, AINetAbsCMVUtil.m, defines public methods for retrieving abstract urgentTo and delta values from arrays of mvNodes. These methods use singleValueBlock to iterate through the nodes, check if they are valid instances of AICMVNodeBase, and return their corresponding integer values.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsCMVManager/AINetAbsCMVUtil.m\":0-39",
            "content": "//\n//  AINetAbsCMVUtil.m\n//  SMG_NothingIsAll\n//\n//  Created by iMac on 2018/7/27.\n//  Copyright \u00a9 2018\u5e74 XiaoGang. All rights reserved.\n//\n#import \"AINetAbsCMVUtil.h\"\n#import \"AIKVPointer.h\"\n#import \"AINetIndex.h\"\n#import \"AIAbsCMVNode.h\"\n#import \"AIPort.h\"\n#import \"ThinkingUtils.h\"\n@implementation AINetAbsCMVUtil\n//MARK:===============================================================\n//MARK:                     < publicMethod >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u53d6aNode\u548cbNode\u7684\u62bd\u8c61urgentTo\u503c--------------------\n */\n+(NSInteger) getAbsUrgentTo:(NSArray*)mvNodes {\n    return [self getAbsValue:mvNodes singleValueBlock:^NSInteger(AICMVNodeBase *mvNode) {\n        if (ISOK(mvNode, AICMVNodeBase.class)) {\n            return [NUMTOOK([AINetIndex getData:mvNode.urgentTo_p]) integerValue];\n        }\n        return 0;\n    }];\n}\n/**\n *  MARK:--------------------\u53d6aNode\u548cbNode\u7684\u62bd\u8c61delta\u503c--------------------\n */\n+(NSInteger) getAbsDelta:(NSArray*)mvNodes {\n    return [self getAbsValue:mvNodes singleValueBlock:^NSInteger(AICMVNodeBase *mvNode) {"
        },
        {
            "comment": "This method retrieves the default strong index for a given AIAbsCMVNode. It first checks if the input node is valid, and then converts its delta to an integer. The code determines the reference direction using ThinkingUtils, and retrieves the net node pointers from that direction. Finally, it iterates over conMvs to find the strongest connection based on port strong values, returning the default strong index.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsCMVManager/AINetAbsCMVUtil.m\":40-61",
            "content": "        if (ISOK(mvNode, AICMVNodeBase.class)) {\n            return [NUMTOOK([AINetIndex getData:mvNode.delta_p]) integerValue];\n        }\n        return 0;\n    }];\n}\n+(NSInteger) getDefaultStrong_Index:(AIAbsCMVNode*)absMv conMvs:(NSArray*)conMvs{\n    if (absMv && ARRISOK(conMvs)) {\n        //1. \u53d6\u51fa\u65b9\u5411\u7d22\u5f15;\n        NSInteger delta = [NUMTOOK([AINetIndex getData:absMv.delta_p]) integerValue];\n        MVDirection direction = [ThinkingUtils getMvReferenceDirection:delta];\n        NSArray *indexes = [theNet getNetNodePointersFromDirectionReference:absMv.pointer.algsType direction:direction limit:INT_MAX];\n        //2. \u7b5b\u51fa\u6700\u5f3a\u65b9\u5411\u7d22\u5f15\u5f3a\u5ea6;\n        NSInteger maxStrong = 0;\n        for (__block AICMVNodeBase *weakConMv in conMvs) {\n            AIPort *findPort = ARR_INDEX([SMGUtils filterArr:indexes checkValid:^BOOL(AIPort *item) {\n                return [item.target_p isEqual:weakConMv.pointer];\n            }], 0);\n            if (findPort && maxStrong < findPort.strong.value) {\n                maxStrong = findPort.strong.value;"
        },
        {
            "comment": "This method takes in an array of nodes and a single-value block. It checks if the input is valid, then calculates the sum of urgentTo or delta for each node. Finally, it returns the average value by dividing the total sum by the count of nodes.",
            "location": "\"/media/root/Prima/works/he4o/docs/src/SMG_NothingIsAll/AIFoundation/AINet/AIAbsCMVManager/AINetAbsCMVUtil.m\":62-94",
            "content": "            }\n        }\n        return maxStrong + 1;\n    }\n    return 1;\n}\n//MARK:===============================================================\n//MARK:                     < privateMethod >\n//MARK:===============================================================\n/**\n *  MARK:--------------------\u83b7\u53d6\u5e73\u5747\u503c\u65b9\u6cd5--------------------\n */\n+(NSInteger) getAbsValue:(NSArray*)mvNodes singleValueBlock:(NSInteger(^)(AICMVNodeBase*))singleValueBlock{\n    //1. \u6570\u636e\u68c0\u67e5\n    if (!ARRISOK(mvNodes) || !singleValueBlock) {\n        return 0;\n    }\n    //2. \u53d6SUM(urgentTo | delta)\n    NSInteger sum = 0;\n    for (AICMVNodeBase *mvNode in mvNodes) {\n        NSInteger singleValue = singleValueBlock(mvNode);\n        sum += singleValue;\n    }\n    //3. \u53d6absUrgentTo | absDelta; (//\u7531MIN(aUrgentTo, bUrgentTo)\u6539\u4e3a\u5e73\u5747)\n    NSInteger absValue = sum / (int)mvNodes.count;\n    return absValue;\n}\n@end"
        }
    ]
}